[2019-01-01T17:11:33.272] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:11:33.272] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:15:24.737] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:15:24.737] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:15:24.737] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T17:15:24.738] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:15:24.738] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:15:24.738] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:15:24.738] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:15:24.738] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:15:24.738] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:31:58.760] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:31:58.760] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:31:58.760] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T17:31:58.761] [TRACE] PropertiesParser -      using function Function() { [native code] } ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:31:58.761] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:31:58.761] [TRACE] PropertiesParser -      using function Function() { [native code] } ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:31:58.761] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:31:58.761] [TRACE] PropertiesParser -      using function Function() { [native code] } ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:31:58.761] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:32:56.215] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:32:56.215] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:32:56.215] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T17:32:56.215] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:32:56.215] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:32:56.216] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:32:56.216] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:32:56.216] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:32:56.216] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:33:24.394] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:33:24.394] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:33:24.394] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T17:33:24.395] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:33:24.395] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:33:24.395] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:33:24.395] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:33:24.395] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:33:24.395] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:47:47.783] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:47:47.783] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:47:47.783] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T17:47:47.784] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:47:47.784] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:47:47.784] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:47:47.784] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:47:47.784] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:47:47.784] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:55:44.022] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:55:44.022] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:55:44.022] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T17:55:44.022] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:55:44.023] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:55:44.023] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:55:44.023] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:55:44.023] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:55:44.023] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:56:25.224] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:56:25.224] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:56:25.224] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T17:56:25.224] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:56:25.225] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:56:25.225] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:56:25.225] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:56:25.226] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:56:25.226] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:56:46.054] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:56:46.054] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:56:46.055] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T17:56:46.055] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:56:46.055] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:56:46.055] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:56:46.055] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:56:46.055] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:56:46.056] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:58:35.390] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T17:58:35.390] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T17:58:35.390] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T17:58:35.390] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:58:35.391] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:58:35.391] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:58:35.391] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T17:58:35.391] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T17:58:35.391] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:00:11.893] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:00:11.894] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:00:11.894] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:00:11.894] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:00:11.894] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:00:11.895] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:00:11.895] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:00:11.895] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:00:11.895] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:03:21.246] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:03:21.247] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:03:21.247] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:03:21.247] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:03:21.247] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:03:21.247] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:03:21.247] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:03:21.248] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:03:21.248] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:04:06.430] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:04:06.430] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:04:06.431] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:04:06.431] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:04:06.431] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:04:06.431] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:04:06.431] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:04:06.431] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:04:06.432] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:06:18.033] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:06:18.033] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:06:18.033] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:06:18.033] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:06:18.034] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:06:18.034] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:06:18.034] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:06:18.034] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:07:16.182] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:28:16)
[2019-01-01T18:07:16.183] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:32:17)
[2019-01-01T18:07:16.183] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:21)
[2019-01-01T18:07:16.183] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:40:25)
[2019-01-01T18:07:16.183] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:21)
[2019-01-01T18:07:16.184] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:40:25)
[2019-01-01T18:07:16.184] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:21)
[2019-01-01T18:07:16.184] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:40:25)
[2019-01-01T18:08:11.385] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:28:16)
[2019-01-01T18:08:16.782] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:32:17)
[2019-01-01T18:08:16.783] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:21)
[2019-01-01T18:08:16.784] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:40:25)
[2019-01-01T18:08:16.784] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:21)
[2019-01-01T18:08:16.784] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:40:25)
[2019-01-01T18:08:16.785] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:21)
[2019-01-01T18:08:16.786] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:40:25)
[2019-01-01T18:09:19.739] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:09:19.739] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:09:19.739] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:09:19.739] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:09:19.739] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:09:19.740] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:09:19.740] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:09:19.740] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:09:19.740] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:09:56.601] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:09:56.601] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:09:56.602] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:09:56.602] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:09:56.602] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:09:56.602] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:09:56.602] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:09:56.603] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:09:56.603] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:13:20.627] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:13:20.628] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:13:20.628] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:13:20.629] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:13:20.629] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:13:20.629] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:13:20.629] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:13:20.629] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:13:20.630] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:14:11.719] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:14:11.720] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:14:11.720] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:14:11.720] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:14:11.720] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:14:11.721] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:14:11.721] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:14:11.721] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:14:11.721] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:14:17.015] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:14:17.015] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:14:17.015] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:14:17.016] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:14:17.016] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:14:17.016] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:14:17.016] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:14:17.017] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:14:17.017] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:15:12.369] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:15:12.370] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:15:12.370] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:15:12.370] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:15:12.423] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:15:12.425] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:15:12.425] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:15:12.425] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:15:12.425] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:21:55.086] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:21:55.086] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:21:55.087] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:21:55.087] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:21:55.087] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:21:55.088] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:21:55.088] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:21:55.088] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:21:55.088] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:22:50.639] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:22:50.639] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:22:50.640] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:22:50.640] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:22:50.640] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:22:50.641] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:22:50.641] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:22:50.641] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:22:50.641] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:26:44.928] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:26:44.929] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:26:44.929] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:26:44.929] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:26:44.929] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:26:44.930] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:26:44.930] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:26:44.930] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:26:44.930] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:27:21.991] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:27:21.991] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:27:21.991] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:27:21.991] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:27:21.992] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:27:21.992] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:27:21.992] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:27:21.992] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:27:21.992] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:27:31.175] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:27:31.176] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:27:31.176] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:27:31.176] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:27:31.176] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:27:31.177] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:27:31.177] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:27:31.177] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:27:31.177] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:28:07.114] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:28:07.114] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:28:07.114] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:28:07.115] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:28:07.115] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:28:07.115] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:28:07.116] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:28:07.116] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:28:07.116] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:28:34.823] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:28:34.824] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:28:34.824] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:28:34.824] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:28:34.824] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:28:34.825] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:28:34.825] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:28:34.825] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:28:34.825] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:28:53.534] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:28:53.534] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:28:53.535] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:28:53.535] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:28:53.535] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:28:53.535] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:28:53.535] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:28:53.536] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:28:53.536] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:30:18.133] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:30:18.134] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:30:18.134] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:30:18.134] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:30:18.135] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:30:18.135] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:30:18.135] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:30:18.135] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:30:18.136] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:30:18.171] [INFO] Foundation - Initializing FoundationClass ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:31:59.239] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:31:59.239] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:31:59.239] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:31:59.240] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:31:59.240] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:31:59.240] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:31:59.241] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:31:59.241] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:31:59.241] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:32:35.247] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:32:35.247] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:32:35.247] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:32:35.248] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:32:35.248] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:32:35.248] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:32:35.248] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:32:35.249] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:32:35.249] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:33:01.495] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:33:01.496] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:33:01.496] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:33:01.496] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:33:01.496] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:33:01.497] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:33:01.497] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:33:01.497] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:33:01.497] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:33:01.546] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:34:07.621] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:34:07.621] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:34:07.621] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:34:07.622] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:34:07.622] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:34:07.622] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:34:07.622] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:34:07.622] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:34:07.623] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:34:07.661] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:34:37.295] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:34:37.337] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:34:37.295] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:34:37.295] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:34:37.295] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:34:37.295] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:34:37.296] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:34:37.296] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:34:37.296] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:34:37.296] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:36:03.042] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:36:03.075] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:36:03.042] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:36:03.043] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:36:03.043] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:36:03.043] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:36:03.043] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:36:03.044] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:36:03.044] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:36:03.044] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:36:03.075] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:36:03.075] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:36:03.104] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:36:03.105] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:36:03.105] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:36:03.105] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:36:03.105] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:36:03.105] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:36:03.105] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:36:03.105] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:36:03.105] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:38:01.049] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:38:01.049] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:38:01.050] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:38:01.050] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:38:01.050] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:38:01.050] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:38:01.050] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:38:01.050] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:38:01.050] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:38:01.078] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:38:01.078] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:38:01.078] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:38:01.102] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:38:01.102] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:38:01.102] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:38:01.102] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:38:01.102] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:38:01.103] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:38:01.103] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:38:01.103] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:38:01.103] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:44:44.763] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:44:44.764] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:44:44.764] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:44:44.764] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:44:44.765] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:44:44.765] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:44:44.765] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:44:44.765] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:44:44.766] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:44:44.795] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:44:44.795] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:44:44.795] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:44:44.824] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:44:44.824] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:44:44.824] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:44:44.825] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:44:44.825] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:44:44.825] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:44:44.825] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:44:44.825] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:44:44.825] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:44:57.130] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:44:57.130] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:44:57.130] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:44:57.131] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:44:57.131] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:44:57.132] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:44:57.132] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:44:57.132] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:44:57.132] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:44:57.177] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:44:57.177] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:44:57.178] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:44:57.211] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:44:57.211] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:44:57.211] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:44:57.212] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:44:57.212] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:44:57.212] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:44:57.212] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:44:57.212] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:44:57.212] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:45:35.590] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:45:35.621] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:45:35.590] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:45:35.591] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:45:35.591] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:45:35.591] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:45:35.591] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:45:35.591] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:45:35.592] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:45:35.592] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:45:35.622] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:45:35.622] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:45:35.648] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:45:35.648] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:45:35.648] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:45:35.649] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:45:35.649] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:45:35.649] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:45:35.649] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:45:35.649] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:45:35.649] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:53:28.704] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:53:28.729] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:53:28.704] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:53:28.704] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:53:28.705] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:53:28.705] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:53:28.705] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:53:28.705] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:53:28.705] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:53:28.705] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:53:28.730] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:53:28.730] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:53:28.758] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:53:28.758] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:53:28.758] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:53:28.758] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:53:28.758] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:53:28.759] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:53:28.759] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:53:28.759] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:53:28.759] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:55:07.203] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:55:07.203] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:55:07.203] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:55:07.203] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:55:07.204] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:55:07.204] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:55:07.204] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:55:07.204] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:55:07.204] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:55:07.356] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:55:07.356] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:55:07.357] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:55:07.395] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:55:07.395] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:55:07.395] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:55:07.395] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:55:07.395] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:55:07.395] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:55:07.395] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:55:07.395] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:55:07.396] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:56:13.814] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:56:13.848] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:56:13.815] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:56:13.815] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:56:13.815] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:56:13.816] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:56:13.816] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:56:13.816] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:56:13.816] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:56:13.817] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:56:13.848] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:56:13.848] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:56:13.885] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:56:13.885] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:56:13.885] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:56:13.885] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:56:13.885] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:56:13.885] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:56:13.886] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:56:13.886] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:56:13.886] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:57:29.284] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:57:29.314] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:57:29.284] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:57:29.285] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:57:29.285] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:57:29.285] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:57:29.285] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:57:29.285] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:57:29.286] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:57:29.286] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:57:29.314] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:57:29.314] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:57:29.362] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:57:29.362] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:57:29.362] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:57:29.362] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:57:29.362] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:57:29.363] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:57:29.363] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:57:29.363] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:57:29.363] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:57:51.680] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:57:51.681] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:57:51.681] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:57:51.681] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:57:51.681] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:57:51.682] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:57:51.696] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:57:51.696] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:57:51.696] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:57:51.730] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:57:51.731] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:57:51.731] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:57:51.758] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:57:51.758] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:57:51.758] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:57:51.759] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:57:51.759] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:57:51.759] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:57:51.759] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:57:51.759] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:57:51.759] [TRACE] PropertiesParser -      => .xml
[2019-01-01T18:58:36.835] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T18:58:36.865] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T18:58:36.836] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T18:58:36.836] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T18:58:36.836] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:58:36.836] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:58:36.837] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:58:36.837] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:58:36.837] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T18:58:36.837] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T18:58:36.866] [INFO] Foundation - Parsing base xml context ...  process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:54:16)
[2019-01-01T18:58:36.866] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:55:16)
[2019-01-01T18:58:36.893] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T18:58:36.893] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T18:58:36.894] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T18:58:36.894] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:58:36.894] [TRACE] PropertiesParser -      => .properties
[2019-01-01T18:58:36.894] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:58:36.894] [TRACE] PropertiesParser -      => .json
[2019-01-01T18:58:36.894] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T18:58:36.894] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:07:56.462] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:07:56.505] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T19:07:56.462] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:07:56.463] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:07:56.463] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:07:56.463] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:07:56.463] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:07:56.464] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:07:56.464] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:07:56.464] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:07:56.506] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:70:16)
[2019-01-01T19:07:56.506] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:71:16)
[2019-01-01T19:07:56.544] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:07:56.544] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:07:56.544] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:07:56.544] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:07:56.544] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:07:56.544] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:07:56.544] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:07:56.544] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:07:56.544] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:09:17.114] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:09:17.114] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:09:17.115] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:09:17.115] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:09:17.115] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:09:17.115] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:09:17.115] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:09:17.115] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:09:17.116] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:09:17.151] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T19:09:17.151] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:70:16)
[2019-01-01T19:09:17.152] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:71:16)
[2019-01-01T19:09:17.180] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:09:17.180] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:09:17.180] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:09:17.180] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:09:17.180] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:09:17.180] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:09:17.181] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:09:17.181] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:09:17.181] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:09:17.186] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:09:17.186] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:09:17.187] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:09:17.204] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:09:17.204] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:09:17.204] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:09:17.204] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:09:17.204] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:09:17.204] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:09:17.204] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:09:17.204] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:09:17.204] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:10:33.940] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:10:33.940] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:10:33.941] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:10:33.941] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:10:33.941] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:10:33.942] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:10:33.942] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:10:33.942] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:10:33.943] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:10:33.977] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T19:10:33.977] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:71:16)
[2019-01-01T19:10:33.978] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:72:16)
[2019-01-01T19:10:34.007] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:10:34.007] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:10:34.007] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:10:34.007] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:10:34.007] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:10:34.007] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:10:34.008] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:10:34.008] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:10:34.008] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:10:34.014] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:10:34.015] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:10:34.015] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:10:34.030] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:10:34.030] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:10:34.030] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:10:34.030] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:10:34.030] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:10:34.030] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:10:34.030] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:10:34.030] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:10:34.031] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:17:36.173] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:17:36.203] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T19:17:36.174] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:17:36.174] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:17:36.174] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:17:36.174] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:17:36.174] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:17:36.174] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:17:36.175] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:17:36.175] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:17:36.204] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:71:16)
[2019-01-01T19:17:36.204] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:72:16)
[2019-01-01T19:17:36.230] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:17:36.230] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:17:36.231] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:17:36.231] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:17:36.231] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:17:36.231] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:17:36.231] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:17:36.231] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:17:36.231] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:17:36.238] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:17:36.238] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:17:36.238] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:17:36.253] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:17:36.254] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:17:36.254] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:17:36.254] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:17:36.254] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:17:36.254] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:17:36.254] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:17:36.254] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:17:36.254] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:26:28.269] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:26:28.299] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:44:16)
[2019-01-01T19:26:28.269] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:26:28.269] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:26:28.270] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:26:28.270] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:26:28.270] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:26:28.270] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:26:28.270] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:26:28.270] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:26:28.299] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:91:16)
[2019-01-01T19:26:28.300] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:92:16)
[2019-01-01T19:26:28.325] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:26:28.335] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:26:28.325] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:26:28.325] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:26:28.325] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:26:28.325] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:26:28.325] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:26:28.325] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:26:28.325] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:26:28.325] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:26:28.335] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:26:28.335] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:26:28.349] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:26:28.349] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:26:28.349] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:26:28.350] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:26:28.350] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:26:28.350] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:26:28.350] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:26:28.350] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:26:28.350] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:29:32.769] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:29:32.806] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:51:16)
[2019-01-01T19:29:32.769] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:29:32.770] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:29:32.770] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:29:32.770] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:29:32.770] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:29:32.771] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:29:32.771] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:29:32.771] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:29:32.806] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:97:16)
[2019-01-01T19:29:32.807] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:29:32.809] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:51:16)
[2019-01-01T19:29:32.809] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:97:16)
[2019-01-01T19:29:32.809] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:29:32.840] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:29:32.840] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:29:32.840] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:29:32.840] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:32.840] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:29:32.840] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:32.840] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:29:32.840] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:32.840] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:29:32.855] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:29:32.855] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:29:32.855] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:29:32.855] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:32.855] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:29:32.855] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:32.856] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:29:32.856] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:32.856] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:29:52.525] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:29:52.553] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:51:16)
[2019-01-01T19:29:52.525] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:29:52.525] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:29:52.525] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:29:52.525] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:29:52.526] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:29:52.526] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:29:52.526] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:29:52.526] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:29:52.553] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:97:16)
[2019-01-01T19:29:52.553] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:29:52.556] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:51:16)
[2019-01-01T19:29:52.556] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:97:16)
[2019-01-01T19:29:52.557] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:29:52.583] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:29:52.583] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:29:52.583] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:29:52.584] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:52.584] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:29:52.584] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:52.584] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:29:52.584] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:52.584] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:29:52.599] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:29:52.599] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:29:52.599] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:29:52.599] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:52.599] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:29:52.599] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:52.599] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:29:52.599] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:29:52.600] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:30:20.579] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:30:20.580] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:30:20.580] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:30:20.580] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:30:20.580] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:30:20.581] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:30:20.581] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:30:20.581] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:30:20.581] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:30:20.610] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:51:16)
[2019-01-01T19:30:20.610] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:97:16)
[2019-01-01T19:30:20.611] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:30:20.638] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:30:20.638] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:30:20.638] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:30:20.638] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:30:20.638] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:30:20.638] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:30:20.638] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:30:20.638] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:30:20.638] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:30:20.645] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:30:20.645] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:30:20.645] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:30:20.659] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:30:20.659] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:30:20.659] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:30:20.659] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:30:20.660] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:30:20.660] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:30:20.660] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:30:20.660] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:30:20.660] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:31:27.252] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:31:27.281] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:51:16)
[2019-01-01T19:31:27.253] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:31:27.253] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:31:27.253] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:31:27.253] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:31:27.253] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:31:27.254] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:31:27.254] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:31:27.254] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:31:27.282] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:97:16)
[2019-01-01T19:31:27.282] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:31:27.308] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:31:27.316] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:31:27.308] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:31:27.308] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:31:27.308] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:31:27.308] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:31:27.309] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:31:27.309] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:31:27.309] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:31:27.309] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:31:27.317] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:31:27.317] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:31:27.331] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:31:27.332] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:31:27.332] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:31:27.332] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:31:27.332] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:31:27.332] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:31:27.332] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:31:27.332] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:31:27.332] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:35:56.673] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:35:56.673] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:35:56.673] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:35:56.673] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:35:56.674] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:35:56.674] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:35:56.674] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:35:56.674] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:35:56.674] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:36:24.459] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:36:24.460] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:36:24.460] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:36:24.461] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:36:24.461] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:36:24.461] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:36:24.461] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:36:24.462] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:36:24.462] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:36:58.870] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:36:58.870] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:36:58.871] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:36:58.871] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:36:58.871] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:36:58.871] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:36:58.872] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:36:58.872] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:36:58.872] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:37:34.351] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:37:34.380] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:51:16)
[2019-01-01T19:37:34.351] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:37:34.352] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:37:34.352] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:37:34.352] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:37:34.352] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:37:34.352] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:37:34.352] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:37:34.353] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:37:34.380] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:97:16)
[2019-01-01T19:37:34.380] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:37:34.408] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:37:34.409] [TRACE] Foundation -     Received context: [object Object]
[2019-01-01T19:37:34.408] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:37:34.408] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:37:34.408] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:37:34.408] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:37:34.408] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:37:34.408] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:37:34.408] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:37:34.408] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:37:34.416] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:37:34.416] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:37:34.416] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:37:34.431] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:37:34.432] [TRACE] Foundation -     Received context: [object Object]
[2019-01-01T19:37:34.431] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:37:34.431] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:37:34.431] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:37:34.431] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:37:34.432] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:37:34.432] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:37:34.432] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:37:34.432] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:38:39.798] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:38:39.798] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:38:39.798] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:38:39.798] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:38:39.798] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:38:39.799] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:38:39.799] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:38:39.799] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:38:39.799] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:38:39.832] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:52:16)
[2019-01-01T19:38:39.832] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:38:39.832] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:99:16)
[2019-01-01T19:38:39.856] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:38:39.911] [TRACE] Foundation -     Received context: { phase: 
   [ _BUILD_CONTEXT_: '0x2',
     _BUILD_FINISHED_: '0x4',
     _BUILD_PLUGIN_FINISHED_: '0x8',
     _BUILD_STRUCTURE_: '0x1',
     _FINAL_APPLICATION_CONTEXT_: '0xFF',
     _FINAL_PLUGIN_CONTEXT_: '0xFE' ],
  stages: 
   [ _AOP_INITIALIZE: 'aop_initialize',
     _AOP_WIRE: 'aop_wire',
     _FINISH_SETUP_: 'finishing bean setup',
     _INHERIT_: 'inherit',
     _INITIALIZE_: 'initialize',
     _INJECT_: 'inject',
     _INSTANTIATE_: 'instantiate',
     _RUN_: 'run',
     _STASHING_: 'stashing' ],
  LogManager: 
   LogManager {
     configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
     categories: 
      { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
        ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
        StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
        DependencyBuilder: 
         { appenders: [ 'default', 'DependencyBuilder' ],
           level: 'DEBUG' },
        PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
        Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
     logger: Logger { category: 'default', context: {} } },
  StaticMemberExpressionIdentifierMatch: [Function: StaticMemberExpressionIdentifierMatch],
  VariableDecorationStaticMemberExpressionIdentifierMatch: [Function: VariableDecorationStaticMemberExpressionIdentifierMatch],
  Diagram: [AsyncFunction: draw],
  TokenParser: 
   [ Block: [Function: Block],
     CallExpression: [Function: CallExpression],
     ClassDeclaration: [Function: ClassDeclaration],
     ExpressionStatement: [Function: ExpressionStatement],
     FunctionDeclaration: [Function: FunctionDeclaration],
     Line: [Function: Line],
     MemberExpression: [Function: MemberExpression],
     MethodDefinition: [Function: MethodDefinition],
     Property: [Function: Property],
     VariableDeclaration: [Function: VariableDeclaration] ],
  PropertiesProcessors: 
   [ { [Function: XMLPropertiesProcessor]
       Promise: 
        { [Function: Promise]
          TypeError: [Function: TypeError],
          RangeError: [Function: RangeError],
          CancellationError: [Function: SubError],
          TimeoutError: [Function: SubError],
          OperationalError: [Function: OperationalError],
          RejectionError: [Function: OperationalError],
          AggregateError: [Function: SubError],
          _peekContext: [Function],
          onPossiblyUnhandledRejection: [Function],
          onUnhandledRejectionHandled: [Function],
          longStackTraces: [Function],
          hasLongStackTraces: [Function],
          config: [Function],
          getNewLibraryCopy: [Function],
          is: [Function],
          fromCallback: [Function],
          fromNode: [Function],
          all: [Function],
          cast: [Function],
          fulfilled: [Function],
          resolve: [Function],
          rejected: [Function],
          reject: [Function],
          setScheduler: [Function],
          pending: [Function],
          defer: [Function],
          method: [Function],
          try: [Function],
          attempt: [Function],
          bind: [Function],
          PromiseInspection: [Function: PromiseInspection],
          join: [Function],
          Promise: [Circular],
          version: '3.5.3',
          map: [Function],
          using: [Function],
          delay: [Function],
          coroutine: { [Function] addYieldHandler: [Function] },
          spawn: [Function],
          promisify: [Function],
          promisifyAll: [Function],
          props: [Function],
          race: [Function],
          reduce: [Function],
          settle: [Function],
          some: [Function],
          _SomePromiseArray: [Function: SomePromiseArray],
          filter: [Function],
          each: [Function],
          mapSeries: [Function: PromiseMapSeries],
          any: [Function],
          noConflict: [Function: noConflict] },
       propertiesReader: 
        { parse: [Function],
          stringify: [Function],
          createStringifier: [Function: createStringifier] } },
     { [Function: JsonPropertiesProcessor]
       Promise: 
        { [Function: Promise]
          TypeError: [Function: TypeError],
          RangeError: [Function: RangeError],
          CancellationError: [Function: SubError],
          TimeoutError: [Function: SubError],
          OperationalError: [Function: OperationalError],
          RejectionError: [Function: OperationalError],
          AggregateError: [Function: SubError],
          _peekContext: [Function],
          onPossiblyUnhandledRejection: [Function],
          onUnhandledRejectionHandled: [Function],
          longStackTraces: [Function],
          hasLongStackTraces: [Function],
          config: [Function],
          getNewLibraryCopy: [Function],
          is: [Function],
          fromCallback: [Function],
          fromNode: [Function],
          all: [Function],
          cast: [Function],
          fulfilled: [Function],
          resolve: [Function],
          rejected: [Function],
          reject: [Function],
          setScheduler: [Function],
          pending: [Function],
          defer: [Function],
          method: [Function],
          try: [Function],
          attempt: [Function],
          bind: [Function],
          PromiseInspection: [Function: PromiseInspection],
          join: [Function],
          Promise: [Circular],
          version: '3.5.3',
          map: [Function],
          using: [Function],
          delay: [Function],
          coroutine: { [Function] addYieldHandler: [Function] },
          spawn: [Function],
          promisify: [Function],
          promisifyAll: [Function],
          props: [Function],
          race: [Function],
          reduce: [Function],
          settle: [Function],
          some: [Function],
          _SomePromiseArray: [Function: SomePromiseArray],
          filter: [Function],
          each: [Function],
          mapSeries: [Function: PromiseMapSeries],
          any: [Function],
          noConflict: [Function: noConflict] } },
     { [Function: XMLPropertiesProcessor]
       Promise: 
        { [Function: Promise]
          TypeError: [Function: TypeError],
          RangeError: [Function: RangeError],
          CancellationError: [Function: SubError],
          TimeoutError: [Function: SubError],
          OperationalError: [Function: OperationalError],
          RejectionError: [Function: OperationalError],
          AggregateError: [Function: SubError],
          _peekContext: [Function],
          onPossiblyUnhandledRejection: [Function],
          onUnhandledRejectionHandled: [Function],
          longStackTraces: [Function],
          hasLongStackTraces: [Function],
          config: [Function],
          getNewLibraryCopy: [Function],
          is: [Function],
          fromCallback: [Function],
          fromNode: [Function],
          all: [Function],
          cast: [Function],
          fulfilled: [Function],
          resolve: [Function],
          rejected: [Function],
          reject: [Function],
          setScheduler: [Function],
          pending: [Function],
          defer: [Function],
          method: [Function],
          try: [Function],
          attempt: [Function],
          bind: [Function],
          PromiseInspection: [Function: PromiseInspection],
          join: [Function],
          Promise: [Circular],
          version: '3.5.3',
          map: [Function],
          using: [Function],
          delay: [Function],
          coroutine: { [Function] addYieldHandler: [Function] },
          spawn: [Function],
          promisify: [Function],
          promisifyAll: [Function],
          props: [Function],
          race: [Function],
          reduce: [Function],
          settle: [Function],
          some: [Function],
          _SomePromiseArray: [Function: SomePromiseArray],
          filter: [Function],
          each: [Function],
          mapSeries: [Function: PromiseMapSeries],
          any: [Function],
          noConflict: [Function: noConflict] } } ],
  PropertiesAnnotationParserInstance: 
   PropertiesParser {
     processors: 
      { '.properties': 
         { [Function: XMLPropertiesProcessor]
           Promise: 
            { [Function: Promise]
              TypeError: [Function: TypeError],
              RangeError: [Function: RangeError],
              CancellationError: [Function: SubError],
              TimeoutError: [Function: SubError],
              OperationalError: [Function: OperationalError],
              RejectionError: [Function: OperationalError],
              AggregateError: [Function: SubError],
              _peekContext: [Function],
              onPossiblyUnhandledRejection: [Function],
              onUnhandledRejectionHandled: [Function],
              longStackTraces: [Function],
              hasLongStackTraces: [Function],
              config: [Function],
              getNewLibraryCopy: [Function],
              is: [Function],
              fromCallback: [Function],
              fromNode: [Function],
              all: [Function],
              cast: [Function],
              fulfilled: [Function],
              resolve: [Function],
              rejected: [Function],
              reject: [Function],
              setScheduler: [Function],
              pending: [Function],
              defer: [Function],
              method: [Function],
              try: [Function],
              attempt: [Function],
              bind: [Function],
              PromiseInspection: [Function: PromiseInspection],
              join: [Function],
              Promise: [Circular],
              version: '3.5.3',
              map: [Function],
              using: [Function],
              delay: [Function],
              coroutine: { [Function] addYieldHandler: [Function] },
              spawn: [Function],
              promisify: [Function],
              promisifyAll: [Function],
              props: [Function],
              race: [Function],
              reduce: [Function],
              settle: [Function],
              some: [Function],
              _SomePromiseArray: [Function: SomePromiseArray],
              filter: [Function],
              each: [Function],
              mapSeries: [Function: PromiseMapSeries],
              any: [Function],
              noConflict: [Function: noConflict] },
           propertiesReader: 
            { parse: [Function],
              stringify: [Function],
              createStringifier: [Function: createStringifier] } },
        '.json': 
         { [Function: JsonPropertiesProcessor]
           Promise: 
            { [Function: Promise]
              TypeError: [Function: TypeError],
              RangeError: [Function: RangeError],
              CancellationError: [Function: SubError],
              TimeoutError: [Function: SubError],
              OperationalError: [Function: OperationalError],
              RejectionError: [Function: OperationalError],
              AggregateError: [Function: SubError],
              _peekContext: [Function],
              onPossiblyUnhandledRejection: [Function],
              onUnhandledRejectionHandled: [Function],
              longStackTraces: [Function],
              hasLongStackTraces: [Function],
              config: [Function],
              getNewLibraryCopy: [Function],
              is: [Function],
              fromCallback: [Function],
              fromNode: [Function],
              all: [Function],
              cast: [Function],
              fulfilled: [Function],
              resolve: [Function],
              rejected: [Function],
              reject: [Function],
              setScheduler: [Function],
              pending: [Function],
              defer: [Function],
              method: [Function],
              try: [Function],
              attempt: [Function],
              bind: [Function],
              PromiseInspection: [Function: PromiseInspection],
              join: [Function],
              Promise: [Circular],
              version: '3.5.3',
              map: [Function],
              using: [Function],
              delay: [Function],
              coroutine: { [Function] addYieldHandler: [Function] },
              spawn: [Function],
              promisify: [Function],
              promisifyAll: [Function],
              props: [Function],
              race: [Function],
              reduce: [Function],
              settle: [Function],
              some: [Function],
              _SomePromiseArray: [Function: SomePromiseArray],
              filter: [Function],
              each: [Function],
              mapSeries: [Function: PromiseMapSeries],
              any: [Function],
              noConflict: [Function: noConflict] } },
        '.xml': 
         { [Function: XMLPropertiesProcessor]
           Promise: 
            { [Function: Promise]
              TypeError: [Function: TypeError],
              RangeError: [Function: RangeError],
              CancellationError: [Function: SubError],
              TimeoutError: [Function: SubError],
              OperationalError: [Function: OperationalError],
              RejectionError: [Function: OperationalError],
              AggregateError: [Function: SubError],
              _peekContext: [Function],
              onPossiblyUnhandledRejection: [Function],
              onUnhandledRejectionHandled: [Function],
              longStackTraces: [Function],
              hasLongStackTraces: [Function],
              config: [Function],
              getNewLibraryCopy: [Function],
              is: [Function],
              fromCallback: [Function],
              fromNode: [Function],
              all: [Function],
              cast: [Function],
              fulfilled: [Function],
              resolve: [Function],
              rejected: [Function],
              reject: [Function],
              setScheduler: [Function],
              pending: [Function],
              defer: [Function],
              method: [Function],
              try: [Function],
              attempt: [Function],
              bind: [Function],
              PromiseInspection: [Function: PromiseInspection],
              join: [Function],
              Promise: [Circular],
              version: '3.5.3',
              map: [Function],
              using: [Function],
              delay: [Function],
              coroutine: { [Function] addYieldHandler: [Function] },
              spawn: [Function],
              promisify: [Function],
              promisifyAll: [Function],
              props: [Function],
              race: [Function],
              reduce: [Function],
              settle: [Function],
              some: [Function],
              _SomePromiseArray: [Function: SomePromiseArray],
              filter: [Function],
              each: [Function],
              mapSeries: [Function: PromiseMapSeries],
              any: [Function],
              noConflict: [Function: noConflict] } } },
     glob: 
      { [Function: glob]
        sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
        GlobSync: [Function: GlobSync],
        glob: [Circular],
        hasMagic: [Function],
        Glob: 
         { [Function: Glob]
           super_: 
            { [Function: EventEmitter]
              EventEmitter: [Circular],
              usingDomains: false,
              defaultMaxListeners: [Getter/Setter],
              init: [Function],
              listenerCount: [Function] } } },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: 
         { resolve: [Function: resolve],
           normalize: [Function: normalize],
           isAbsolute: [Function: isAbsolute],
           join: [Function: join],
           relative: [Function: relative],
           _makeLong: [Function: _makeLong],
           dirname: [Function: dirname],
           basename: [Function: basename],
           extname: [Function: extname],
           format: [Function: format],
           parse: [Function: parse],
           sep: '\\',
           delimiter: ';',
           win32: [Circular],
           posix: [Circular] },
        posix: [Circular] },
     fs: 
      { constants: 
         { O_RDONLY: 0,
           O_WRONLY: 1,
           O_RDWR: 2,
           S_IFMT: 61440,
           S_IFREG: 32768,
           S_IFDIR: 16384,
           S_IFCHR: 8192,
           S_IFBLK: 24576,
           S_IFIFO: 4096,
           S_IFLNK: 40960,
           S_IFSOCK: 49152,
           O_CREAT: 512,
           O_EXCL: 2048,
           O_NOCTTY: 131072,
           O_TRUNC: 1024,
           O_APPEND: 8,
           O_DIRECTORY: 1048576,
           O_NOFOLLOW: 256,
           O_SYNC: 128,
           O_DSYNC: 4194304,
           O_SYMLINK: 2097152,
           O_NONBLOCK: 4,
           S_IRWXU: 448,
           S_IRUSR: 256,
           S_IWUSR: 128,
           S_IXUSR: 64,
           S_IRWXG: 56,
           S_IRGRP: 32,
           S_IWGRP: 16,
           S_IXGRP: 8,
           S_IRWXO: 7,
           S_IROTH: 4,
           S_IWOTH: 2,
           S_IXOTH: 1,
           F_OK: 0,
           R_OK: 4,
           W_OK: 2,
           X_OK: 1,
           UV_FS_COPYFILE_EXCL: 1,
           COPYFILE_EXCL: 1 },
        Stats: [Function: Stats],
        F_OK: 0,
        R_OK: 4,
        W_OK: 2,
        X_OK: 1,
        access: [Function],
        accessSync: [Function],
        exists: [Function],
        existsSync: [Function],
        readFile: [Function],
        readFileSync: [Function],
        close: [Function],
        closeSync: [Function],
        open: [Function],
        openSync: [Function],
        read: [Function],
        readSync: [Function],
        write: [Function],
        writeSync: [Function],
        rename: [Function],
        renameSync: [Function],
        truncate: [Function],
        truncateSync: [Function],
        ftruncate: [Function],
        ftruncateSync: [Function],
        rmdir: [Function],
        rmdirSync: [Function],
        fdatasync: [Function],
        fdatasyncSync: [Function],
        fsync: [Function],
        fsyncSync: [Function],
        mkdir: [Function],
        mkdirSync: [Function],
        readdir: [Function],
        readdirSync: [Function],
        fstat: [Function],
        lstat: [Function],
        stat: [Function],
        fstatSync: [Function],
        lstatSync: [Function],
        statSync: [Function],
        readlink: [Function],
        readlinkSync: [Function],
        symlink: [Function],
        symlinkSync: [Function],
        link: [Function],
        linkSync: [Function],
        unlink: [Function],
        unlinkSync: [Function],
        fchmod: [Function],
        fchmodSync: [Function],
        lchmod: [Function],
        lchmodSync: [Function],
        chmod: [Function],
        chmodSync: [Function],
        lchown: [Function],
        lchownSync: [Function],
        fchown: [Function],
        fchownSync: [Function],
        chown: [Function],
        chownSync: [Function],
        _toUnixTimestamp: [Function: toUnixTimestamp],
        utimes: [Function],
        utimesSync: [Function],
        futimes: [Function],
        futimesSync: [Function],
        writeFile: [Function],
        writeFileSync: [Function],
        appendFile: [Function],
        appendFileSync: [Function],
        watch: [Function],
        watchFile: [Function],
        unwatchFile: [Function],
        realpathSync: [Function: realpathSync],
        realpath: [Function: realpath],
        mkdtemp: [Function],
        mkdtempSync: [Function],
        copyFile: [Function],
        copyFileSync: [Function],
        createReadStream: [Function],
        ReadStream: 
         { [Function: ReadStream]
           super_: 
            { [Function: Readable]
              ReadableState: [Function: ReadableState],
              super_: 
               { [Function: Stream]
                 super_: 
                  { [Function: EventEmitter]
                    EventEmitter: [Circular],
                    usingDomains: false,
                    defaultMaxListeners: [Getter/Setter],
                    init: [Function],
                    listenerCount: [Function] },
                 Readable: [Circular],
                 Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                 Duplex: { [Function: Duplex] super_: [Circular] },
                 Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                 PassThrough: 
                  { [Function: PassThrough]
                    super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
              _fromList: [Function: fromList] } },
        FileReadStream: 
         { [Function: ReadStream]
           super_: 
            { [Function: Readable]
              ReadableState: [Function: ReadableState],
              super_: 
               { [Function: Stream]
                 super_: 
                  { [Function: EventEmitter]
                    EventEmitter: [Circular],
                    usingDomains: false,
                    defaultMaxListeners: [Getter/Setter],
                    init: [Function],
                    listenerCount: [Function] },
                 Readable: [Circular],
                 Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                 Duplex: { [Function: Duplex] super_: [Circular] },
                 Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                 PassThrough: 
                  { [Function: PassThrough]
                    super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
              _fromList: [Function: fromList] } },
        createWriteStream: [Function],
        WriteStream: 
         { [Function: WriteStream]
           super_: 
            { [Function: Writable]
              WritableState: [Function: WritableState],
              super_: 
               { [Function: Stream]
                 super_: 
                  { [Function: EventEmitter]
                    EventEmitter: [Circular],
                    usingDomains: false,
                    defaultMaxListeners: [Getter/Setter],
                    init: [Function],
                    listenerCount: [Function] },
                 Readable: 
                  { [Function: Readable]
                    ReadableState: [Function: ReadableState],
                    super_: [Circular],
                    _fromList: [Function: fromList] },
                 Writable: [Circular],
                 Duplex: 
                  { [Function: Duplex]
                    super_: 
                     { [Function: Readable]
                       ReadableState: [Function: ReadableState],
                       super_: [Circular],
                       _fromList: [Function: fromList] } },
                 Transform: 
                  { [Function: Transform]
                    super_: 
                     { [Function: Duplex]
                       super_: 
                        { [Function: Readable]
                          ReadableState: [Function: ReadableState],
                          super_: [Circular],
                          _fromList: [Function: fromList] } } },
                 PassThrough: 
                  { [Function: PassThrough]
                    super_: 
                     { [Function: Transform]
                       super_: 
                        { [Function: Duplex]
                          super_: 
                           { [Function: Readable]
                             ReadableState: [Function: ReadableState],
                             super_: [Circular],
                             _fromList: [Function: fromList] } } } },
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
        FileWriteStream: 
         { [Function: WriteStream]
           super_: 
            { [Function: Writable]
              WritableState: [Function: WritableState],
              super_: 
               { [Function: Stream]
                 super_: 
                  { [Function: EventEmitter]
                    EventEmitter: [Circular],
                    usingDomains: false,
                    defaultMaxListeners: [Getter/Setter],
                    init: [Function],
                    listenerCount: [Function] },
                 Readable: 
                  { [Function: Readable]
                    ReadableState: [Function: ReadableState],
                    super_: [Circular],
                    _fromList: [Function: fromList] },
                 Writable: [Circular],
                 Duplex: 
                  { [Function: Duplex]
                    super_: 
                     { [Function: Readable]
                       ReadableState: [Function: ReadableState],
                       super_: [Circular],
                       _fromList: [Function: fromList] } },
                 Transform: 
                  { [Function: Transform]
                    super_: 
                     { [Function: Duplex]
                       super_: 
                        { [Function: Readable]
                          ReadableState: [Function: ReadableState],
                          super_: [Circular],
                          _fromList: [Function: fromList] } } },
                 PassThrough: 
                  { [Function: PassThrough]
                    super_: 
                     { [Function: Transform]
                       super_: 
                        { [Function: Duplex]
                          super_: 
                           { [Function: Readable]
                             ReadableState: [Function: ReadableState],
                             super_: [Circular],
                             _fromList: [Function: fromList] } } } },
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.3',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: { [Function] addYieldHandler: [Function] },
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        noConflict: [Function: noConflict] },
     camelcase: [Function],
     annotation: undefined,
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'PropertiesParser', context: {} } },
  AnnotationParser: 
   [ AfterAnnotationParser: AfterAnnotationParser {
       annotation: [Function: After],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     AspectAnnotationParser: AspectParser {
       annotation: [Function: Aspect],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     AutowireAnnotationParser: { [Function: AutowrieAnnotationParser]
       QualifierAnnotation: [Function: Qualifier],
       annotation: [Function: Autowire],
       camelcase: [Function],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     BeanAnnotationParser: BeanParser {
       annotation: [Function: Bean],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     BeforeAnnotationParser: BeforeAnnotationParser {
       annotation: [Function: Before],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ComponentAnnotationParser: ComponentParser {
       annotation: [Function: Component],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ConfigurationAnnotationParser: ConfigurationParser {
       annotation: [Function: Configuration],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ContextAnnotationParser: ContextParser {
       annotation: [Function: Context],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ControllerAnnotationParser: ControllerParser {
       annotation: [Function: Controller],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     InheritsAnnotationParser: InheritsAnnotationParser {
       globals: [],
       annotation: [Function: Inherits],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     InitAnnotationParser: InitParser {
       annotation: [Function: Init],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     NamespaceAnnotationParser: NamespaceParser {
       annotation: [Function: Namespace],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ParamAnnotationParser: { [Function: paramParser]
       annotation: [Function: param],
       doctrine: 
        { version: '3.0.0',
          parse: [Function: parse],
          parseType: [Function: parseType],
          parseParamType: [Function: parseParamType],
          unwrapComment: [Function: unwrapComment],
          Syntax: 
           { NullableLiteral: 'NullableLiteral',
             AllLiteral: 'AllLiteral',
             NullLiteral: 'NullLiteral',
             UndefinedLiteral: 'UndefinedLiteral',
             VoidLiteral: 'VoidLiteral',
             UnionType: 'UnionType',
             ArrayType: 'ArrayType',
             RecordType: 'RecordType',
             FieldType: 'FieldType',
             FunctionType: 'FunctionType',
             ParameterType: 'ParameterType',
             RestType: 'RestType',
             NonNullableType: 'NonNullableType',
             OptionalType: 'OptionalType',
             NullableType: 'NullableType',
             NameExpression: 'NameExpression',
             TypeApplication: 'TypeApplication',
             StringLiteralType: 'StringLiteralType',
             NumericLiteralType: 'NumericLiteralType',
             BooleanLiteralType: 'BooleanLiteralType' },
          Error: [Function: DoctrineError],
          type: 
           { Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             stringify: [Function: stringify] } },
       expressionParser: undefined,
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     PointCuteAnnotationParser: PointCutParser {
       wildcard: [Function],
       md5: [Function],
       annotation: [Function: PointCut],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     PropertiesAnnotationParser: PropertiesParser {
       processors: 
        { '.properties': 
           { [Function: XMLPropertiesProcessor]
             Promise: 
              { [Function: Promise]
                TypeError: [Function: TypeError],
                RangeError: [Function: RangeError],
                CancellationError: [Function: SubError],
                TimeoutError: [Function: SubError],
                OperationalError: [Function: OperationalError],
                RejectionError: [Function: OperationalError],
                AggregateError: [Function: SubError],
                _peekContext: [Function],
                onPossiblyUnhandledRejection: [Function],
                onUnhandledRejectionHandled: [Function],
                longStackTraces: [Function],
                hasLongStackTraces: [Function],
                config: [Function],
                getNewLibraryCopy: [Function],
                is: [Function],
                fromCallback: [Function],
                fromNode: [Function],
                all: [Function],
                cast: [Function],
                fulfilled: [Function],
                resolve: [Function],
                rejected: [Function],
                reject: [Function],
                setScheduler: [Function],
                pending: [Function],
                defer: [Function],
                method: [Function],
                try: [Function],
                attempt: [Function],
                bind: [Function],
                PromiseInspection: [Function: PromiseInspection],
                join: [Function],
                Promise: [Circular],
                version: '3.5.3',
                map: [Function],
                using: [Function],
                delay: [Function],
                coroutine: { [Function] addYieldHandler: [Function] },
                spawn: [Function],
                promisify: [Function],
                promisifyAll: [Function],
                props: [Function],
                race: [Function],
                reduce: [Function],
                settle: [Function],
                some: [Function],
                _SomePromiseArray: [Function: SomePromiseArray],
                filter: [Function],
                each: [Function],
                mapSeries: [Function: PromiseMapSeries],
                any: [Function],
                noConflict: [Function: noConflict] },
             propertiesReader: 
              { parse: [Function],
                stringify: [Function],
                createStringifier: [Function: createStringifier] } },
          '.json': 
           { [Function: JsonPropertiesProcessor]
             Promise: 
              { [Function: Promise]
                TypeError: [Function: TypeError],
                RangeError: [Function: RangeError],
                CancellationError: [Function: SubError],
                TimeoutError: [Function: SubError],
                OperationalError: [Function: OperationalError],
                RejectionError: [Function: OperationalError],
                AggregateError: [Function: SubError],
                _peekContext: [Function],
                onPossiblyUnhandledRejection: [Function],
                onUnhandledRejectionHandled: [Function],
                longStackTraces: [Function],
                hasLongStackTraces: [Function],
                config: [Function],
                getNewLibraryCopy: [Function],
                is: [Function],
                fromCallback: [Function],
                fromNode: [Function],
                all: [Function],
                cast: [Function],
                fulfilled: [Function],
                resolve: [Function],
                rejected: [Function],
                reject: [Function],
                setScheduler: [Function],
                pending: [Function],
                defer: [Function],
                method: [Function],
                try: [Function],
                attempt: [Function],
                bind: [Function],
                PromiseInspection: [Function: PromiseInspection],
                join: [Function],
                Promise: [Circular],
                version: '3.5.3',
                map: [Function],
                using: [Function],
                delay: [Function],
                coroutine: { [Function] addYieldHandler: [Function] },
                spawn: [Function],
                promisify: [Function],
                promisifyAll: [Function],
                props: [Function],
                race: [Function],
                reduce: [Function],
                settle: [Function],
                some: [Function],
                _SomePromiseArray: [Function: SomePromiseArray],
                filter: [Function],
                each: [Function],
                mapSeries: [Function: PromiseMapSeries],
                any: [Function],
                noConflict: [Function: noConflict] } },
          '.xml': 
           { [Function: XMLPropertiesProcessor]
             Promise: 
              { [Function: Promise]
                TypeError: [Function: TypeError],
                RangeError: [Function: RangeError],
                CancellationError: [Function: SubError],
                TimeoutError: [Function: SubError],
                OperationalError: [Function: OperationalError],
                RejectionError: [Function: OperationalError],
                AggregateError: [Function: SubError],
                _peekContext: [Function],
                onPossiblyUnhandledRejection: [Function],
                onUnhandledRejectionHandled: [Function],
                longStackTraces: [Function],
                hasLongStackTraces: [Function],
                config: [Function],
                getNewLibraryCopy: [Function],
                is: [Function],
                fromCallback: [Function],
                fromNode: [Function],
                all: [Function],
                cast: [Function],
                fulfilled: [Function],
                resolve: [Function],
                rejected: [Function],
                reject: [Function],
                setScheduler: [Function],
                pending: [Function],
                defer: [Function],
                method: [Function],
                try: [Function],
                attempt: [Function],
                bind: [Function],
                PromiseInspection: [Function: PromiseInspection],
                join: [Function],
                Promise: [Circular],
                version: '3.5.3',
                map: [Function],
                using: [Function],
                delay: [Function],
                coroutine: { [Function] addYieldHandler: [Function] },
                spawn: [Function],
                promisify: [Function],
                promisifyAll: [Function],
                props: [Function],
                race: [Function],
                reduce: [Function],
                settle: [Function],
                some: [Function],
                _SomePromiseArray: [Function: SomePromiseArray],
                filter: [Function],
                each: [Function],
                mapSeries: [Function: PromiseMapSeries],
                any: [Function],
                noConflict: [Function: noConflict] } } },
       glob: 
        { [Function: glob]
          sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
          GlobSync: [Function: GlobSync],
          glob: [Circular],
          hasMagic: [Function],
          Glob: 
           { [Function: Glob]
             super_: 
              { [Function: EventEmitter]
                EventEmitter: [Circular],
                usingDomains: false,
                defaultMaxListeners: [Getter/Setter],
                init: [Function],
                listenerCount: [Function] } } },
       path: 
        { resolve: [Function: resolve],
          normalize: [Function: normalize],
          isAbsolute: [Function: isAbsolute],
          join: [Function: join],
          relative: [Function: relative],
          _makeLong: [Function: _makeLong],
          dirname: [Function: dirname],
          basename: [Function: basename],
          extname: [Function: extname],
          format: [Function: format],
          parse: [Function: parse],
          sep: '/',
          delimiter: ':',
          win32: 
           { resolve: [Function: resolve],
             normalize: [Function: normalize],
             isAbsolute: [Function: isAbsolute],
             join: [Function: join],
             relative: [Function: relative],
             _makeLong: [Function: _makeLong],
             dirname: [Function: dirname],
             basename: [Function: basename],
             extname: [Function: extname],
             format: [Function: format],
             parse: [Function: parse],
             sep: '\\',
             delimiter: ';',
             win32: [Circular],
             posix: [Circular] },
          posix: [Circular] },
       fs: 
        { constants: 
           { O_RDONLY: 0,
             O_WRONLY: 1,
             O_RDWR: 2,
             S_IFMT: 61440,
             S_IFREG: 32768,
             S_IFDIR: 16384,
             S_IFCHR: 8192,
             S_IFBLK: 24576,
             S_IFIFO: 4096,
             S_IFLNK: 40960,
             S_IFSOCK: 49152,
             O_CREAT: 512,
             O_EXCL: 2048,
             O_NOCTTY: 131072,
             O_TRUNC: 1024,
             O_APPEND: 8,
             O_DIRECTORY: 1048576,
             O_NOFOLLOW: 256,
             O_SYNC: 128,
             O_DSYNC: 4194304,
             O_SYMLINK: 2097152,
             O_NONBLOCK: 4,
             S_IRWXU: 448,
             S_IRUSR: 256,
             S_IWUSR: 128,
             S_IXUSR: 64,
             S_IRWXG: 56,
             S_IRGRP: 32,
             S_IWGRP: 16,
             S_IXGRP: 8,
             S_IRWXO: 7,
             S_IROTH: 4,
             S_IWOTH: 2,
             S_IXOTH: 1,
             F_OK: 0,
             R_OK: 4,
             W_OK: 2,
             X_OK: 1,
             UV_FS_COPYFILE_EXCL: 1,
             COPYFILE_EXCL: 1 },
          Stats: [Function: Stats],
          F_OK: 0,
          R_OK: 4,
          W_OK: 2,
          X_OK: 1,
          access: [Function],
          accessSync: [Function],
          exists: [Function],
          existsSync: [Function],
          readFile: [Function],
          readFileSync: [Function],
          close: [Function],
          closeSync: [Function],
          open: [Function],
          openSync: [Function],
          read: [Function],
          readSync: [Function],
          write: [Function],
          writeSync: [Function],
          rename: [Function],
          renameSync: [Function],
          truncate: [Function],
          truncateSync: [Function],
          ftruncate: [Function],
          ftruncateSync: [Function],
          rmdir: [Function],
          rmdirSync: [Function],
          fdatasync: [Function],
          fdatasyncSync: [Function],
          fsync: [Function],
          fsyncSync: [Function],
          mkdir: [Function],
          mkdirSync: [Function],
          readdir: [Function],
          readdirSync: [Function],
          fstat: [Function],
          lstat: [Function],
          stat: [Function],
          fstatSync: [Function],
          lstatSync: [Function],
          statSync: [Function],
          readlink: [Function],
          readlinkSync: [Function],
          symlink: [Function],
          symlinkSync: [Function],
          link: [Function],
          linkSync: [Function],
          unlink: [Function],
          unlinkSync: [Function],
          fchmod: [Function],
          fchmodSync: [Function],
          lchmod: [Function],
          lchmodSync: [Function],
          chmod: [Function],
          chmodSync: [Function],
          lchown: [Function],
          lchownSync: [Function],
          fchown: [Function],
          fchownSync: [Function],
          chown: [Function],
          chownSync: [Function],
          _toUnixTimestamp: [Function: toUnixTimestamp],
          utimes: [Function],
          utimesSync: [Function],
          futimes: [Function],
          futimesSync: [Function],
          writeFile: [Function],
          writeFileSync: [Function],
          appendFile: [Function],
          appendFileSync: [Function],
          watch: [Function],
          watchFile: [Function],
          unwatchFile: [Function],
          realpathSync: [Function: realpathSync],
          realpath: [Function: realpath],
          mkdtemp: [Function],
          mkdtempSync: [Function],
          copyFile: [Function],
          copyFileSync: [Function],
          createReadStream: [Function],
          ReadStream: 
           { [Function: ReadStream]
             super_: 
              { [Function: Readable]
                ReadableState: [Function: ReadableState],
                super_: 
                 { [Function: Stream]
                   super_: 
                    { [Function: EventEmitter]
                      EventEmitter: [Circular],
                      usingDomains: false,
                      defaultMaxListeners: [Getter/Setter],
                      init: [Function],
                      listenerCount: [Function] },
                   Readable: [Circular],
                   Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                   Duplex: { [Function: Duplex] super_: [Circular] },
                   Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                   PassThrough: 
                    { [Function: PassThrough]
                      super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                   Stream: [Circular],
                   _isUint8Array: [Function: isUint8Array],
                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                _fromList: [Function: fromList] } },
          FileReadStream: 
           { [Function: ReadStream]
             super_: 
              { [Function: Readable]
                ReadableState: [Function: ReadableState],
                super_: 
                 { [Function: Stream]
                   super_: 
                    { [Function: EventEmitter]
                      EventEmitter: [Circular],
                      usingDomains: false,
                      defaultMaxListeners: [Getter/Setter],
                      init: [Function],
                      listenerCount: [Function] },
                   Readable: [Circular],
                   Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                   Duplex: { [Function: Duplex] super_: [Circular] },
                   Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                   PassThrough: 
                    { [Function: PassThrough]
                      super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                   Stream: [Circular],
                   _isUint8Array: [Function: isUint8Array],
                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                _fromList: [Function: fromList] } },
          createWriteStream: [Function],
          WriteStream: 
           { [Function: WriteStream]
             super_: 
              { [Function: Writable]
                WritableState: [Function: WritableState],
                super_: 
                 { [Function: Stream]
                   super_: 
                    { [Function: EventEmitter]
                      EventEmitter: [Circular],
                      usingDomains: false,
                      defaultMaxListeners: [Getter/Setter],
                      init: [Function],
                      listenerCount: [Function] },
                   Readable: 
                    { [Function: Readable]
                      ReadableState: [Function: ReadableState],
                      super_: [Circular],
                      _fromList: [Function: fromList] },
                   Writable: [Circular],
                   Duplex: 
                    { [Function: Duplex]
                      super_: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] } },
                   Transform: 
                    { [Function: Transform]
                      super_: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } } },
                   PassThrough: 
                    { [Function: PassThrough]
                      super_: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } } },
                   Stream: [Circular],
                   _isUint8Array: [Function: isUint8Array],
                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
          FileWriteStream: 
           { [Function: WriteStream]
             super_: 
              { [Function: Writable]
                WritableState: [Function: WritableState],
                super_: 
                 { [Function: Stream]
                   super_: 
                    { [Function: EventEmitter]
                      EventEmitter: [Circular],
                      usingDomains: false,
                      defaultMaxListeners: [Getter/Setter],
                      init: [Function],
                      listenerCount: [Function] },
                   Readable: 
                    { [Function: Readable]
                      ReadableState: [Function: ReadableState],
                      super_: [Circular],
                      _fromList: [Function: fromList] },
                   Writable: [Circular],
                   Duplex: 
                    { [Function: Duplex]
                      super_: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] } },
                   Transform: 
                    { [Function: Transform]
                      super_: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } } },
                   PassThrough: 
                    { [Function: PassThrough]
                      super_: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } } },
                   Stream: [Circular],
                   _isUint8Array: [Function: isUint8Array],
                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
       Promise: 
        { [Function: Promise]
          TypeError: [Function: TypeError],
          RangeError: [Function: RangeError],
          CancellationError: [Function: SubError],
          TimeoutError: [Function: SubError],
          OperationalError: [Function: OperationalError],
          RejectionError: [Function: OperationalError],
          AggregateError: [Function: SubError],
          _peekContext: [Function],
          onPossiblyUnhandledRejection: [Function],
          onUnhandledRejectionHandled: [Function],
          longStackTraces: [Function],
          hasLongStackTraces: [Function],
          config: [Function],
          getNewLibraryCopy: [Function],
          is: [Function],
          fromCallback: [Function],
          fromNode: [Function],
          all: [Function],
          cast: [Function],
          fulfilled: [Function],
          resolve: [Function],
          rejected: [Function],
          reject: [Function],
          setScheduler: [Function],
          pending: [Function],
          defer: [Function],
          method: [Function],
          try: [Function],
          attempt: [Function],
          bind: [Function],
          PromiseInspection: [Function: PromiseInspection],
          join: [Function],
          Promise: [Circular],
          version: '3.5.3',
          map: [Function],
          using: [Function],
          delay: [Function],
          coroutine: { [Function] addYieldHandler: [Function] },
          spawn: [Function],
          promisify: [Function],
          promisifyAll: [Function],
          props: [Function],
          race: [Function],
          reduce: [Function],
          settle: [Function],
          some: [Function],
          _SomePromiseArray: [Function: SomePromiseArray],
          filter: [Function],
          each: [Function],
          mapSeries: [Function: PromiseMapSeries],
          any: [Function],
          noConflict: [Function: noConflict] },
       camelcase: [Function],
       annotation: undefined,
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       logger: Logger { category: 'PropertiesParser', context: {} } },
     PrototypeAnnotationParser: Prototype {
       annotation: [Function: Prototype],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     QualifierAnnotationParser: QualifierParser {
       annotation: [Function: Qualifier],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     ResourceAnnotationParser: ResourceParser {
       annotation: [Function: Resource],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     ResourceParser: ResourceParser {
       annotation: [Function: Resource],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     RunAnnotationParser: RunParser {
       annotation: [Function: Run],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ServiceAnnotationParser: ServiceParser {
       annotation: [Function: Service],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     StoreAnnotationParser: { [Function: StoreParser]
       annotation: [Function: Store],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     TypeAnnotationParser: type {
       annotation: 
        { [Function: type]
          super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
       doctrine: 
        { version: '3.0.0',
          parse: [Function: parse],
          parseType: [Function: parseType],
          parseParamType: [Function: parseParamType],
          unwrapComment: [Function: unwrapComment],
          Syntax: 
           { NullableLiteral: 'NullableLiteral',
             AllLiteral: 'AllLiteral',
             NullLiteral: 'NullLiteral',
             UndefinedLiteral: 'UndefinedLiteral',
             VoidLiteral: 'VoidLiteral',
             UnionType: 'UnionType',
             ArrayType: 'ArrayType',
             RecordType: 'RecordType',
             FieldType: 'FieldType',
             FunctionType: 'FunctionType',
             ParameterType: 'ParameterType',
             RestType: 'RestType',
             NonNullableType: 'NonNullableType',
             OptionalType: 'OptionalType',
             NullableType: 'NullableType',
             NameExpression: 'NameExpression',
             TypeApplication: 'TypeApplication',
             StringLiteralType: 'StringLiteralType',
             NumericLiteralType: 'NumericLiteralType',
             BooleanLiteralType: 'BooleanLiteralType' },
          Error: [Function: DoctrineError],
          type: 
           { Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             stringify: [Function: stringify] } },
       expressionParser: undefined,
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } } ],
  DependencyBuilder: 
   DependencyBuilder {
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'DependencyBuilder', context: {} },
     glob: 
      { [Function: glob]
        sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
        GlobSync: [Function: GlobSync],
        glob: [Circular],
        hasMagic: [Function],
        Glob: 
         { [Function: Glob]
           super_: 
            { [Function: EventEmitter]
              EventEmitter: [Circular],
              usingDomains: false,
              defaultMaxListeners: [Getter/Setter],
              init: [Function],
              listenerCount: [Function] } } },
     _: 
      { [Function: lodash]
        templateSettings: 
         { escape: /<%-([\s\S]+?)%>/g,
           evaluate: /<%([\s\S]+?)%>/g,
           interpolate: /<%=([\s\S]+?)%>/g,
           variable: '',
           imports: { _: [Circular] } },
        after: [Function: after],
        ary: [Function: ary],
        assign: [Function],
        assignIn: [Function],
        assignInWith: [Function],
        assignWith: [Function],
        at: [Function],
        before: [Function: before],
        bind: { [Function] placeholder: [Circular] },
        bindAll: [Function],
        bindKey: { [Function] placeholder: [Circular] },
        castArray: [Function: castArray],
        chain: [Function: chain],
        chunk: [Function: chunk],
        compact: [Function: compact],
        concat: [Function: concat],
        cond: [Function: cond],
        conforms: [Function: conforms],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        curry: { [Function: curry] placeholder: [Circular] },
        curryRight: { [Function: curryRight] placeholder: [Circular] },
        debounce: [Function: debounce],
        defaults: [Function],
        defaultsDeep: [Function],
        defer: [Function],
        delay: [Function],
        difference: [Function],
        differenceBy: [Function],
        differenceWith: [Function],
        drop: [Function: drop],
        dropRight: [Function: dropRight],
        dropRightWhile: [Function: dropRightWhile],
        dropWhile: [Function: dropWhile],
        fill: [Function: fill],
        filter: [Function: filter],
        flatMap: [Function: flatMap],
        flatMapDeep: [Function: flatMapDeep],
        flatMapDepth: [Function: flatMapDepth],
        flatten: [Function: flatten],
        flattenDeep: [Function: flattenDeep],
        flattenDepth: [Function: flattenDepth],
        flip: [Function: flip],
        flow: [Function],
        flowRight: [Function],
        fromPairs: [Function: fromPairs],
        functions: [Function: functions],
        functionsIn: [Function: functionsIn],
        groupBy: [Function],
        initial: [Function: initial],
        intersection: [Function],
        intersectionBy: [Function],
        intersectionWith: [Function],
        invert: [Function],
        invertBy: [Function],
        invokeMap: [Function],
        iteratee: [Function: iteratee],
        keyBy: [Function],
        keys: [Function: keys],
        keysIn: [Function: keysIn],
        map: [Function: map],
        mapKeys: [Function: mapKeys],
        mapValues: [Function: mapValues],
        matches: [Function: matches],
        matchesProperty: [Function: matchesProperty],
        memoize: { [Function: memoize] Cache: [Function: MapCache] },
        merge: [Function],
        mergeWith: [Function],
        method: [Function],
        methodOf: [Function],
        mixin: [Function: mixin],
        negate: [Function: negate],
        nthArg: [Function: nthArg],
        omit: [Function],
        omitBy: [Function: omitBy],
        once: [Function: once],
        orderBy: [Function: orderBy],
        over: [Function],
        overArgs: [Function],
        overEvery: [Function],
        overSome: [Function],
        partial: { [Function] placeholder: [Circular] },
        partialRight: { [Function] placeholder: [Circular] },
        partition: [Function],
        pick: [Function],
        pickBy: [Function: pickBy],
        property: [Function: property],
        propertyOf: [Function: propertyOf],
        pull: [Function],
        pullAll: [Function: pullAll],
        pullAllBy: [Function: pullAllBy],
        pullAllWith: [Function: pullAllWith],
        pullAt: [Function],
        range: [Function],
        rangeRight: [Function],
        rearg: [Function],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        reverse: [Function: reverse],
        sampleSize: [Function: sampleSize],
        set: [Function: set],
        setWith: [Function: setWith],
        shuffle: [Function: shuffle],
        slice: [Function: slice],
        sortBy: [Function],
        sortedUniq: [Function: sortedUniq],
        sortedUniqBy: [Function: sortedUniqBy],
        split: [Function: split],
        spread: [Function: spread],
        tail: [Function: tail],
        take: [Function: take],
        takeRight: [Function: takeRight],
        takeRightWhile: [Function: takeRightWhile],
        takeWhile: [Function: takeWhile],
        tap: [Function: tap],
        throttle: [Function: throttle],
        thru: [Function: thru],
        toArray: [Function: toArray],
        toPairs: [Function],
        toPairsIn: [Function],
        toPath: [Function: toPath],
        toPlainObject: [Function: toPlainObject],
        transform: [Function: transform],
        unary: [Function: unary],
        union: [Function],
        unionBy: [Function],
        unionWith: [Function],
        uniq: [Function: uniq],
        uniqBy: [Function: uniqBy],
        uniqWith: [Function: uniqWith],
        unset: [Function: unset],
        unzip: [Function: unzip],
        unzipWith: [Function: unzipWith],
        update: [Function: update],
        updateWith: [Function: updateWith],
        values: [Function: values],
        valuesIn: [Function: valuesIn],
        without: [Function],
        words: [Function: words],
        wrap: [Function: wrap],
        xor: [Function],
        xorBy: [Function],
        xorWith: [Function],
        zip: [Function],
        zipObject: [Function: zipObject],
        zipObjectDeep: [Function: zipObjectDeep],
        zipWith: [Function],
        entries: [Function],
        entriesIn: [Function],
        extend: [Function],
        extendWith: [Function],
        add: [Function],
        attempt: [Function],
        camelCase: [Function],
        capitalize: [Function: capitalize],
        ceil: [Function],
        clamp: [Function: clamp],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        cloneDeepWith: [Function: cloneDeepWith],
        cloneWith: [Function: cloneWith],
        conformsTo: [Function: conformsTo],
        deburr: [Function: deburr],
        defaultTo: [Function: defaultTo],
        divide: [Function],
        endsWith: [Function: endsWith],
        eq: [Function: eq],
        escape: [Function: escape],
        escapeRegExp: [Function: escapeRegExp],
        every: [Function: every],
        find: [Function],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        floor: [Function],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function: forIn],
        forInRight: [Function: forInRight],
        forOwn: [Function: forOwn],
        forOwnRight: [Function: forOwnRight],
        get: [Function: get],
        gt: [Function],
        gte: [Function],
        has: [Function: has],
        hasIn: [Function: hasIn],
        head: [Function: head],
        identity: [Function: identity],
        includes: [Function: includes],
        indexOf: [Function: indexOf],
        inRange: [Function: inRange],
        invoke: [Function],
        isArguments: [Function: baseIsArguments],
        isArray: [Function: isArray],
        isArrayBuffer: [Function],
        isArrayLike: [Function: isArrayLike],
        isArrayLikeObject: [Function: isArrayLikeObject],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isDate: [Function],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isEqualWith: [Function: isEqualWith],
        isError: [Function: isError],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isInteger: [Function: isInteger],
        isLength: [Function: isLength],
        isMap: [Function],
        isMatch: [Function: isMatch],
        isMatchWith: [Function: isMatchWith],
        isNaN: [Function: isNaN],
        isNative: [Function: isNative],
        isNil: [Function: isNil],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isObjectLike: [Function: isObjectLike],
        isPlainObject: [Function: isPlainObject],
        isRegExp: [Function],
        isSafeInteger: [Function: isSafeInteger],
        isSet: [Function],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isTypedArray: [Function],
        isUndefined: [Function: isUndefined],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        join: [Function: join],
        kebabCase: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lowerCase: [Function],
        lowerFirst: [Function],
        lt: [Function],
        lte: [Function],
        max: [Function: max],
        maxBy: [Function: maxBy],
        mean: [Function: mean],
        meanBy: [Function: meanBy],
        min: [Function: min],
        minBy: [Function: minBy],
        stubArray: [Function: stubArray],
        stubFalse: [Function: stubFalse],
        stubObject: [Function: stubObject],
        stubString: [Function: stubString],
        stubTrue: [Function: stubTrue],
        multiply: [Function],
        nth: [Function: nth],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function],
        pad: [Function: pad],
        padEnd: [Function: padEnd],
        padStart: [Function: padStart],
        parseInt: [Function: parseInt],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        repeat: [Function: repeat],
        replace: [Function: replace],
        result: [Function: result],
        round: [Function],
        runInContext: [Function: runInContext],
        sample: [Function: sample],
        size: [Function: size],
        snakeCase: [Function],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        sortedIndexBy: [Function: sortedIndexBy],
        sortedIndexOf: [Function: sortedIndexOf],
        sortedLastIndex: [Function: sortedLastIndex],
        sortedLastIndexBy: [Function: sortedLastIndexBy],
        sortedLastIndexOf: [Function: sortedLastIndexOf],
        startCase: [Function],
        startsWith: [Function: startsWith],
        subtract: [Function],
        sum: [Function: sum],
        sumBy: [Function: sumBy],
        template: [Function: template],
        times: [Function: times],
        toFinite: [Function: toFinite],
        toInteger: [Function: toInteger],
        toLength: [Function: toLength],
        toLower: [Function: toLower],
        toNumber: [Function: toNumber],
        toSafeInteger: [Function: toSafeInteger],
        toString: [Function: toString],
        toUpper: [Function: toUpper],
        trim: [Function: trim],
        trimEnd: [Function: trimEnd],
        trimStart: [Function: trimStart],
        truncate: [Function: truncate],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        upperCase: [Function],
        upperFirst: [Function],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        first: [Function: head],
        VERSION: '4.17.11',
        _: [Circular] },
     toposort: [Function: Toposort],
     util: 
      { _errnoException: [Function: _errnoException],
        _exceptionWithHostPort: [Function: _exceptionWithHostPort],
        _extend: [Function: _extend],
        callbackify: [Function: callbackify],
        debuglog: [Function: debuglog],
        deprecate: [Function: deprecate],
        format: [Function: format],
        inherits: [Function: inherits],
        inspect: 
         { [Function: inspect]
           custom: Symbol(util.inspect.custom),
           colors: 
            { bold: [ 1, 22 ],
              italic: [ 3, 23 ],
              underline: [ 4, 24 ],
              inverse: [ 7, 27 ],
              white: [ 37, 39 ],
              grey: [ 90, 39 ],
              black: [ 30, 39 ],
              blue: [ 34, 39 ],
              cyan: [ 36, 39 ],
              green: [ 32, 39 ],
              magenta: [ 35, 39 ],
              red: [ 31, 39 ],
              yellow: [ 33, 39 ] },
           styles: 
            { special: 'cyan',
              number: 'yellow',
              boolean: 'yellow',
              undefined: 'grey',
              null: 'bold',
              string: 'green',
              symbol: 'green',
              date: 'magenta',
              regexp: 'red' } },
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isNull: [Function: isNull],
        isNullOrUndefined: [Function: isNullOrUndefined],
        isNumber: [Function: isNumber],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isUndefined: [Function: isUndefined],
        isRegExp: [Function: isRegExp],
        isObject: [Function: isObject],
        isDate: [Function: isDate],
        isError: [Function: isError],
        isFunction: [Function: isFunction],
        isPrimitive: [Function: isPrimitive],
        log: [Function: log],
        promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
        TextDecoder: [Function: TextDecoder],
        TextEncoder: [Function: TextEncoder],
        debug: [Function: deprecated],
        error: [Function: deprecated],
        print: [Function: deprecated],
        puts: [Function: deprecated] },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: 
         { resolve: [Function: resolve],
           normalize: [Function: normalize],
           isAbsolute: [Function: isAbsolute],
           join: [Function: join],
           relative: [Function: relative],
           _makeLong: [Function: _makeLong],
           dirname: [Function: dirname],
           basename: [Function: basename],
           extname: [Function: extname],
           format: [Function: format],
           parse: [Function: parse],
           sep: '\\',
           delimiter: ';',
           win32: [Circular],
           posix: [Circular] },
        posix: [Circular] } },
  StructureParser: 
   StructureParser {
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'StructureParser', context: {} },
     annotationParser: 
      [ AfterAnnotationParser: AfterAnnotationParser {
          annotation: [Function: After],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        AspectAnnotationParser: AspectParser {
          annotation: [Function: Aspect],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        AutowireAnnotationParser: { [Function: AutowrieAnnotationParser]
          QualifierAnnotation: [Function: Qualifier],
          annotation: [Function: Autowire],
          camelcase: [Function],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        BeanAnnotationParser: BeanParser {
          annotation: [Function: Bean],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        BeforeAnnotationParser: BeforeAnnotationParser {
          annotation: [Function: Before],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ComponentAnnotationParser: ComponentParser {
          annotation: [Function: Component],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ConfigurationAnnotationParser: ConfigurationParser {
          annotation: [Function: Configuration],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ContextAnnotationParser: ContextParser {
          annotation: [Function: Context],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ControllerAnnotationParser: ControllerParser {
          annotation: [Function: Controller],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        InheritsAnnotationParser: InheritsAnnotationParser {
          globals: [],
          annotation: [Function: Inherits],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        InitAnnotationParser: InitParser {
          annotation: [Function: Init],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        NamespaceAnnotationParser: NamespaceParser {
          annotation: [Function: Namespace],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ParamAnnotationParser: { [Function: paramParser]
          annotation: [Function: param],
          doctrine: 
           { version: '3.0.0',
             parse: [Function: parse],
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             unwrapComment: [Function: unwrapComment],
             Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             Error: [Function: DoctrineError],
             type: 
              { Syntax: 
                 { NullableLiteral: 'NullableLiteral',
                   AllLiteral: 'AllLiteral',
                   NullLiteral: 'NullLiteral',
                   UndefinedLiteral: 'UndefinedLiteral',
                   VoidLiteral: 'VoidLiteral',
                   UnionType: 'UnionType',
                   ArrayType: 'ArrayType',
                   RecordType: 'RecordType',
                   FieldType: 'FieldType',
                   FunctionType: 'FunctionType',
                   ParameterType: 'ParameterType',
                   RestType: 'RestType',
                   NonNullableType: 'NonNullableType',
                   OptionalType: 'OptionalType',
                   NullableType: 'NullableType',
                   NameExpression: 'NameExpression',
                   TypeApplication: 'TypeApplication',
                   StringLiteralType: 'StringLiteralType',
                   NumericLiteralType: 'NumericLiteralType',
                   BooleanLiteralType: 'BooleanLiteralType' },
                parseType: [Function: parseType],
                parseParamType: [Function: parseParamType],
                stringify: [Function: stringify] } },
          expressionParser: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        PointCuteAnnotationParser: PointCutParser {
          wildcard: [Function],
          md5: [Function],
          annotation: [Function: PointCut],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        PropertiesAnnotationParser: PropertiesParser {
          processors: 
           { '.properties': 
              { [Function: XMLPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] },
                propertiesReader: 
                 { parse: [Function],
                   stringify: [Function],
                   createStringifier: [Function: createStringifier] } },
             '.json': 
              { [Function: JsonPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] } },
             '.xml': 
              { [Function: XMLPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] } } },
          glob: 
           { [Function: glob]
             sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
             GlobSync: [Function: GlobSync],
             glob: [Circular],
             hasMagic: [Function],
             Glob: 
              { [Function: Glob]
                super_: 
                 { [Function: EventEmitter]
                   EventEmitter: [Circular],
                   usingDomains: false,
                   defaultMaxListeners: [Getter/Setter],
                   init: [Function],
                   listenerCount: [Function] } } },
          path: 
           { resolve: [Function: resolve],
             normalize: [Function: normalize],
             isAbsolute: [Function: isAbsolute],
             join: [Function: join],
             relative: [Function: relative],
             _makeLong: [Function: _makeLong],
             dirname: [Function: dirname],
             basename: [Function: basename],
             extname: [Function: extname],
             format: [Function: format],
             parse: [Function: parse],
             sep: '/',
             delimiter: ':',
             win32: 
              { resolve: [Function: resolve],
                normalize: [Function: normalize],
                isAbsolute: [Function: isAbsolute],
                join: [Function: join],
                relative: [Function: relative],
                _makeLong: [Function: _makeLong],
                dirname: [Function: dirname],
                basename: [Function: basename],
                extname: [Function: extname],
                format: [Function: format],
                parse: [Function: parse],
                sep: '\\',
                delimiter: ';',
                win32: [Circular],
                posix: [Circular] },
             posix: [Circular] },
          fs: 
           { constants: 
              { O_RDONLY: 0,
                O_WRONLY: 1,
                O_RDWR: 2,
                S_IFMT: 61440,
                S_IFREG: 32768,
                S_IFDIR: 16384,
                S_IFCHR: 8192,
                S_IFBLK: 24576,
                S_IFIFO: 4096,
                S_IFLNK: 40960,
                S_IFSOCK: 49152,
                O_CREAT: 512,
                O_EXCL: 2048,
                O_NOCTTY: 131072,
                O_TRUNC: 1024,
                O_APPEND: 8,
                O_DIRECTORY: 1048576,
                O_NOFOLLOW: 256,
                O_SYNC: 128,
                O_DSYNC: 4194304,
                O_SYMLINK: 2097152,
                O_NONBLOCK: 4,
                S_IRWXU: 448,
                S_IRUSR: 256,
                S_IWUSR: 128,
                S_IXUSR: 64,
                S_IRWXG: 56,
                S_IRGRP: 32,
                S_IWGRP: 16,
                S_IXGRP: 8,
                S_IRWXO: 7,
                S_IROTH: 4,
                S_IWOTH: 2,
                S_IXOTH: 1,
                F_OK: 0,
                R_OK: 4,
                W_OK: 2,
                X_OK: 1,
                UV_FS_COPYFILE_EXCL: 1,
                COPYFILE_EXCL: 1 },
             Stats: [Function: Stats],
             F_OK: 0,
             R_OK: 4,
             W_OK: 2,
             X_OK: 1,
             access: [Function],
             accessSync: [Function],
             exists: [Function],
             existsSync: [Function],
             readFile: [Function],
             readFileSync: [Function],
             close: [Function],
             closeSync: [Function],
             open: [Function],
             openSync: [Function],
             read: [Function],
             readSync: [Function],
             write: [Function],
             writeSync: [Function],
             rename: [Function],
             renameSync: [Function],
             truncate: [Function],
             truncateSync: [Function],
             ftruncate: [Function],
             ftruncateSync: [Function],
             rmdir: [Function],
             rmdirSync: [Function],
             fdatasync: [Function],
             fdatasyncSync: [Function],
             fsync: [Function],
             fsyncSync: [Function],
             mkdir: [Function],
             mkdirSync: [Function],
             readdir: [Function],
             readdirSync: [Function],
             fstat: [Function],
             lstat: [Function],
             stat: [Function],
             fstatSync: [Function],
             lstatSync: [Function],
             statSync: [Function],
             readlink: [Function],
             readlinkSync: [Function],
             symlink: [Function],
             symlinkSync: [Function],
             link: [Function],
             linkSync: [Function],
             unlink: [Function],
             unlinkSync: [Function],
             fchmod: [Function],
             fchmodSync: [Function],
             lchmod: [Function],
             lchmodSync: [Function],
             chmod: [Function],
             chmodSync: [Function],
             lchown: [Function],
             lchownSync: [Function],
             fchown: [Function],
             fchownSync: [Function],
             chown: [Function],
             chownSync: [Function],
             _toUnixTimestamp: [Function: toUnixTimestamp],
             utimes: [Function],
             utimesSync: [Function],
             futimes: [Function],
             futimesSync: [Function],
             writeFile: [Function],
             writeFileSync: [Function],
             appendFile: [Function],
             appendFileSync: [Function],
             watch: [Function],
             watchFile: [Function],
             unwatchFile: [Function],
             realpathSync: [Function: realpathSync],
             realpath: [Function: realpath],
             mkdtemp: [Function],
             mkdtempSync: [Function],
             copyFile: [Function],
             copyFileSync: [Function],
             createReadStream: [Function],
             ReadStream: 
              { [Function: ReadStream]
                super_: 
                 { [Function: Readable]
                   ReadableState: [Function: ReadableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: [Circular],
                      Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                      Duplex: { [Function: Duplex] super_: [Circular] },
                      Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                   _fromList: [Function: fromList] } },
             FileReadStream: 
              { [Function: ReadStream]
                super_: 
                 { [Function: Readable]
                   ReadableState: [Function: ReadableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: [Circular],
                      Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                      Duplex: { [Function: Duplex] super_: [Circular] },
                      Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                   _fromList: [Function: fromList] } },
             createWriteStream: [Function],
             WriteStream: 
              { [Function: WriteStream]
                super_: 
                 { [Function: Writable]
                   WritableState: [Function: WritableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] },
                      Writable: [Circular],
                      Duplex: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } },
                      Transform: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Object] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
             FileWriteStream: 
              { [Function: WriteStream]
                super_: 
                 { [Function: Writable]
                   WritableState: [Function: WritableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] },
                      Writable: [Circular],
                      Duplex: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } },
                      Transform: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Object] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
          Promise: 
           { [Function: Promise]
             TypeError: [Function: TypeError],
             RangeError: [Function: RangeError],
             CancellationError: [Function: SubError],
             TimeoutError: [Function: SubError],
             OperationalError: [Function: OperationalError],
             RejectionError: [Function: OperationalError],
             AggregateError: [Function: SubError],
             _peekContext: [Function],
             onPossiblyUnhandledRejection: [Function],
             onUnhandledRejectionHandled: [Function],
             longStackTraces: [Function],
             hasLongStackTraces: [Function],
             config: [Function],
             getNewLibraryCopy: [Function],
             is: [Function],
             fromCallback: [Function],
             fromNode: [Function],
             all: [Function],
             cast: [Function],
             fulfilled: [Function],
             resolve: [Function],
             rejected: [Function],
             reject: [Function],
             setScheduler: [Function],
             pending: [Function],
             defer: [Function],
             method: [Function],
             try: [Function],
             attempt: [Function],
             bind: [Function],
             PromiseInspection: [Function: PromiseInspection],
             join: [Function],
             Promise: [Circular],
             version: '3.5.3',
             map: [Function],
             using: [Function],
             delay: [Function],
             coroutine: { [Function] addYieldHandler: [Function] },
             spawn: [Function],
             promisify: [Function],
             promisifyAll: [Function],
             props: [Function],
             race: [Function],
             reduce: [Function],
             settle: [Function],
             some: [Function],
             _SomePromiseArray: [Function: SomePromiseArray],
             filter: [Function],
             each: [Function],
             mapSeries: [Function: PromiseMapSeries],
             any: [Function],
             noConflict: [Function: noConflict] },
          camelcase: [Function],
          annotation: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          logger: Logger { category: 'PropertiesParser', context: {} } },
        PrototypeAnnotationParser: Prototype {
          annotation: [Function: Prototype],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        QualifierAnnotationParser: QualifierParser {
          annotation: [Function: Qualifier],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        ResourceAnnotationParser: ResourceParser {
          annotation: [Function: Resource],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        ResourceParser: ResourceParser {
          annotation: [Function: Resource],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        RunAnnotationParser: RunParser {
          annotation: [Function: Run],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ServiceAnnotationParser: ServiceParser {
          annotation: [Function: Service],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        StoreAnnotationParser: { [Function: StoreParser]
          annotation: [Function: Store],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        TypeAnnotationParser: type {
          annotation: 
           { [Function: type]
             super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
          doctrine: 
           { version: '3.0.0',
             parse: [Function: parse],
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             unwrapComment: [Function: unwrapComment],
             Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             Error: [Function: DoctrineError],
             type: 
              { Syntax: 
                 { NullableLiteral: 'NullableLiteral',
                   AllLiteral: 'AllLiteral',
                   NullLiteral: 'NullLiteral',
                   UndefinedLiteral: 'UndefinedLiteral',
                   VoidLiteral: 'VoidLiteral',
                   UnionType: 'UnionType',
                   ArrayType: 'ArrayType',
                   RecordType: 'RecordType',
                   FieldType: 'FieldType',
                   FunctionType: 'FunctionType',
                   ParameterType: 'ParameterType',
                   RestType: 'RestType',
                   NonNullableType: 'NonNullableType',
                   OptionalType: 'OptionalType',
                   NullableType: 'NullableType',
                   NameExpression: 'NameExpression',
                   TypeApplication: 'TypeApplication',
                   StringLiteralType: 'StringLiteralType',
                   NumericLiteralType: 'NumericLiteralType',
                   BooleanLiteralType: 'BooleanLiteralType' },
                parseType: [Function: parseType],
                parseParamType: [Function: parseParamType],
                stringify: [Function: stringify] } },
          expressionParser: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } } ],
     expressionParser: 
      [ Block: [Function: Block],
        CallExpression: [Function: CallExpression],
        ClassDeclaration: [Function: ClassDeclaration],
        ExpressionStatement: [Function: ExpressionStatement],
        FunctionDeclaration: [Function: FunctionDeclaration],
        Line: [Function: Line],
        MemberExpression: [Function: MemberExpression],
        MethodDefinition: [Function: MethodDefinition],
        Property: [Function: Property],
        VariableDeclaration: [Function: VariableDeclaration] ],
     removeTokens: 
      [ 'BlockStatement>',
        'AssignmentExpression',
        'Identifier',
        'Literal',
        'ClassBody',
        'ClassExpression' ],
     lightTokenInformation: 'true',
     removeLocationInformation: 'true',
     beautify: { [Function: js_beautify] defaultOptions: [Function] },
     _: 
      { [Function: lodash]
        templateSettings: 
         { escape: /<%-([\s\S]+?)%>/g,
           evaluate: /<%([\s\S]+?)%>/g,
           interpolate: /<%=([\s\S]+?)%>/g,
           variable: '',
           imports: { _: [Circular] } },
        after: [Function: after],
        ary: [Function: ary],
        assign: [Function],
        assignIn: [Function],
        assignInWith: [Function],
        assignWith: [Function],
        at: [Function],
        before: [Function: before],
        bind: { [Function] placeholder: [Circular] },
        bindAll: [Function],
        bindKey: { [Function] placeholder: [Circular] },
        castArray: [Function: castArray],
        chain: [Function: chain],
        chunk: [Function: chunk],
        compact: [Function: compact],
        concat: [Function: concat],
        cond: [Function: cond],
        conforms: [Function: conforms],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        curry: { [Function: curry] placeholder: [Circular] },
        curryRight: { [Function: curryRight] placeholder: [Circular] },
        debounce: [Function: debounce],
        defaults: [Function],
        defaultsDeep: [Function],
        defer: [Function],
        delay: [Function],
        difference: [Function],
        differenceBy: [Function],
        differenceWith: [Function],
        drop: [Function: drop],
        dropRight: [Function: dropRight],
        dropRightWhile: [Function: dropRightWhile],
        dropWhile: [Function: dropWhile],
        fill: [Function: fill],
        filter: [Function: filter],
        flatMap: [Function: flatMap],
        flatMapDeep: [Function: flatMapDeep],
        flatMapDepth: [Function: flatMapDepth],
        flatten: [Function: flatten],
        flattenDeep: [Function: flattenDeep],
        flattenDepth: [Function: flattenDepth],
        flip: [Function: flip],
        flow: [Function],
        flowRight: [Function],
        fromPairs: [Function: fromPairs],
        functions: [Function: functions],
        functionsIn: [Function: functionsIn],
        groupBy: [Function],
        initial: [Function: initial],
        intersection: [Function],
        intersectionBy: [Function],
        intersectionWith: [Function],
        invert: [Function],
        invertBy: [Function],
        invokeMap: [Function],
        iteratee: [Function: iteratee],
        keyBy: [Function],
        keys: [Function: keys],
        keysIn: [Function: keysIn],
        map: [Function: map],
        mapKeys: [Function: mapKeys],
        mapValues: [Function: mapValues],
        matches: [Function: matches],
        matchesProperty: [Function: matchesProperty],
        memoize: { [Function: memoize] Cache: [Function: MapCache] },
        merge: [Function],
        mergeWith: [Function],
        method: [Function],
        methodOf: [Function],
        mixin: [Function: mixin],
        negate: [Function: negate],
        nthArg: [Function: nthArg],
        omit: [Function],
        omitBy: [Function: omitBy],
        once: [Function: once],
        orderBy: [Function: orderBy],
        over: [Function],
        overArgs: [Function],
        overEvery: [Function],
        overSome: [Function],
        partial: { [Function] placeholder: [Circular] },
        partialRight: { [Function] placeholder: [Circular] },
        partition: [Function],
        pick: [Function],
        pickBy: [Function: pickBy],
        property: [Function: property],
        propertyOf: [Function: propertyOf],
        pull: [Function],
        pullAll: [Function: pullAll],
        pullAllBy: [Function: pullAllBy],
        pullAllWith: [Function: pullAllWith],
        pullAt: [Function],
        range: [Function],
        rangeRight: [Function],
        rearg: [Function],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        reverse: [Function: reverse],
        sampleSize: [Function: sampleSize],
        set: [Function: set],
        setWith: [Function: setWith],
        shuffle: [Function: shuffle],
        slice: [Function: slice],
        sortBy: [Function],
        sortedUniq: [Function: sortedUniq],
        sortedUniqBy: [Function: sortedUniqBy],
        split: [Function: split],
        spread: [Function: spread],
        tail: [Function: tail],
        take: [Function: take],
        takeRight: [Function: takeRight],
        takeRightWhile: [Function: takeRightWhile],
        takeWhile: [Function: takeWhile],
        tap: [Function: tap],
        throttle: [Function: throttle],
        thru: [Function: thru],
        toArray: [Function: toArray],
        toPairs: [Function],
        toPairsIn: [Function],
        toPath: [Function: toPath],
        toPlainObject: [Function: toPlainObject],
        transform: [Function: transform],
        unary: [Function: unary],
        union: [Function],
        unionBy: [Function],
        unionWith: [Function],
        uniq: [Function: uniq],
        uniqBy: [Function: uniqBy],
        uniqWith: [Function: uniqWith],
        unset: [Function: unset],
        unzip: [Function: unzip],
        unzipWith: [Function: unzipWith],
        update: [Function: update],
        updateWith: [Function: updateWith],
        values: [Function: values],
        valuesIn: [Function: valuesIn],
        without: [Function],
        words: [Function: words],
        wrap: [Function: wrap],
        xor: [Function],
        xorBy: [Function],
        xorWith: [Function],
        zip: [Function],
        zipObject: [Function: zipObject],
        zipObjectDeep: [Function: zipObjectDeep],
        zipWith: [Function],
        entries: [Function],
        entriesIn: [Function],
        extend: [Function],
        extendWith: [Function],
        add: [Function],
        attempt: [Function],
        camelCase: [Function],
        capitalize: [Function: capitalize],
        ceil: [Function],
        clamp: [Function: clamp],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        cloneDeepWith: [Function: cloneDeepWith],
        cloneWith: [Function: cloneWith],
        conformsTo: [Function: conformsTo],
        deburr: [Function: deburr],
        defaultTo: [Function: defaultTo],
        divide: [Function],
        endsWith: [Function: endsWith],
        eq: [Function: eq],
        escape: [Function: escape],
        escapeRegExp: [Function: escapeRegExp],
        every: [Function: every],
        find: [Function],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        floor: [Function],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function: forIn],
        forInRight: [Function: forInRight],
        forOwn: [Function: forOwn],
        forOwnRight: [Function: forOwnRight],
        get: [Function: get],
        gt: [Function],
        gte: [Function],
        has: [Function: has],
        hasIn: [Function: hasIn],
        head: [Function: head],
        identity: [Function: identity],
        includes: [Function: includes],
        indexOf: [Function: indexOf],
        inRange: [Function: inRange],
        invoke: [Function],
        isArguments: [Function: baseIsArguments],
        isArray: [Function: isArray],
        isArrayBuffer: [Function],
        isArrayLike: [Function: isArrayLike],
        isArrayLikeObject: [Function: isArrayLikeObject],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isDate: [Function],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isEqualWith: [Function: isEqualWith],
        isError: [Function: isError],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isInteger: [Function: isInteger],
        isLength: [Function: isLength],
        isMap: [Function],
        isMatch: [Function: isMatch],
        isMatchWith: [Function: isMatchWith],
        isNaN: [Function: isNaN],
        isNative: [Function: isNative],
        isNil: [Function: isNil],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isObjectLike: [Function: isObjectLike],
        isPlainObject: [Function: isPlainObject],
        isRegExp: [Function],
        isSafeInteger: [Function: isSafeInteger],
        isSet: [Function],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isTypedArray: [Function],
        isUndefined: [Function: isUndefined],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        join: [Function: join],
        kebabCase: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lowerCase: [Function],
        lowerFirst: [Function],
        lt: [Function],
        lte: [Function],
        max: [Function: max],
        maxBy: [Function: maxBy],
        mean: [Function: mean],
        meanBy: [Function: meanBy],
        min: [Function: min],
        minBy: [Function: minBy],
        stubArray: [Function: stubArray],
        stubFalse: [Function: stubFalse],
        stubObject: [Function: stubObject],
        stubString: [Function: stubString],
        stubTrue: [Function: stubTrue],
        multiply: [Function],
        nth: [Function: nth],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function],
        pad: [Function: pad],
        padEnd: [Function: padEnd],
        padStart: [Function: padStart],
        parseInt: [Function: parseInt],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        repeat: [Function: repeat],
        replace: [Function: replace],
        result: [Function: result],
        round: [Function],
        runInContext: [Function: runInContext],
        sample: [Function: sample],
        size: [Function: size],
        snakeCase: [Function],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        sortedIndexBy: [Function: sortedIndexBy],
        sortedIndexOf: [Function: sortedIndexOf],
        sortedLastIndex: [Function: sortedLastIndex],
        sortedLastIndexBy: [Function: sortedLastIndexBy],
        sortedLastIndexOf: [Function: sortedLastIndexOf],
        startCase: [Function],
        startsWith: [Function: startsWith],
        subtract: [Function],
        sum: [Function: sum],
        sumBy: [Function: sumBy],
        template: [Function: template],
        times: [Function: times],
        toFinite: [Function: toFinite],
        toInteger: [Function: toInteger],
        toLength: [Function: toLength],
        toLower: [Function: toLower],
        toNumber: [Function: toNumber],
        toSafeInteger: [Function: toSafeInteger],
        toString: [Function: toString],
        toUpper: [Function: toUpper],
        trim: [Function: trim],
        trimEnd: [Function: trimEnd],
        trimStart: [Function: trimStart],
        truncate: [Function: truncate],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        upperCase: [Function],
        upperFirst: [Function],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        first: [Function: head],
        VERSION: '4.17.11',
        _: [Circular] },
     util: 
      { _errnoException: [Function: _errnoException],
        _exceptionWithHostPort: [Function: _exceptionWithHostPort],
        _extend: [Function: _extend],
        callbackify: [Function: callbackify],
        debuglog: [Function: debuglog],
        deprecate: [Function: deprecate],
        format: [Function: format],
        inherits: [Function: inherits],
        inspect: 
         { [Function: inspect]
           custom: Symbol(util.inspect.custom),
           colors: 
            { bold: [ 1, 22 ],
              italic: [ 3, 23 ],
              underline: [ 4, 24 ],
              inverse: [ 7, 27 ],
              white: [ 37, 39 ],
              grey: [ 90, 39 ],
              black: [ 30, 39 ],
              blue: [ 34, 39 ],
              cyan: [ 36, 39 ],
              green: [ 32, 39 ],
              magenta: [ 35, 39 ],
              red: [ 31, 39 ],
              yellow: [ 33, 39 ] },
           styles: 
            { special: 'cyan',
              number: 'yellow',
              boolean: 'yellow',
              undefined: 'grey',
              null: 'bold',
              string: 'green',
              symbol: 'green',
              date: 'magenta',
              regexp: 'red' } },
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isNull: [Function: isNull],
        isNullOrUndefined: [Function: isNullOrUndefined],
        isNumber: [Function: isNumber],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isUndefined: [Function: isUndefined],
        isRegExp: [Function: isRegExp],
        isObject: [Function: isObject],
        isDate: [Function: isDate],
        isError: [Function: isError],
        isFunction: [Function: isFunction],
        isPrimitive: [Function: isPrimitive],
        log: [Function: log],
        promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
        TextDecoder: [Function: TextDecoder],
        TextEncoder: [Function: TextEncoder],
        debug: [Function: deprecated],
        error: [Function: deprecated],
        print: [Function: deprecated],
        puts: [Function: deprecated] },
     esprima: 
      { parse: [Function: parse],
        tokenize: [Function: tokenize],
        Syntax: 
         { AssignmentExpression: 'AssignmentExpression',
           AssignmentPattern: 'AssignmentPattern',
           ArrayExpression: 'ArrayExpression',
           ArrayPattern: 'ArrayPattern',
           ArrowFunctionExpression: 'ArrowFunctionExpression',
           BlockStatement: 'BlockStatement',
           BinaryExpression: 'BinaryExpression',
           BreakStatement: 'BreakStatement',
           CallExpression: 'CallExpression',
           CatchClause: 'CatchClause',
           ClassBody: 'ClassBody',
           ClassDeclaration: 'ClassDeclaration',
           ClassExpression: 'ClassExpression',
           ConditionalExpression: 'ConditionalExpression',
           ContinueStatement: 'ContinueStatement',
           DoWhileStatement: 'DoWhileStatement',
           DebuggerStatement: 'DebuggerStatement',
           EmptyStatement: 'EmptyStatement',
           ExportAllDeclaration: 'ExportAllDeclaration',
           ExportDefaultDeclaration: 'ExportDefaultDeclaration',
           ExportNamedDeclaration: 'ExportNamedDeclaration',
           ExportSpecifier: 'ExportSpecifier',
           ExpressionStatement: 'ExpressionStatement',
           ForStatement: 'ForStatement',
           ForOfStatement: 'ForOfStatement',
           ForInStatement: 'ForInStatement',
           FunctionDeclaration: 'FunctionDeclaration',
           FunctionExpression: 'FunctionExpression',
           Identifier: 'Identifier',
           IfStatement: 'IfStatement',
           ImportDeclaration: 'ImportDeclaration',
           ImportDefaultSpecifier: 'ImportDefaultSpecifier',
           ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
           ImportSpecifier: 'ImportSpecifier',
           Literal: 'Literal',
           LabeledStatement: 'LabeledStatement',
           LogicalExpression: 'LogicalExpression',
           MemberExpression: 'MemberExpression',
           MetaProperty: 'MetaProperty',
           MethodDefinition: 'MethodDefinition',
           NewExpression: 'NewExpression',
           ObjectExpression: 'ObjectExpression',
           ObjectPattern: 'ObjectPattern',
           Program: 'Program',
           Property: 'Property',
           RestElement: 'RestElement',
           ReturnStatement: 'ReturnStatement',
           SequenceExpression: 'SequenceExpression',
           SpreadElement: 'SpreadElement',
           Super: 'Super',
           SwitchCase: 'SwitchCase',
           SwitchStatement: 'SwitchStatement',
           TaggedTemplateExpression: 'TaggedTemplateExpression',
           TemplateElement: 'TemplateElement',
           TemplateLiteral: 'TemplateLiteral',
           ThisExpression: 'ThisExpression',
           ThrowStatement: 'ThrowStatement',
           TryStatement: 'TryStatement',
           UnaryExpression: 'UnaryExpression',
           UpdateExpression: 'UpdateExpression',
           VariableDeclaration: 'VariableDeclaration',
           VariableDeclarator: 'VariableDeclarator',
           WhileStatement: 'WhileStatement',
           WithStatement: 'WithStatement',
           YieldExpression: 'YieldExpression' },
        version: '3.1.3' },
     estraverse: 
      { version: '4.2.0',
        Syntax: 
         { AssignmentExpression: 'AssignmentExpression',
           AssignmentPattern: 'AssignmentPattern',
           ArrayExpression: 'ArrayExpression',
           ArrayPattern: 'ArrayPattern',
           ArrowFunctionExpression: 'ArrowFunctionExpression',
           AwaitExpression: 'AwaitExpression',
           BlockStatement: 'BlockStatement',
           BinaryExpression: 'BinaryExpression',
           BreakStatement: 'BreakStatement',
           CallExpression: 'CallExpression',
           CatchClause: 'CatchClause',
           ClassBody: 'ClassBody',
           ClassDeclaration: 'ClassDeclaration',
           ClassExpression: 'ClassExpression',
           ComprehensionBlock: 'ComprehensionBlock',
           ComprehensionExpression: 'ComprehensionExpression',
           ConditionalExpression: 'ConditionalExpression',
           ContinueStatement: 'ContinueStatement',
           DebuggerStatement: 'DebuggerStatement',
           DirectiveStatement: 'DirectiveStatement',
           DoWhileStatement: 'DoWhileStatement',
           EmptyStatement: 'EmptyStatement',
           ExportAllDeclaration: 'ExportAllDeclaration',
           ExportDefaultDeclaration: 'ExportDefaultDeclaration',
           ExportNamedDeclaration: 'ExportNamedDeclaration',
           ExportSpecifier: 'ExportSpecifier',
           ExpressionStatement: 'ExpressionStatement',
           ForStatement: 'ForStatement',
           ForInStatement: 'ForInStatement',
           ForOfStatement: 'ForOfStatement',
           FunctionDeclaration: 'FunctionDeclaration',
           FunctionExpression: 'FunctionExpression',
           GeneratorExpression: 'GeneratorExpression',
           Identifier: 'Identifier',
           IfStatement: 'IfStatement',
           ImportDeclaration: 'ImportDeclaration',
           ImportDefaultSpecifier: 'ImportDefaultSpecifier',
           ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
           ImportSpecifier: 'ImportSpecifier',
           Literal: 'Literal',
           LabeledStatement: 'LabeledStatement',
           LogicalExpression: 'LogicalExpression',
           MemberExpression: 'MemberExpression',
           MetaProperty: 'MetaProperty',
           MethodDefinition: 'MethodDefinition',
           ModuleSpecifier: 'ModuleSpecifier',
           NewExpression: 'NewExpression',
           ObjectExpression: 'ObjectExpression',
           ObjectPattern: 'ObjectPattern',
           Program: 'Program',
           Property: 'Property',
           RestElement: 'RestElement',
           ReturnStatement: 'ReturnStatement',
           SequenceExpression: 'SequenceExpression',
           SpreadElement: 'SpreadElement',
           Super: 'Super',
           SwitchStatement: 'SwitchStatement',
           SwitchCase: 'SwitchCase',
           TaggedTemplateExpression: 'TaggedTemplateExpression',
           TemplateElement: 'TemplateElement',
           TemplateLiteral: 'TemplateLiteral',
           ThisExpression: 'ThisExpression',
           ThrowStatement: 'ThrowStatement',
           TryStatement: 'TryStatement',
           UnaryExpression: 'UnaryExpression',
           UpdateExpression: 'UpdateExpression',
           VariableDeclaration: 'VariableDeclaration',
           VariableDeclarator: 'VariableDeclarator',
           WhileStatement: 'WhileStatement',
           WithStatement: 'WithStatement',
           YieldExpression: 'YieldExpression' },
        traverse: [Function: traverse],
        replace: [Function: replace],
        attachComments: [Function: attachComments],
        VisitorKeys: 
         { AssignmentExpression: [ 'left', 'right' ],
           AssignmentPattern: [ 'left', 'right' ],
           ArrayExpression: [ 'elements' ],
           ArrayPattern: [ 'elements' ],
           ArrowFunctionExpression: [ 'params', 'body' ],
           AwaitExpression: [ 'argument' ],
           BlockStatement: [ 'body' ],
           BinaryExpression: [ 'left', 'right' ],
           BreakStatement: [ 'label' ],
           CallExpression: [ 'callee', 'arguments' ],
           CatchClause: [ 'param', 'body' ],
           ClassBody: [ 'body' ],
           ClassDeclaration: [ 'id', 'superClass', 'body' ],
           ClassExpression: [ 'id', 'superClass', 'body' ],
           ComprehensionBlock: [ 'left', 'right' ],
           ComprehensionExpression: [ 'blocks', 'filter', 'body' ],
           ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
           ContinueStatement: [ 'label' ],
           DebuggerStatement: [],
           DirectiveStatement: [],
           DoWhileStatement: [ 'body', 'test' ],
           EmptyStatement: [],
           ExportAllDeclaration: [ 'source' ],
           ExportDefaultDeclaration: [ 'declaration' ],
           ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
           ExportSpecifier: [ 'exported', 'local' ],
           ExpressionStatement: [ 'expression' ],
           ForStatement: [ 'init', 'test', 'update', 'body' ],
           ForInStatement: [ 'left', 'right', 'body' ],
           ForOfStatement: [ 'left', 'right', 'body' ],
           FunctionDeclaration: [ 'id', 'params', 'body' ],
           FunctionExpression: [ 'id', 'params', 'body' ],
           GeneratorExpression: [ 'blocks', 'filter', 'body' ],
           Identifier: [],
           IfStatement: [ 'test', 'consequent', 'alternate' ],
           ImportDeclaration: [ 'specifiers', 'source' ],
           ImportDefaultSpecifier: [ 'local' ],
           ImportNamespaceSpecifier: [ 'local' ],
           ImportSpecifier: [ 'imported', 'local' ],
           Literal: [],
           LabeledStatement: [ 'label', 'body' ],
           LogicalExpression: [ 'left', 'right' ],
           MemberExpression: [ 'object', 'property' ],
           MetaProperty: [ 'meta', 'property' ],
           MethodDefinition: [ 'key', 'value' ],
           ModuleSpecifier: [],
           NewExpression: [ 'callee', 'arguments' ],
           ObjectExpression: [ 'properties' ],
           ObjectPattern: [ 'properties' ],
           Program: [ 'body' ],
           Property: [ 'key', 'value' ],
           RestElement: [ 'argument' ],
           ReturnStatement: [ 'argument' ],
           SequenceExpression: [ 'expressions' ],
           SpreadElement: [ 'argument' ],
           Super: [],
           SwitchStatement: [ 'discriminant', 'cases' ],
           SwitchCase: [ 'test', 'consequent' ],
           TaggedTemplateExpression: [ 'tag', 'quasi' ],
           TemplateElement: [],
           TemplateLiteral: [ 'quasis', 'expressions' ],
           ThisExpression: [],
           ThrowStatement: [ 'argument' ],
           TryStatement: [ 'block', 'handler', 'finalizer' ],
           UnaryExpression: [ 'argument' ],
           UpdateExpression: [ 'argument' ],
           VariableDeclaration: [ 'declarations' ],
           VariableDeclarator: [ 'id', 'init' ],
           WhileStatement: [ 'test', 'body' ],
           WithStatement: [ 'object', 'body' ],
           YieldExpression: [ 'argument' ] },
        VisitorOption: { Break: {}, Skip: {}, Remove: {} },
        Controller: [Function: Controller],
        cloneEnvironment: [Function] } },
  ContextBuilder: 
   ContextBuilder {
     domain: null,
     _events: 
      { aop_initialize: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        aop_wire: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        'finishing bean setup': 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        inherit: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        initialize: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        inject: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        instantiate: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        run: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        stashing: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        '0x2': 
         [ [Function: processApplicationStack],
           [Function: processApplicationStack] ] },
     _eventsCount: 10,
     _maxListeners: undefined,
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'ContextBuilder', context: {} },
     annotationParser: 
      [ AfterAnnotationParser: AfterAnnotationParser {
          annotation: [Function: After],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        AspectAnnotationParser: AspectParser {
          annotation: [Function: Aspect],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        AutowireAnnotationParser: { [Function: AutowrieAnnotationParser]
          QualifierAnnotation: [Function: Qualifier],
          annotation: [Function: Autowire],
          camelcase: [Function],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        BeanAnnotationParser: BeanParser {
          annotation: [Function: Bean],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        BeforeAnnotationParser: BeforeAnnotationParser {
          annotation: [Function: Before],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ComponentAnnotationParser: ComponentParser {
          annotation: [Function: Component],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ConfigurationAnnotationParser: ConfigurationParser {
          annotation: [Function: Configuration],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ContextAnnotationParser: ContextParser {
          annotation: [Function: Context],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ControllerAnnotationParser: ControllerParser {
          annotation: [Function: Controller],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        InheritsAnnotationParser: InheritsAnnotationParser {
          globals: [],
          annotation: [Function: Inherits],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        InitAnnotationParser: InitParser {
          annotation: [Function: Init],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        NamespaceAnnotationParser: NamespaceParser {
          annotation: [Function: Namespace],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ParamAnnotationParser: { [Function: paramParser]
          annotation: [Function: param],
          doctrine: 
           { version: '3.0.0',
             parse: [Function: parse],
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             unwrapComment: [Function: unwrapComment],
             Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             Error: [Function: DoctrineError],
             type: 
              { Syntax: 
                 { NullableLiteral: 'NullableLiteral',
                   AllLiteral: 'AllLiteral',
                   NullLiteral: 'NullLiteral',
                   UndefinedLiteral: 'UndefinedLiteral',
                   VoidLiteral: 'VoidLiteral',
                   UnionType: 'UnionType',
                   ArrayType: 'ArrayType',
                   RecordType: 'RecordType',
                   FieldType: 'FieldType',
                   FunctionType: 'FunctionType',
                   ParameterType: 'ParameterType',
                   RestType: 'RestType',
                   NonNullableType: 'NonNullableType',
                   OptionalType: 'OptionalType',
                   NullableType: 'NullableType',
                   NameExpression: 'NameExpression',
                   TypeApplication: 'TypeApplication',
                   StringLiteralType: 'StringLiteralType',
                   NumericLiteralType: 'NumericLiteralType',
                   BooleanLiteralType: 'BooleanLiteralType' },
                parseType: [Function: parseType],
                parseParamType: [Function: parseParamType],
                stringify: [Function: stringify] } },
          expressionParser: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        PointCuteAnnotationParser: PointCutParser {
          wildcard: [Function],
          md5: [Function],
          annotation: [Function: PointCut],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        PropertiesAnnotationParser: PropertiesParser {
          processors: 
           { '.properties': 
              { [Function: XMLPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] },
                propertiesReader: 
                 { parse: [Function],
                   stringify: [Function],
                   createStringifier: [Function: createStringifier] } },
             '.json': 
              { [Function: JsonPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] } },
             '.xml': 
              { [Function: XMLPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] } } },
          glob: 
           { [Function: glob]
             sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
             GlobSync: [Function: GlobSync],
             glob: [Circular],
             hasMagic: [Function],
             Glob: 
              { [Function: Glob]
                super_: 
                 { [Function: EventEmitter]
                   EventEmitter: [Circular],
                   usingDomains: false,
                   defaultMaxListeners: [Getter/Setter],
                   init: [Function],
                   listenerCount: [Function] } } },
          path: 
           { resolve: [Function: resolve],
             normalize: [Function: normalize],
             isAbsolute: [Function: isAbsolute],
             join: [Function: join],
             relative: [Function: relative],
             _makeLong: [Function: _makeLong],
             dirname: [Function: dirname],
             basename: [Function: basename],
             extname: [Function: extname],
             format: [Function: format],
             parse: [Function: parse],
             sep: '/',
             delimiter: ':',
             win32: 
              { resolve: [Function: resolve],
                normalize: [Function: normalize],
                isAbsolute: [Function: isAbsolute],
                join: [Function: join],
                relative: [Function: relative],
                _makeLong: [Function: _makeLong],
                dirname: [Function: dirname],
                basename: [Function: basename],
                extname: [Function: extname],
                format: [Function: format],
                parse: [Function: parse],
                sep: '\\',
                delimiter: ';',
                win32: [Circular],
                posix: [Circular] },
             posix: [Circular] },
          fs: 
           { constants: 
              { O_RDONLY: 0,
                O_WRONLY: 1,
                O_RDWR: 2,
                S_IFMT: 61440,
                S_IFREG: 32768,
                S_IFDIR: 16384,
                S_IFCHR: 8192,
                S_IFBLK: 24576,
                S_IFIFO: 4096,
                S_IFLNK: 40960,
                S_IFSOCK: 49152,
                O_CREAT: 512,
                O_EXCL: 2048,
                O_NOCTTY: 131072,
                O_TRUNC: 1024,
                O_APPEND: 8,
                O_DIRECTORY: 1048576,
                O_NOFOLLOW: 256,
                O_SYNC: 128,
                O_DSYNC: 4194304,
                O_SYMLINK: 2097152,
                O_NONBLOCK: 4,
                S_IRWXU: 448,
                S_IRUSR: 256,
                S_IWUSR: 128,
                S_IXUSR: 64,
                S_IRWXG: 56,
                S_IRGRP: 32,
                S_IWGRP: 16,
                S_IXGRP: 8,
                S_IRWXO: 7,
                S_IROTH: 4,
                S_IWOTH: 2,
                S_IXOTH: 1,
                F_OK: 0,
                R_OK: 4,
                W_OK: 2,
                X_OK: 1,
                UV_FS_COPYFILE_EXCL: 1,
                COPYFILE_EXCL: 1 },
             Stats: [Function: Stats],
             F_OK: 0,
             R_OK: 4,
             W_OK: 2,
             X_OK: 1,
             access: [Function],
             accessSync: [Function],
             exists: [Function],
             existsSync: [Function],
             readFile: [Function],
             readFileSync: [Function],
             close: [Function],
             closeSync: [Function],
             open: [Function],
             openSync: [Function],
             read: [Function],
             readSync: [Function],
             write: [Function],
             writeSync: [Function],
             rename: [Function],
             renameSync: [Function],
             truncate: [Function],
             truncateSync: [Function],
             ftruncate: [Function],
             ftruncateSync: [Function],
             rmdir: [Function],
             rmdirSync: [Function],
             fdatasync: [Function],
             fdatasyncSync: [Function],
             fsync: [Function],
             fsyncSync: [Function],
             mkdir: [Function],
             mkdirSync: [Function],
             readdir: [Function],
             readdirSync: [Function],
             fstat: [Function],
             lstat: [Function],
             stat: [Function],
             fstatSync: [Function],
             lstatSync: [Function],
             statSync: [Function],
             readlink: [Function],
             readlinkSync: [Function],
             symlink: [Function],
             symlinkSync: [Function],
             link: [Function],
             linkSync: [Function],
             unlink: [Function],
             unlinkSync: [Function],
             fchmod: [Function],
             fchmodSync: [Function],
             lchmod: [Function],
             lchmodSync: [Function],
             chmod: [Function],
             chmodSync: [Function],
             lchown: [Function],
             lchownSync: [Function],
             fchown: [Function],
             fchownSync: [Function],
             chown: [Function],
             chownSync: [Function],
             _toUnixTimestamp: [Function: toUnixTimestamp],
             utimes: [Function],
             utimesSync: [Function],
             futimes: [Function],
             futimesSync: [Function],
             writeFile: [Function],
             writeFileSync: [Function],
             appendFile: [Function],
             appendFileSync: [Function],
             watch: [Function],
             watchFile: [Function],
             unwatchFile: [Function],
             realpathSync: [Function: realpathSync],
             realpath: [Function: realpath],
             mkdtemp: [Function],
             mkdtempSync: [Function],
             copyFile: [Function],
             copyFileSync: [Function],
             createReadStream: [Function],
             ReadStream: 
              { [Function: ReadStream]
                super_: 
                 { [Function: Readable]
                   ReadableState: [Function: ReadableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: [Circular],
                      Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                      Duplex: { [Function: Duplex] super_: [Circular] },
                      Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                   _fromList: [Function: fromList] } },
             FileReadStream: 
              { [Function: ReadStream]
                super_: 
                 { [Function: Readable]
                   ReadableState: [Function: ReadableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: [Circular],
                      Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                      Duplex: { [Function: Duplex] super_: [Circular] },
                      Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                   _fromList: [Function: fromList] } },
             createWriteStream: [Function],
             WriteStream: 
              { [Function: WriteStream]
                super_: 
                 { [Function: Writable]
                   WritableState: [Function: WritableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] },
                      Writable: [Circular],
                      Duplex: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } },
                      Transform: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Object] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
             FileWriteStream: 
              { [Function: WriteStream]
                super_: 
                 { [Function: Writable]
                   WritableState: [Function: WritableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] },
                      Writable: [Circular],
                      Duplex: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } },
                      Transform: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Object] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
          Promise: 
           { [Function: Promise]
             TypeError: [Function: TypeError],
             RangeError: [Function: RangeError],
             CancellationError: [Function: SubError],
             TimeoutError: [Function: SubError],
             OperationalError: [Function: OperationalError],
             RejectionError: [Function: OperationalError],
             AggregateError: [Function: SubError],
             _peekContext: [Function],
             onPossiblyUnhandledRejection: [Function],
             onUnhandledRejectionHandled: [Function],
             longStackTraces: [Function],
             hasLongStackTraces: [Function],
             config: [Function],
             getNewLibraryCopy: [Function],
             is: [Function],
             fromCallback: [Function],
             fromNode: [Function],
             all: [Function],
             cast: [Function],
             fulfilled: [Function],
             resolve: [Function],
             rejected: [Function],
             reject: [Function],
             setScheduler: [Function],
             pending: [Function],
             defer: [Function],
             method: [Function],
             try: [Function],
             attempt: [Function],
             bind: [Function],
             PromiseInspection: [Function: PromiseInspection],
             join: [Function],
             Promise: [Circular],
             version: '3.5.3',
             map: [Function],
             using: [Function],
             delay: [Function],
             coroutine: { [Function] addYieldHandler: [Function] },
             spawn: [Function],
             promisify: [Function],
             promisifyAll: [Function],
             props: [Function],
             race: [Function],
             reduce: [Function],
             settle: [Function],
             some: [Function],
             _SomePromiseArray: [Function: SomePromiseArray],
             filter: [Function],
             each: [Function],
             mapSeries: [Function: PromiseMapSeries],
             any: [Function],
             noConflict: [Function: noConflict] },
          camelcase: [Function],
          annotation: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          logger: Logger { category: 'PropertiesParser', context: {} } },
        PrototypeAnnotationParser: Prototype {
          annotation: [Function: Prototype],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        QualifierAnnotationParser: QualifierParser {
          annotation: [Function: Qualifier],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        ResourceAnnotationParser: ResourceParser {
          annotation: [Function: Resource],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        ResourceParser: ResourceParser {
          annotation: [Function: Resource],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        RunAnnotationParser: RunParser {
          annotation: [Function: Run],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ServiceAnnotationParser: ServiceParser {
          annotation: [Function: Service],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        StoreAnnotationParser: { [Function: StoreParser]
          annotation: [Function: Store],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        TypeAnnotationParser: type {
          annotation: 
           { [Function: type]
             super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
          doctrine: 
           { version: '3.0.0',
             parse: [Function: parse],
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             unwrapComment: [Function: unwrapComment],
             Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             Error: [Function: DoctrineError],
             type: 
              { Syntax: 
                 { NullableLiteral: 'NullableLiteral',
                   AllLiteral: 'AllLiteral',
                   NullLiteral: 'NullLiteral',
                   UndefinedLiteral: 'UndefinedLiteral',
                   VoidLiteral: 'VoidLiteral',
                   UnionType: 'UnionType',
                   ArrayType: 'ArrayType',
                   RecordType: 'RecordType',
                   FieldType: 'FieldType',
                   FunctionType: 'FunctionType',
                   ParameterType: 'ParameterType',
                   RestType: 'RestType',
                   NonNullableType: 'NonNullableType',
                   OptionalType: 'OptionalType',
                   NullableType: 'NullableType',
                   NameExpression: 'NameExpression',
                   TypeApplication: 'TypeApplication',
                   StringLiteralType: 'StringLiteralType',
                   NumericLiteralType: 'NumericLiteralType',
                   BooleanLiteralType: 'BooleanLiteralType' },
                parseType: [Function: parseType],
                parseParamType: [Function: parseParamType],
                stringify: [Function: stringify] } },
          expressionParser: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } } ],
     stages: 
      [ _AOP_INITIALIZE: 'aop_initialize',
        _AOP_WIRE: 'aop_wire',
        _FINISH_SETUP_: 'finishing bean setup',
        _INHERIT_: 'inherit',
        _INITIALIZE_: 'initialize',
        _INJECT_: 'inject',
        _INSTANTIATE_: 'instantiate',
        _RUN_: 'run',
        _STASHING_: 'stashing' ],
     promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.3',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: { [Function] addYieldHandler: [Function] },
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        noConflict: [Function: noConflict] } },
  Factory: 
   Factory {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     modulePath: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/factory',
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'default', context: {} },
     stacks: [],
     dependencyBuilder: 
      DependencyBuilder {
        logManager: 
         LogManager {
           configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
           categories: 
            { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
              ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
              StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
              DependencyBuilder: 
               { appenders: [ 'default', 'DependencyBuilder' ],
                 level: 'DEBUG' },
              PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
              Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
           logger: Logger { category: 'default', context: {} } },
        logger: Logger { category: 'DependencyBuilder', context: {} },
        glob: 
         { [Function: glob]
           sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
           GlobSync: [Function: GlobSync],
           glob: [Circular],
           hasMagic: [Function],
           Glob: 
            { [Function: Glob]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] } } },
        _: 
         { [Function: lodash]
           templateSettings: 
            { escape: /<%-([\s\S]+?)%>/g,
              evaluate: /<%([\s\S]+?)%>/g,
              interpolate: /<%=([\s\S]+?)%>/g,
              variable: '',
              imports: { _: [Circular] } },
           after: [Function: after],
           ary: [Function: ary],
           assign: [Function],
           assignIn: [Function],
           assignInWith: [Function],
           assignWith: [Function],
           at: [Function],
           before: [Function: before],
           bind: { [Function] placeholder: [Circular] },
           bindAll: [Function],
           bindKey: { [Function] placeholder: [Circular] },
           castArray: [Function: castArray],
           chain: [Function: chain],
           chunk: [Function: chunk],
           compact: [Function: compact],
           concat: [Function: concat],
           cond: [Function: cond],
           conforms: [Function: conforms],
           constant: [Function: constant],
           countBy: [Function],
           create: [Function: create],
           curry: { [Function: curry] placeholder: [Circular] },
           curryRight: { [Function: curryRight] placeholder: [Circular] },
           debounce: [Function: debounce],
           defaults: [Function],
           defaultsDeep: [Function],
           defer: [Function],
           delay: [Function],
           difference: [Function],
           differenceBy: [Function],
           differenceWith: [Function],
           drop: [Function: drop],
           dropRight: [Function: dropRight],
           dropRightWhile: [Function: dropRightWhile],
           dropWhile: [Function: dropWhile],
           fill: [Function: fill],
           filter: [Function: filter],
           flatMap: [Function: flatMap],
           flatMapDeep: [Function: flatMapDeep],
           flatMapDepth: [Function: flatMapDepth],
           flatten: [Function: flatten],
           flattenDeep: [Function: flattenDeep],
           flattenDepth: [Function: flattenDepth],
           flip: [Function: flip],
           flow: [Function],
           flowRight: [Function],
           fromPairs: [Function: fromPairs],
           functions: [Function: functions],
           functionsIn: [Function: functionsIn],
           groupBy: [Function],
           initial: [Function: initial],
           intersection: [Function],
           intersectionBy: [Function],
           intersectionWith: [Function],
           invert: [Function],
           invertBy: [Function],
           invokeMap: [Function],
           iteratee: [Function: iteratee],
           keyBy: [Function],
           keys: [Function: keys],
           keysIn: [Function: keysIn],
           map: [Function: map],
           mapKeys: [Function: mapKeys],
           mapValues: [Function: mapValues],
           matches: [Function: matches],
           matchesProperty: [Function: matchesProperty],
           memoize: { [Function: memoize] Cache: [Function: MapCache] },
           merge: [Function],
           mergeWith: [Function],
           method: [Function],
           methodOf: [Function],
           mixin: [Function: mixin],
           negate: [Function: negate],
           nthArg: [Function: nthArg],
           omit: [Function],
           omitBy: [Function: omitBy],
           once: [Function: once],
           orderBy: [Function: orderBy],
           over: [Function],
           overArgs: [Function],
           overEvery: [Function],
           overSome: [Function],
           partial: { [Function] placeholder: [Circular] },
           partialRight: { [Function] placeholder: [Circular] },
           partition: [Function],
           pick: [Function],
           pickBy: [Function: pickBy],
           property: [Function: property],
           propertyOf: [Function: propertyOf],
           pull: [Function],
           pullAll: [Function: pullAll],
           pullAllBy: [Function: pullAllBy],
           pullAllWith: [Function: pullAllWith],
           pullAt: [Function],
           range: [Function],
           rangeRight: [Function],
           rearg: [Function],
           reject: [Function: reject],
           remove: [Function: remove],
           rest: [Function: rest],
           reverse: [Function: reverse],
           sampleSize: [Function: sampleSize],
           set: [Function: set],
           setWith: [Function: setWith],
           shuffle: [Function: shuffle],
           slice: [Function: slice],
           sortBy: [Function],
           sortedUniq: [Function: sortedUniq],
           sortedUniqBy: [Function: sortedUniqBy],
           split: [Function: split],
           spread: [Function: spread],
           tail: [Function: tail],
           take: [Function: take],
           takeRight: [Function: takeRight],
           takeRightWhile: [Function: takeRightWhile],
           takeWhile: [Function: takeWhile],
           tap: [Function: tap],
           throttle: [Function: throttle],
           thru: [Function: thru],
           toArray: [Function: toArray],
           toPairs: [Function],
           toPairsIn: [Function],
           toPath: [Function: toPath],
           toPlainObject: [Function: toPlainObject],
           transform: [Function: transform],
           unary: [Function: unary],
           union: [Function],
           unionBy: [Function],
           unionWith: [Function],
           uniq: [Function: uniq],
           uniqBy: [Function: uniqBy],
           uniqWith: [Function: uniqWith],
           unset: [Function: unset],
           unzip: [Function: unzip],
           unzipWith: [Function: unzipWith],
           update: [Function: update],
           updateWith: [Function: updateWith],
           values: [Function: values],
           valuesIn: [Function: valuesIn],
           without: [Function],
           words: [Function: words],
           wrap: [Function: wrap],
           xor: [Function],
           xorBy: [Function],
           xorWith: [Function],
           zip: [Function],
           zipObject: [Function: zipObject],
           zipObjectDeep: [Function: zipObjectDeep],
           zipWith: [Function],
           entries: [Function],
           entriesIn: [Function],
           extend: [Function],
           extendWith: [Function],
           add: [Function],
           attempt: [Function],
           camelCase: [Function],
           capitalize: [Function: capitalize],
           ceil: [Function],
           clamp: [Function: clamp],
           clone: [Function: clone],
           cloneDeep: [Function: cloneDeep],
           cloneDeepWith: [Function: cloneDeepWith],
           cloneWith: [Function: cloneWith],
           conformsTo: [Function: conformsTo],
           deburr: [Function: deburr],
           defaultTo: [Function: defaultTo],
           divide: [Function],
           endsWith: [Function: endsWith],
           eq: [Function: eq],
           escape: [Function: escape],
           escapeRegExp: [Function: escapeRegExp],
           every: [Function: every],
           find: [Function],
           findIndex: [Function: findIndex],
           findKey: [Function: findKey],
           findLast: [Function],
           findLastIndex: [Function: findLastIndex],
           findLastKey: [Function: findLastKey],
           floor: [Function],
           forEach: [Function: forEach],
           forEachRight: [Function: forEachRight],
           forIn: [Function: forIn],
           forInRight: [Function: forInRight],
           forOwn: [Function: forOwn],
           forOwnRight: [Function: forOwnRight],
           get: [Function: get],
           gt: [Function],
           gte: [Function],
           has: [Function: has],
           hasIn: [Function: hasIn],
           head: [Function: head],
           identity: [Function: identity],
           includes: [Function: includes],
           indexOf: [Function: indexOf],
           inRange: [Function: inRange],
           invoke: [Function],
           isArguments: [Function: baseIsArguments],
           isArray: [Function: isArray],
           isArrayBuffer: [Function],
           isArrayLike: [Function: isArrayLike],
           isArrayLikeObject: [Function: isArrayLikeObject],
           isBoolean: [Function: isBoolean],
           isBuffer: [Function: isBuffer],
           isDate: [Function],
           isElement: [Function: isElement],
           isEmpty: [Function: isEmpty],
           isEqual: [Function: isEqual],
           isEqualWith: [Function: isEqualWith],
           isError: [Function: isError],
           isFinite: [Function: isFinite],
           isFunction: [Function: isFunction],
           isInteger: [Function: isInteger],
           isLength: [Function: isLength],
           isMap: [Function],
           isMatch: [Function: isMatch],
           isMatchWith: [Function: isMatchWith],
           isNaN: [Function: isNaN],
           isNative: [Function: isNative],
           isNil: [Function: isNil],
           isNull: [Function: isNull],
           isNumber: [Function: isNumber],
           isObject: [Function: isObject],
           isObjectLike: [Function: isObjectLike],
           isPlainObject: [Function: isPlainObject],
           isRegExp: [Function],
           isSafeInteger: [Function: isSafeInteger],
           isSet: [Function],
           isString: [Function: isString],
           isSymbol: [Function: isSymbol],
           isTypedArray: [Function],
           isUndefined: [Function: isUndefined],
           isWeakMap: [Function: isWeakMap],
           isWeakSet: [Function: isWeakSet],
           join: [Function: join],
           kebabCase: [Function],
           last: [Function: last],
           lastIndexOf: [Function: lastIndexOf],
           lowerCase: [Function],
           lowerFirst: [Function],
           lt: [Function],
           lte: [Function],
           max: [Function: max],
           maxBy: [Function: maxBy],
           mean: [Function: mean],
           meanBy: [Function: meanBy],
           min: [Function: min],
           minBy: [Function: minBy],
           stubArray: [Function: stubArray],
           stubFalse: [Function: stubFalse],
           stubObject: [Function: stubObject],
           stubString: [Function: stubString],
           stubTrue: [Function: stubTrue],
           multiply: [Function],
           nth: [Function: nth],
           noConflict: [Function: noConflict],
           noop: [Function: noop],
           now: [Function],
           pad: [Function: pad],
           padEnd: [Function: padEnd],
           padStart: [Function: padStart],
           parseInt: [Function: parseInt],
           random: [Function: random],
           reduce: [Function: reduce],
           reduceRight: [Function: reduceRight],
           repeat: [Function: repeat],
           replace: [Function: replace],
           result: [Function: result],
           round: [Function],
           runInContext: [Function: runInContext],
           sample: [Function: sample],
           size: [Function: size],
           snakeCase: [Function],
           some: [Function: some],
           sortedIndex: [Function: sortedIndex],
           sortedIndexBy: [Function: sortedIndexBy],
           sortedIndexOf: [Function: sortedIndexOf],
           sortedLastIndex: [Function: sortedLastIndex],
           sortedLastIndexBy: [Function: sortedLastIndexBy],
           sortedLastIndexOf: [Function: sortedLastIndexOf],
           startCase: [Function],
           startsWith: [Function: startsWith],
           subtract: [Function],
           sum: [Function: sum],
           sumBy: [Function: sumBy],
           template: [Function: template],
           times: [Function: times],
           toFinite: [Function: toFinite],
           toInteger: [Function: toInteger],
           toLength: [Function: toLength],
           toLower: [Function: toLower],
           toNumber: [Function: toNumber],
           toSafeInteger: [Function: toSafeInteger],
           toString: [Function: toString],
           toUpper: [Function: toUpper],
           trim: [Function: trim],
           trimEnd: [Function: trimEnd],
           trimStart: [Function: trimStart],
           truncate: [Function: truncate],
           unescape: [Function: unescape],
           uniqueId: [Function: uniqueId],
           upperCase: [Function],
           upperFirst: [Function],
           each: [Function: forEach],
           eachRight: [Function: forEachRight],
           first: [Function: head],
           VERSION: '4.17.11',
           _: [Circular] },
        toposort: [Function: Toposort],
        util: 
         { _errnoException: [Function: _errnoException],
           _exceptionWithHostPort: [Function: _exceptionWithHostPort],
           _extend: [Function: _extend],
           callbackify: [Function: callbackify],
           debuglog: [Function: debuglog],
           deprecate: [Function: deprecate],
           format: [Function: format],
           inherits: [Function: inherits],
           inspect: 
            { [Function: inspect]
              custom: Symbol(util.inspect.custom),
              colors: 
               { bold: [ 1, 22 ],
                 italic: [ 3, 23 ],
                 underline: [ 4, 24 ],
                 inverse: [ 7, 27 ],
                 white: [ 37, 39 ],
                 grey: [ 90, 39 ],
                 black: [ 30, 39 ],
                 blue: [ 34, 39 ],
                 cyan: [ 36, 39 ],
                 green: [ 32, 39 ],
                 magenta: [ 35, 39 ],
                 red: [ 31, 39 ],
                 yellow: [ 33, 39 ] },
              styles: 
               { special: 'cyan',
                 number: 'yellow',
                 boolean: 'yellow',
                 undefined: 'grey',
                 null: 'bold',
                 string: 'green',
                 symbol: 'green',
                 date: 'magenta',
                 regexp: 'red' } },
           isArray: [Function: isArray],
           isBoolean: [Function: isBoolean],
           isBuffer: [Function: isBuffer],
           isNull: [Function: isNull],
           isNullOrUndefined: [Function: isNullOrUndefined],
           isNumber: [Function: isNumber],
           isString: [Function: isString],
           isSymbol: [Function: isSymbol],
           isUndefined: [Function: isUndefined],
           isRegExp: [Function: isRegExp],
           isObject: [Function: isObject],
           isDate: [Function: isDate],
           isError: [Function: isError],
           isFunction: [Function: isFunction],
           isPrimitive: [Function: isPrimitive],
           log: [Function: log],
           promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
           TextDecoder: [Function: TextDecoder],
           TextEncoder: [Function: TextEncoder],
           debug: [Function: deprecated],
           error: [Function: deprecated],
           print: [Function: deprecated],
           puts: [Function: deprecated] },
        path: 
         { resolve: [Function: resolve],
           normalize: [Function: normalize],
           isAbsolute: [Function: isAbsolute],
           join: [Function: join],
           relative: [Function: relative],
           _makeLong: [Function: _makeLong],
           dirname: [Function: dirname],
           basename: [Function: basename],
           extname: [Function: extname],
           format: [Function: format],
           parse: [Function: parse],
           sep: '/',
           delimiter: ':',
           win32: 
            { resolve: [Function: resolve],
              normalize: [Function: normalize],
              isAbsolute: [Function: isAbsolute],
              join: [Function: join],
              relative: [Function: relative],
              _makeLong: [Function: _makeLong],
              dirname: [Function: dirname],
              basename: [Function: basename],
              extname: [Function: extname],
              format: [Function: format],
              parse: [Function: parse],
              sep: '\\',
              delimiter: ';',
              win32: [Circular],
              posix: [Circular] },
           posix: [Circular] } },
     esprima: 
      { parse: [Function: parse],
        tokenize: [Function: tokenize],
        Syntax: 
         { AssignmentExpression: 'AssignmentExpression',
           AssignmentPattern: 'AssignmentPattern',
           ArrayExpression: 'ArrayExpression',
           ArrayPattern: 'ArrayPattern',
           ArrowFunctionExpression: 'ArrowFunctionExpression',
           BlockStatement: 'BlockStatement',
           BinaryExpression: 'BinaryExpression',
           BreakStatement: 'BreakStatement',
           CallExpression: 'CallExpression',
           CatchClause: 'CatchClause',
           ClassBody: 'ClassBody',
           ClassDeclaration: 'ClassDeclaration',
           ClassExpression: 'ClassExpression',
           ConditionalExpression: 'ConditionalExpression',
           ContinueStatement: 'ContinueStatement',
           DoWhileStatement: 'DoWhileStatement',
           DebuggerStatement: 'DebuggerStatement',
           EmptyStatement: 'EmptyStatement',
           ExportAllDeclaration: 'ExportAllDeclaration',
           ExportDefaultDeclaration: 'ExportDefaultDeclaration',
           ExportNamedDeclaration: 'ExportNamedDeclaration',
           ExportSpecifier: 'ExportSpecifier',
           ExpressionStatement: 'ExpressionStatement',
           ForStatement: 'ForStatement',
           ForOfStatement: 'ForOfStatement',
           ForInStatement: 'ForInStatement',
           FunctionDeclaration: 'FunctionDeclaration',
           FunctionExpression: 'FunctionExpression',
           Identifier: 'Identifier',
           IfStatement: 'IfStatement',
           ImportDeclaration: 'ImportDeclaration',
           ImportDefaultSpecifier: 'ImportDefaultSpecifier',
           ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
           ImportSpecifier: 'ImportSpecifier',
           Literal: 'Literal',
           LabeledStatement: 'LabeledStatement',
           LogicalExpression: 'LogicalExpression',
           MemberExpression: 'MemberExpression',
           MetaProperty: 'MetaProperty',
           MethodDefinition: 'MethodDefinition',
           NewExpression: 'NewExpression',
           ObjectExpression: 'ObjectExpression',
           ObjectPattern: 'ObjectPattern',
           Program: 'Program',
           Property: 'Property',
           RestElement: 'RestElement',
           ReturnStatement: 'ReturnStatement',
           SequenceExpression: 'SequenceExpression',
           SpreadElement: 'SpreadElement',
           Super: 'Super',
           SwitchCase: 'SwitchCase',
           SwitchStatement: 'SwitchStatement',
           TaggedTemplateExpression: 'TaggedTemplateExpression',
           TemplateElement: 'TemplateElement',
           TemplateLiteral: 'TemplateLiteral',
           ThisExpression: 'ThisExpression',
           ThrowStatement: 'ThrowStatement',
           TryStatement: 'TryStatement',
           UnaryExpression: 'UnaryExpression',
           UpdateExpression: 'UpdateExpression',
           VariableDeclaration: 'VariableDeclaration',
           VariableDeclarator: 'VariableDeclarator',
           WhileStatement: 'WhileStatement',
           WithStatement: 'WithStatement',
           YieldExpression: 'YieldExpression' },
        version: '3.1.3' },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: 
         { resolve: [Function: resolve],
           normalize: [Function: normalize],
           isAbsolute: [Function: isAbsolute],
           join: [Function: join],
           relative: [Function: relative],
           _makeLong: [Function: _makeLong],
           dirname: [Function: dirname],
           basename: [Function: basename],
           extname: [Function: extname],
           format: [Function: format],
           parse: [Function: parse],
           sep: '\\',
           delimiter: ';',
           win32: [Circular],
           posix: [Circular] },
        posix: [Circular] },
     estraverse: 
      { version: '4.2.0',
        Syntax: 
         { AssignmentExpression: 'AssignmentExpression',
           AssignmentPattern: 'AssignmentPattern',
           ArrayExpression: 'ArrayExpression',
           ArrayPattern: 'ArrayPattern',
           ArrowFunctionExpression: 'ArrowFunctionExpression',
           AwaitExpression: 'AwaitExpression',
           BlockStatement: 'BlockStatement',
           BinaryExpression: 'BinaryExpression',
           BreakStatement: 'BreakStatement',
           CallExpression: 'CallExpression',
           CatchClause: 'CatchClause',
           ClassBody: 'ClassBody',
           ClassDeclaration: 'ClassDeclaration',
           ClassExpression: 'ClassExpression',
           ComprehensionBlock: 'ComprehensionBlock',
           ComprehensionExpression: 'ComprehensionExpression',
           ConditionalExpression: 'ConditionalExpression',
           ContinueStatement: 'ContinueStatement',
           DebuggerStatement: 'DebuggerStatement',
           DirectiveStatement: 'DirectiveStatement',
           DoWhileStatement: 'DoWhileStatement',
           EmptyStatement: 'EmptyStatement',
           ExportAllDeclaration: 'ExportAllDeclaration',
           ExportDefaultDeclaration: 'ExportDefaultDeclaration',
           ExportNamedDeclaration: 'ExportNamedDeclaration',
           ExportSpecifier: 'ExportSpecifier',
           ExpressionStatement: 'ExpressionStatement',
           ForStatement: 'ForStatement',
           ForInStatement: 'ForInStatement',
           ForOfStatement: 'ForOfStatement',
           FunctionDeclaration: 'FunctionDeclaration',
           FunctionExpression: 'FunctionExpression',
           GeneratorExpression: 'GeneratorExpression',
           Identifier: 'Identifier',
           IfStatement: 'IfStatement',
           ImportDeclaration: 'ImportDeclaration',
           ImportDefaultSpecifier: 'ImportDefaultSpecifier',
           ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
           ImportSpecifier: 'ImportSpecifier',
           Literal: 'Literal',
           LabeledStatement: 'LabeledStatement',
           LogicalExpression: 'LogicalExpression',
           MemberExpression: 'MemberExpression',
           MetaProperty: 'MetaProperty',
           MethodDefinition: 'MethodDefinition',
           ModuleSpecifier: 'ModuleSpecifier',
           NewExpression: 'NewExpression',
           ObjectExpression: 'ObjectExpression',
           ObjectPattern: 'ObjectPattern',
           Program: 'Program',
           Property: 'Property',
           RestElement: 'RestElement',
           ReturnStatement: 'ReturnStatement',
           SequenceExpression: 'SequenceExpression',
           SpreadElement: 'SpreadElement',
           Super: 'Super',
           SwitchStatement: 'SwitchStatement',
           SwitchCase: 'SwitchCase',
           TaggedTemplateExpression: 'TaggedTemplateExpression',
           TemplateElement: 'TemplateElement',
           TemplateLiteral: 'TemplateLiteral',
           ThisExpression: 'ThisExpression',
           ThrowStatement: 'ThrowStatement',
           TryStatement: 'TryStatement',
           UnaryExpression: 'UnaryExpression',
           UpdateExpression: 'UpdateExpression',
           VariableDeclaration: 'VariableDeclaration',
           VariableDeclarator: 'VariableDeclarator',
           WhileStatement: 'WhileStatement',
           WithStatement: 'WithStatement',
           YieldExpression: 'YieldExpression' },
        traverse: [Function: traverse],
        replace: [Function: replace],
        attachComments: [Function: attachComments],
        VisitorKeys: 
         { AssignmentExpression: [ 'left', 'right' ],
           AssignmentPattern: [ 'left', 'right' ],
           ArrayExpression: [ 'elements' ],
           ArrayPattern: [ 'elements' ],
           ArrowFunctionExpression: [ 'params', 'body' ],
           AwaitExpression: [ 'argument' ],
           BlockStatement: [ 'body' ],
           BinaryExpression: [ 'left', 'right' ],
           BreakStatement: [ 'label' ],
           CallExpression: [ 'callee', 'arguments' ],
           CatchClause: [ 'param', 'body' ],
           ClassBody: [ 'body' ],
           ClassDeclaration: [ 'id', 'superClass', 'body' ],
           ClassExpression: [ 'id', 'superClass', 'body' ],
           ComprehensionBlock: [ 'left', 'right' ],
           ComprehensionExpression: [ 'blocks', 'filter', 'body' ],
           ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
           ContinueStatement: [ 'label' ],
           DebuggerStatement: [],
           DirectiveStatement: [],
           DoWhileStatement: [ 'body', 'test' ],
           EmptyStatement: [],
           ExportAllDeclaration: [ 'source' ],
           ExportDefaultDeclaration: [ 'declaration' ],
           ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
           ExportSpecifier: [ 'exported', 'local' ],
           ExpressionStatement: [ 'expression' ],
           ForStatement: [ 'init', 'test', 'update', 'body' ],
           ForInStatement: [ 'left', 'right', 'body' ],
           ForOfStatement: [ 'left', 'right', 'body' ],
           FunctionDeclaration: [ 'id', 'params', 'body' ],
           FunctionExpression: [ 'id', 'params', 'body' ],
           GeneratorExpression: [ 'blocks', 'filter', 'body' ],
           Identifier: [],
           IfStatement: [ 'test', 'consequent', 'alternate' ],
           ImportDeclaration: [ 'specifiers', 'source' ],
           ImportDefaultSpecifier: [ 'local' ],
           ImportNamespaceSpecifier: [ 'local' ],
           ImportSpecifier: [ 'imported', 'local' ],
           Literal: [],
           LabeledStatement: [ 'label', 'body' ],
           LogicalExpression: [ 'left', 'right' ],
           MemberExpression: [ 'object', 'property' ],
           MetaProperty: [ 'meta', 'property' ],
           MethodDefinition: [ 'key', 'value' ],
           ModuleSpecifier: [],
           NewExpression: [ 'callee', 'arguments' ],
           ObjectExpression: [ 'properties' ],
           ObjectPattern: [ 'properties' ],
           Program: [ 'body' ],
           Property: [ 'key', 'value' ],
           RestElement: [ 'argument' ],
           ReturnStatement: [ 'argument' ],
           SequenceExpression: [ 'expressions' ],
           SpreadElement: [ 'argument' ],
           Super: [],
           SwitchStatement: [ 'discriminant', 'cases' ],
           SwitchCase: [ 'test', 'consequent' ],
           TaggedTemplateExpression: [ 'tag', 'quasi' ],
           TemplateElement: [],
           TemplateLiteral: [ 'quasis', 'expressions' ],
           ThisExpression: [],
           ThrowStatement: [ 'argument' ],
           TryStatement: [ 'block', 'handler', 'finalizer' ],
           UnaryExpression: [ 'argument' ],
           UpdateExpression: [ 'argument' ],
           VariableDeclaration: [ 'declarations' ],
           VariableDeclarator: [ 'id', 'init' ],
           WhileStatement: [ 'test', 'body' ],
           WithStatement: [ 'object', 'body' ],
           YieldExpression: [ 'argument' ] },
        VisitorOption: { Break: {}, Skip: {}, Remove: {} },
        Controller: [Function: Controller],
        cloneEnvironment: [Function] },
     stages: 
      [ _AOP_INITIALIZE: 'aop_initialize',
        _AOP_WIRE: 'aop_wire',
        _FINISH_SETUP_: 'finishing bean setup',
        _INHERIT_: 'inherit',
        _INITIALIZE_: 'initialize',
        _INJECT_: 'inject',
        _INSTANTIATE_: 'instantiate',
        _RUN_: 'run',
        _STASHING_: 'stashing' ] },
  BaseAnnotationParser: [Function: BaseAnnotationParser],
  BeanAnnotationParserPrototype: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] },
  Esprima: 
   { parse: [Function: parse],
     tokenize: [Function: tokenize],
     Syntax: 
      { AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression' },
     version: '3.1.3' },
  Util: 
   { _errnoException: [Function: _errnoException],
     _exceptionWithHostPort: [Function: _exceptionWithHostPort],
     _extend: [Function: _extend],
     callbackify: [Function: callbackify],
     debuglog: [Function: debuglog],
     deprecate: [Function: deprecate],
     format: [Function: format],
     inherits: [Function: inherits],
     inspect: 
      { [Function: inspect]
        custom: Symbol(util.inspect.custom),
        colors: 
         { bold: [ 1, 22 ],
           italic: [ 3, 23 ],
           underline: [ 4, 24 ],
           inverse: [ 7, 27 ],
           white: [ 37, 39 ],
           grey: [ 90, 39 ],
           black: [ 30, 39 ],
           blue: [ 34, 39 ],
           cyan: [ 36, 39 ],
           green: [ 32, 39 ],
           magenta: [ 35, 39 ],
           red: [ 31, 39 ],
           yellow: [ 33, 39 ] },
        styles: 
         { special: 'cyan',
           number: 'yellow',
           boolean: 'yellow',
           undefined: 'grey',
           null: 'bold',
           string: 'green',
           symbol: 'green',
           date: 'magenta',
           regexp: 'red' } },
     isArray: [Function: isArray],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isNull: [Function: isNull],
     isNullOrUndefined: [Function: isNullOrUndefined],
     isNumber: [Function: isNumber],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isUndefined: [Function: isUndefined],
     isRegExp: [Function: isRegExp],
     isObject: [Function: isObject],
     isDate: [Function: isDate],
     isError: [Function: isError],
     isFunction: [Function: isFunction],
     isPrimitive: [Function: isPrimitive],
     log: [Function: log],
     promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
     TextDecoder: [Function: TextDecoder],
     TextEncoder: [Function: TextEncoder],
     debug: [Function: deprecated],
     error: [Function: deprecated],
     print: [Function: deprecated],
     puts: [Function: deprecated] },
  Path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '\\',
        delimiter: ';',
        win32: [Circular],
        posix: [Circular] },
     posix: [Circular] },
  Lodash: 
   { [Function: lodash]
     templateSettings: 
      { escape: /<%-([\s\S]+?)%>/g,
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        variable: '',
        imports: { _: [Circular] } },
     after: [Function: after],
     ary: [Function: ary],
     assign: [Function],
     assignIn: [Function],
     assignInWith: [Function],
     assignWith: [Function],
     at: [Function],
     before: [Function: before],
     bind: { [Function] placeholder: [Circular] },
     bindAll: [Function],
     bindKey: { [Function] placeholder: [Circular] },
     castArray: [Function: castArray],
     chain: [Function: chain],
     chunk: [Function: chunk],
     compact: [Function: compact],
     concat: [Function: concat],
     cond: [Function: cond],
     conforms: [Function: conforms],
     constant: [Function: constant],
     countBy: [Function],
     create: [Function: create],
     curry: { [Function: curry] placeholder: [Circular] },
     curryRight: { [Function: curryRight] placeholder: [Circular] },
     debounce: [Function: debounce],
     defaults: [Function],
     defaultsDeep: [Function],
     defer: [Function],
     delay: [Function],
     difference: [Function],
     differenceBy: [Function],
     differenceWith: [Function],
     drop: [Function: drop],
     dropRight: [Function: dropRight],
     dropRightWhile: [Function: dropRightWhile],
     dropWhile: [Function: dropWhile],
     fill: [Function: fill],
     filter: [Function: filter],
     flatMap: [Function: flatMap],
     flatMapDeep: [Function: flatMapDeep],
     flatMapDepth: [Function: flatMapDepth],
     flatten: [Function: flatten],
     flattenDeep: [Function: flattenDeep],
     flattenDepth: [Function: flattenDepth],
     flip: [Function: flip],
     flow: [Function],
     flowRight: [Function],
     fromPairs: [Function: fromPairs],
     functions: [Function: functions],
     functionsIn: [Function: functionsIn],
     groupBy: [Function],
     initial: [Function: initial],
     intersection: [Function],
     intersectionBy: [Function],
     intersectionWith: [Function],
     invert: [Function],
     invertBy: [Function],
     invokeMap: [Function],
     iteratee: [Function: iteratee],
     keyBy: [Function],
     keys: [Function: keys],
     keysIn: [Function: keysIn],
     map: [Function: map],
     mapKeys: [Function: mapKeys],
     mapValues: [Function: mapValues],
     matches: [Function: matches],
     matchesProperty: [Function: matchesProperty],
     memoize: { [Function: memoize] Cache: [Function: MapCache] },
     merge: [Function],
     mergeWith: [Function],
     method: [Function],
     methodOf: [Function],
     mixin: [Function: mixin],
     negate: [Function: negate],
     nthArg: [Function: nthArg],
     omit: [Function],
     omitBy: [Function: omitBy],
     once: [Function: once],
     orderBy: [Function: orderBy],
     over: [Function],
     overArgs: [Function],
     overEvery: [Function],
     overSome: [Function],
     partial: { [Function] placeholder: [Circular] },
     partialRight: { [Function] placeholder: [Circular] },
     partition: [Function],
     pick: [Function],
     pickBy: [Function: pickBy],
     property: [Function: property],
     propertyOf: [Function: propertyOf],
     pull: [Function],
     pullAll: [Function: pullAll],
     pullAllBy: [Function: pullAllBy],
     pullAllWith: [Function: pullAllWith],
     pullAt: [Function],
     range: [Function],
     rangeRight: [Function],
     rearg: [Function],
     reject: [Function: reject],
     remove: [Function: remove],
     rest: [Function: rest],
     reverse: [Function: reverse],
     sampleSize: [Function: sampleSize],
     set: [Function: set],
     setWith: [Function: setWith],
     shuffle: [Function: shuffle],
     slice: [Function: slice],
     sortBy: [Function],
     sortedUniq: [Function: sortedUniq],
     sortedUniqBy: [Function: sortedUniqBy],
     split: [Function: split],
     spread: [Function: spread],
     tail: [Function: tail],
     take: [Function: take],
     takeRight: [Function: takeRight],
     takeRightWhile: [Function: takeRightWhile],
     takeWhile: [Function: takeWhile],
     tap: [Function: tap],
     throttle: [Function: throttle],
     thru: [Function: thru],
     toArray: [Function: toArray],
     toPairs: [Function],
     toPairsIn: [Function],
     toPath: [Function: toPath],
     toPlainObject: [Function: toPlainObject],
     transform: [Function: transform],
     unary: [Function: unary],
     union: [Function],
     unionBy: [Function],
     unionWith: [Function],
     uniq: [Function: uniq],
     uniqBy: [Function: uniqBy],
     uniqWith: [Function: uniqWith],
     unset: [Function: unset],
     unzip: [Function: unzip],
     unzipWith: [Function: unzipWith],
     update: [Function: update],
     updateWith: [Function: updateWith],
     values: [Function: values],
     valuesIn: [Function: valuesIn],
     without: [Function],
     words: [Function: words],
     wrap: [Function: wrap],
     xor: [Function],
     xorBy: [Function],
     xorWith: [Function],
     zip: [Function],
     zipObject: [Function: zipObject],
     zipObjectDeep: [Function: zipObjectDeep],
     zipWith: [Function],
     entries: [Function],
     entriesIn: [Function],
     extend: [Function],
     extendWith: [Function],
     add: [Function],
     attempt: [Function],
     camelCase: [Function],
     capitalize: [Function: capitalize],
     ceil: [Function],
     clamp: [Function: clamp],
     clone: [Function: clone],
     cloneDeep: [Function: cloneDeep],
     cloneDeepWith: [Function: cloneDeepWith],
     cloneWith: [Function: cloneWith],
     conformsTo: [Function: conformsTo],
     deburr: [Function: deburr],
     defaultTo: [Function: defaultTo],
     divide: [Function],
     endsWith: [Function: endsWith],
     eq: [Function: eq],
     escape: [Function: escape],
     escapeRegExp: [Function: escapeRegExp],
     every: [Function: every],
     find: [Function],
     findIndex: [Function: findIndex],
     findKey: [Function: findKey],
     findLast: [Function],
     findLastIndex: [Function: findLastIndex],
     findLastKey: [Function: findLastKey],
     floor: [Function],
     forEach: [Function: forEach],
     forEachRight: [Function: forEachRight],
     forIn: [Function: forIn],
     forInRight: [Function: forInRight],
     forOwn: [Function: forOwn],
     forOwnRight: [Function: forOwnRight],
     get: [Function: get],
     gt: [Function],
     gte: [Function],
     has: [Function: has],
     hasIn: [Function: hasIn],
     head: [Function: head],
     identity: [Function: identity],
     includes: [Function: includes],
     indexOf: [Function: indexOf],
     inRange: [Function: inRange],
     invoke: [Function],
     isArguments: [Function: baseIsArguments],
     isArray: [Function: isArray],
     isArrayBuffer: [Function],
     isArrayLike: [Function: isArrayLike],
     isArrayLikeObject: [Function: isArrayLikeObject],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isDate: [Function],
     isElement: [Function: isElement],
     isEmpty: [Function: isEmpty],
     isEqual: [Function: isEqual],
     isEqualWith: [Function: isEqualWith],
     isError: [Function: isError],
     isFinite: [Function: isFinite],
     isFunction: [Function: isFunction],
     isInteger: [Function: isInteger],
     isLength: [Function: isLength],
     isMap: [Function],
     isMatch: [Function: isMatch],
     isMatchWith: [Function: isMatchWith],
     isNaN: [Function: isNaN],
     isNative: [Function: isNative],
     isNil: [Function: isNil],
     isNull: [Function: isNull],
     isNumber: [Function: isNumber],
     isObject: [Function: isObject],
     isObjectLike: [Function: isObjectLike],
     isPlainObject: [Function: isPlainObject],
     isRegExp: [Function],
     isSafeInteger: [Function: isSafeInteger],
     isSet: [Function],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isTypedArray: [Function],
     isUndefined: [Function: isUndefined],
     isWeakMap: [Function: isWeakMap],
     isWeakSet: [Function: isWeakSet],
     join: [Function: join],
     kebabCase: [Function],
     last: [Function: last],
     lastIndexOf: [Function: lastIndexOf],
     lowerCase: [Function],
     lowerFirst: [Function],
     lt: [Function],
     lte: [Function],
     max: [Function: max],
     maxBy: [Function: maxBy],
     mean: [Function: mean],
     meanBy: [Function: meanBy],
     min: [Function: min],
     minBy: [Function: minBy],
     stubArray: [Function: stubArray],
     stubFalse: [Function: stubFalse],
     stubObject: [Function: stubObject],
     stubString: [Function: stubString],
     stubTrue: [Function: stubTrue],
     multiply: [Function],
     nth: [Function: nth],
     noConflict: [Function: noConflict],
     noop: [Function: noop],
     now: [Function],
     pad: [Function: pad],
     padEnd: [Function: padEnd],
     padStart: [Function: padStart],
     parseInt: [Function: parseInt],
     random: [Function: random],
     reduce: [Function: reduce],
     reduceRight: [Function: reduceRight],
     repeat: [Function: repeat],
     replace: [Function: replace],
     result: [Function: result],
     round: [Function],
     runInContext: [Function: runInContext],
     sample: [Function: sample],
     size: [Function: size],
     snakeCase: [Function],
     some: [Function: some],
     sortedIndex: [Function: sortedIndex],
     sortedIndexBy: [Function: sortedIndexBy],
     sortedIndexOf: [Function: sortedIndexOf],
     sortedLastIndex: [Function: sortedLastIndex],
     sortedLastIndexBy: [Function: sortedLastIndexBy],
     sortedLastIndexOf: [Function: sortedLastIndexOf],
     startCase: [Function],
     startsWith: [Function: startsWith],
     subtract: [Function],
     sum: [Function: sum],
     sumBy: [Function: sumBy],
     template: [Function: template],
     times: [Function: times],
     toFinite: [Function: toFinite],
     toInteger: [Function: toInteger],
     toLength: [Function: toLength],
     toLower: [Function: toLower],
     toNumber: [Function: toNumber],
     toSafeInteger: [Function: toSafeInteger],
     toString: [Function: toString],
     toUpper: [Function: toUpper],
     trim: [Function: trim],
     trimEnd: [Function: trimEnd],
     trimStart: [Function: trimStart],
     truncate: [Function: truncate],
     unescape: [Function: unescape],
     uniqueId: [Function: uniqueId],
     upperCase: [Function],
     upperFirst: [Function],
     each: [Function: forEach],
     eachRight: [Function: forEachRight],
     first: [Function: head],
     VERSION: '4.17.11',
     _: [Circular] },
  Estraverse: 
   { version: '4.2.0',
     Syntax: 
      { AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',
        ComprehensionExpression: 'ComprehensionExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression' },
     traverse: [Function: traverse],
     replace: [Function: replace],
     attachComments: [Function: attachComments],
     VisitorKeys: 
      { AssignmentExpression: [ 'left', 'right' ],
        AssignmentPattern: [ 'left', 'right' ],
        ArrayExpression: [ 'elements' ],
        ArrayPattern: [ 'elements' ],
        ArrowFunctionExpression: [ 'params', 'body' ],
        AwaitExpression: [ 'argument' ],
        BlockStatement: [ 'body' ],
        BinaryExpression: [ 'left', 'right' ],
        BreakStatement: [ 'label' ],
        CallExpression: [ 'callee', 'arguments' ],
        CatchClause: [ 'param', 'body' ],
        ClassBody: [ 'body' ],
        ClassDeclaration: [ 'id', 'superClass', 'body' ],
        ClassExpression: [ 'id', 'superClass', 'body' ],
        ComprehensionBlock: [ 'left', 'right' ],
        ComprehensionExpression: [ 'blocks', 'filter', 'body' ],
        ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
        ContinueStatement: [ 'label' ],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: [ 'body', 'test' ],
        EmptyStatement: [],
        ExportAllDeclaration: [ 'source' ],
        ExportDefaultDeclaration: [ 'declaration' ],
        ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
        ExportSpecifier: [ 'exported', 'local' ],
        ExpressionStatement: [ 'expression' ],
        ForStatement: [ 'init', 'test', 'update', 'body' ],
        ForInStatement: [ 'left', 'right', 'body' ],
        ForOfStatement: [ 'left', 'right', 'body' ],
        FunctionDeclaration: [ 'id', 'params', 'body' ],
        FunctionExpression: [ 'id', 'params', 'body' ],
        GeneratorExpression: [ 'blocks', 'filter', 'body' ],
        Identifier: [],
        IfStatement: [ 'test', 'consequent', 'alternate' ],
        ImportDeclaration: [ 'specifiers', 'source' ],
        ImportDefaultSpecifier: [ 'local' ],
        ImportNamespaceSpecifier: [ 'local' ],
        ImportSpecifier: [ 'imported', 'local' ],
        Literal: [],
        LabeledStatement: [ 'label', 'body' ],
        LogicalExpression: [ 'left', 'right' ],
        MemberExpression: [ 'object', 'property' ],
        MetaProperty: [ 'meta', 'property' ],
        MethodDefinition: [ 'key', 'value' ],
        ModuleSpecifier: [],
        NewExpression: [ 'callee', 'arguments' ],
        ObjectExpression: [ 'properties' ],
        ObjectPattern: [ 'properties' ],
        Program: [ 'body' ],
        Property: [ 'key', 'value' ],
        RestElement: [ 'argument' ],
        ReturnStatement: [ 'argument' ],
        SequenceExpression: [ 'expressions' ],
        SpreadElement: [ 'argument' ],
        Super: [],
        SwitchStatement: [ 'discriminant', 'cases' ],
        SwitchCase: [ 'test', 'consequent' ],
        TaggedTemplateExpression: [ 'tag', 'quasi' ],
        TemplateElement: [],
        TemplateLiteral: [ 'quasis', 'expressions' ],
        ThisExpression: [],
        ThrowStatement: [ 'argument' ],
        TryStatement: [ 'block', 'handler', 'finalizer' ],
        UnaryExpression: [ 'argument' ],
        UpdateExpression: [ 'argument' ],
        VariableDeclaration: [ 'declarations' ],
        VariableDeclarator: [ 'id', 'init' ],
        WhileStatement: [ 'test', 'body' ],
        WithStatement: [ 'object', 'body' ],
        YieldExpression: [ 'argument' ] },
     VisitorOption: { Break: {}, Skip: {}, Remove: {} },
     Controller: [Function: Controller],
     cloneEnvironment: [Function] },
  Bluebird: 
   { [Function: Promise]
     TypeError: [Function: TypeError],
     RangeError: [Function: RangeError],
     CancellationError: [Function: SubError],
     TimeoutError: [Function: SubError],
     OperationalError: [Function: OperationalError],
     RejectionError: [Function: OperationalError],
     AggregateError: [Function: SubError],
     _peekContext: [Function],
     onPossiblyUnhandledRejection: [Function],
     onUnhandledRejectionHandled: [Function],
     longStackTraces: [Function],
     hasLongStackTraces: [Function],
     config: [Function],
     getNewLibraryCopy: [Function],
     is: [Function],
     fromCallback: [Function],
     fromNode: [Function],
     all: [Function],
     cast: [Function],
     fulfilled: [Function],
     resolve: [Function],
     rejected: [Function],
     reject: [Function],
     setScheduler: [Function],
     pending: [Function],
     defer: [Function],
     method: [Function],
     try: [Function],
     attempt: [Function],
     bind: [Function],
     PromiseInspection: [Function: PromiseInspection],
     join: [Function],
     Promise: [Circular],
     version: '3.5.3',
     map: [Function],
     using: [Function],
     delay: [Function],
     coroutine: { [Function] addYieldHandler: [Function] },
     spawn: [Function],
     promisify: [Function],
     promisifyAll: [Function],
     props: [Function],
     race: [Function],
     reduce: [Function],
     settle: [Function],
     some: [Function],
     _SomePromiseArray: [Function: SomePromiseArray],
     filter: [Function],
     each: [Function],
     mapSeries: [Function: PromiseMapSeries],
     any: [Function],
     noConflict: [Function: noConflict] },
  FS: 
   { constants: 
      { O_RDONLY: 0,
        O_WRONLY: 1,
        O_RDWR: 2,
        S_IFMT: 61440,
        S_IFREG: 32768,
        S_IFDIR: 16384,
        S_IFCHR: 8192,
        S_IFBLK: 24576,
        S_IFIFO: 4096,
        S_IFLNK: 40960,
        S_IFSOCK: 49152,
        O_CREAT: 512,
        O_EXCL: 2048,
        O_NOCTTY: 131072,
        O_TRUNC: 1024,
        O_APPEND: 8,
        O_DIRECTORY: 1048576,
        O_NOFOLLOW: 256,
        O_SYNC: 128,
        O_DSYNC: 4194304,
        O_SYMLINK: 2097152,
        O_NONBLOCK: 4,
        S_IRWXU: 448,
        S_IRUSR: 256,
        S_IWUSR: 128,
        S_IXUSR: 64,
        S_IRWXG: 56,
        S_IRGRP: 32,
        S_IWGRP: 16,
        S_IXGRP: 8,
        S_IRWXO: 7,
        S_IROTH: 4,
        S_IWOTH: 2,
        S_IXOTH: 1,
        F_OK: 0,
        R_OK: 4,
        W_OK: 2,
        X_OK: 1,
        UV_FS_COPYFILE_EXCL: 1,
        COPYFILE_EXCL: 1 },
     Stats: [Function: Stats],
     F_OK: 0,
     R_OK: 4,
     W_OK: 2,
     X_OK: 1,
     access: [Function],
     accessSync: [Function],
     exists: [Function],
     existsSync: [Function],
     readFile: [Function],
     readFileSync: [Function],
     close: [Function],
     closeSync: [Function],
     open: [Function],
     openSync: [Function],
     read: [Function],
     readSync: [Function],
     write: [Function],
     writeSync: [Function],
     rename: [Function],
     renameSync: [Function],
     truncate: [Function],
     truncateSync: [Function],
     ftruncate: [Function],
     ftruncateSync: [Function],
     rmdir: [Function],
     rmdirSync: [Function],
     fdatasync: [Function],
     fdatasyncSync: [Function],
     fsync: [Function],
     fsyncSync: [Function],
     mkdir: [Function],
     mkdirSync: [Function],
     readdir: [Function],
     readdirSync: [Function],
     fstat: [Function],
     lstat: [Function],
     stat: [Function],
     fstatSync: [Function],
     lstatSync: [Function],
     statSync: [Function],
     readlink: [Function],
     readlinkSync: [Function],
     symlink: [Function],
     symlinkSync: [Function],
     link: [Function],
     linkSync: [Function],
     unlink: [Function],
     unlinkSync: [Function],
     fchmod: [Function],
     fchmodSync: [Function],
     lchmod: [Function],
     lchmodSync: [Function],
     chmod: [Function],
     chmodSync: [Function],
     lchown: [Function],
     lchownSync: [Function],
     fchown: [Function],
     fchownSync: [Function],
     chown: [Function],
     chownSync: [Function],
     _toUnixTimestamp: [Function: toUnixTimestamp],
     utimes: [Function],
     utimesSync: [Function],
     futimes: [Function],
     futimesSync: [Function],
     writeFile: [Function],
     writeFileSync: [Function],
     appendFile: [Function],
     appendFileSync: [Function],
     watch: [Function],
     watchFile: [Function],
     unwatchFile: [Function],
     realpathSync: [Function: realpathSync],
     realpath: [Function: realpath],
     mkdtemp: [Function],
     mkdtempSync: [Function],
     copyFile: [Function],
     copyFileSync: [Function],
     createReadStream: [Function],
     ReadStream: 
      { [Function: ReadStream]
        super_: 
         { [Function: Readable]
           ReadableState: [Function: ReadableState],
           super_: 
            { [Function: Stream]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] },
              Readable: [Circular],
              Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
              Duplex: { [Function: Duplex] super_: [Circular] },
              Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
              PassThrough: 
               { [Function: PassThrough]
                 super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
              Stream: [Circular],
              _isUint8Array: [Function: isUint8Array],
              _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
           _fromList: [Function: fromList] } },
     FileReadStream: 
      { [Function: ReadStream]
        super_: 
         { [Function: Readable]
           ReadableState: [Function: ReadableState],
           super_: 
            { [Function: Stream]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] },
              Readable: [Circular],
              Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
              Duplex: { [Function: Duplex] super_: [Circular] },
              Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
              PassThrough: 
               { [Function: PassThrough]
                 super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
              Stream: [Circular],
              _isUint8Array: [Function: isUint8Array],
              _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
           _fromList: [Function: fromList] } },
     createWriteStream: [Function],
     WriteStream: 
      { [Function: WriteStream]
        super_: 
         { [Function: Writable]
           WritableState: [Function: WritableState],
           super_: 
            { [Function: Stream]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] },
              Readable: 
               { [Function: Readable]
                 ReadableState: [Function: ReadableState],
                 super_: [Circular],
                 _fromList: [Function: fromList] },
              Writable: [Circular],
              Duplex: 
               { [Function: Duplex]
                 super_: 
                  { [Function: Readable]
                    ReadableState: [Function: ReadableState],
                    super_: [Circular],
                    _fromList: [Function: fromList] } },
              Transform: 
               { [Function: Transform]
                 super_: 
                  { [Function: Duplex]
                    super_: 
                     { [Function: Readable]
                       ReadableState: [Function: ReadableState],
                       super_: [Circular],
                       _fromList: [Function: fromList] } } },
              PassThrough: 
               { [Function: PassThrough]
                 super_: 
                  { [Function: Transform]
                    super_: 
                     { [Function: Duplex]
                       super_: 
                        { [Function: Readable]
                          ReadableState: [Function: ReadableState],
                          super_: [Circular],
                          _fromList: [Function: fromList] } } } },
              Stream: [Circular],
              _isUint8Array: [Function: isUint8Array],
              _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
     FileWriteStream: 
      { [Function: WriteStream]
        super_: 
         { [Function: Writable]
           WritableState: [Function: WritableState],
           super_: 
            { [Function: Stream]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] },
              Readable: 
               { [Function: Readable]
                 ReadableState: [Function: ReadableState],
                 super_: [Circular],
                 _fromList: [Function: fromList] },
              Writable: [Circular],
              Duplex: 
               { [Function: Duplex]
                 super_: 
                  { [Function: Readable]
                    ReadableState: [Function: ReadableState],
                    super_: [Circular],
                    _fromList: [Function: fromList] } },
              Transform: 
               { [Function: Transform]
                 super_: 
                  { [Function: Duplex]
                    super_: 
                     { [Function: Readable]
                       ReadableState: [Function: ReadableState],
                       super_: [Circular],
                       _fromList: [Function: fromList] } } },
              PassThrough: 
               { [Function: PassThrough]
                 super_: 
                  { [Function: Transform]
                    super_: 
                     { [Function: Duplex]
                       super_: 
                        { [Function: Readable]
                          ReadableState: [Function: ReadableState],
                          super_: [Circular],
                          _fromList: [Function: fromList] } } } },
              Stream: [Circular],
              _isUint8Array: [Function: isUint8Array],
              _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
  Glob: 
   { [Function: glob]
     sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
     GlobSync: [Function: GlobSync],
     glob: [Circular],
     hasMagic: [Function],
     Glob: 
      { [Function: Glob]
        super_: 
         { [Function: EventEmitter]
           EventEmitter: [Circular],
           usingDomains: false,
           defaultMaxListeners: [Getter/Setter],
           init: [Function],
           listenerCount: [Function] } } },
  Toposort: [Function: Toposort],
  Beautify: 
   { [Function: beautify]
     js: { [Function: js_beautify] defaultOptions: [Function] },
     css: { [Function: css_beautify] defaultOptions: [Function] },
     html: { [Function: style_html] defaultOptions: [Function] },
     js_beautify: { [Function: js_beautify] defaultOptions: [Function] },
     css_beautify: { [Function: css_beautify] defaultOptions: [Function] },
     html_beautify: { [Function: style_html] defaultOptions: [Function] } },
  Wildcard: [Function],
  Md5: [Function],
  CamelCase: [Function],
  Doctrine: 
   { version: '3.0.0',
     parse: [Function: parse],
     parseType: [Function: parseType],
     parseParamType: [Function: parseParamType],
     unwrapComment: [Function: unwrapComment],
     Syntax: 
      { NullableLiteral: 'NullableLiteral',
        AllLiteral: 'AllLiteral',
        NullLiteral: 'NullLiteral',
        UndefinedLiteral: 'UndefinedLiteral',
        VoidLiteral: 'VoidLiteral',
        UnionType: 'UnionType',
        ArrayType: 'ArrayType',
        RecordType: 'RecordType',
        FieldType: 'FieldType',
        FunctionType: 'FunctionType',
        ParameterType: 'ParameterType',
        RestType: 'RestType',
        NonNullableType: 'NonNullableType',
        OptionalType: 'OptionalType',
        NullableType: 'NullableType',
        NameExpression: 'NameExpression',
        TypeApplication: 'TypeApplication',
        StringLiteralType: 'StringLiteralType',
        NumericLiteralType: 'NumericLiteralType',
        BooleanLiteralType: 'BooleanLiteralType' },
     Error: [Function: DoctrineError],
     type: 
      { Syntax: 
         { NullableLiteral: 'NullableLiteral',
           AllLiteral: 'AllLiteral',
           NullLiteral: 'NullLiteral',
           UndefinedLiteral: 'UndefinedLiteral',
           VoidLiteral: 'VoidLiteral',
           UnionType: 'UnionType',
           ArrayType: 'ArrayType',
           RecordType: 'RecordType',
           FieldType: 'FieldType',
           FunctionType: 'FunctionType',
           ParameterType: 'ParameterType',
           RestType: 'RestType',
           NonNullableType: 'NonNullableType',
           OptionalType: 'OptionalType',
           NullableType: 'NullableType',
           NameExpression: 'NameExpression',
           TypeApplication: 'TypeApplication',
           StringLiteralType: 'StringLiteralType',
           NumericLiteralType: 'NumericLiteralType',
           BooleanLiteralType: 'BooleanLiteralType' },
        parseType: [Function: parseType],
        parseParamType: [Function: parseParamType],
        stringify: [Function: stringify] } },
  PropertiesReader: 
   { parse: [Function],
     stringify: [Function],
     createStringifier: [Function: createStringifier] },
  XML2js: 
   { defaults: 
      { '0.1': 
         { explicitCharkey: false,
           trim: true,
           normalize: true,
           normalizeTags: false,
           attrkey: '@',
           charkey: '#',
           explicitArray: false,
           ignoreAttrs: false,
           mergeAttrs: false,
           explicitRoot: false,
           validator: null,
           xmlns: false,
           explicitChildren: false,
           childkey: '@@',
           charsAsChildren: false,
           includeWhiteChars: false,
           async: false,
           strict: true,
           attrNameProcessors: null,
           attrValueProcessors: null,
           tagNameProcessors: null,
           valueProcessors: null,
           emptyTag: '' },
        '0.2': 
         { explicitCharkey: false,
           trim: false,
           normalize: false,
           normalizeTags: false,
           attrkey: '$',
           charkey: '_',
           explicitArray: true,
           ignoreAttrs: false,
           mergeAttrs: false,
           explicitRoot: true,
           validator: null,
           xmlns: false,
           explicitChildren: false,
           preserveChildrenOrder: false,
           childkey: '$$',
           charsAsChildren: false,
           includeWhiteChars: false,
           async: false,
           strict: true,
           attrNameProcessors: null,
           attrValueProcessors: null,
           tagNameProcessors: null,
           valueProcessors: null,
           rootName: 'root',
           xmldec: { version: '1.0', encoding: 'UTF-8', standalone: true },
           doctype: null,
           renderOpts: { pretty: true, indent: '  ', newline: '\n' },
           headless: false,
           chunkSize: 10000,
           emptyTag: '',
           cdata: false } },
     processors: 
      { normalize: [Function],
        firstCharLowerCase: [Function],
        stripPrefix: [Function],
        parseNumbers: [Function],
        parseBooleans: [Function] },
     ValidationError: { [Function: ValidationError] stackTraceLimit: Infinity, __super__: Error {} },
     Builder: [Function: Builder],
     Parser: 
      { [Function: Parser]
        EventEmitter: 
         { [Function: EventEmitter]
           EventEmitter: [Circular],
           usingDomains: false,
           defaultMaxListeners: [Getter/Setter],
           init: [Function],
           listenerCount: [Function] },
        usingDomains: false,
        defaultMaxListeners: 10,
        init: [Function],
        listenerCount: [Function],
        __super__: 
         EventEmitter {
           domain: undefined,
           _events: undefined,
           _maxListeners: undefined,
           setMaxListeners: [Function: setMaxListeners],
           getMaxListeners: [Function: getMaxListeners],
           emit: [Function: emit],
           addListener: [Function: addListener],
           on: [Function: addListener],
           prependListener: [Function: prependListener],
           once: [Function: once],
           prependOnceListener: [Function: prependOnceListener],
           removeListener: [Function: removeListener],
           removeAllListeners: [Function: removeAllListeners],
           listeners: [Function: listeners],
           listenerCount: [Function: listenerCount],
           eventNames: [Function: eventNames] } },
     parseString: [Function] },
  Init: [Function: Init],
  Qualifier: [Function: Qualifier],
  Bean: [Function: Bean],
  Resource: [Function: Resource],
  After: [Function: After],
  Aspect: [Function: Aspect],
  Before: [Function: Before],
  PointCut: [Function: PointCut],
  Inherits: [Function: Inherits],
  Autowire: [Function: Autowire],
  Inject: [Function: Inject],
  Store: [Function: Store],
  Component: [Function: Component],
  Configuration: [Function: Configuration],
  Context: [Function: Context],
  Controller: [Function: Controller],
  Prototype: [Function: Prototype],
  Service: [Function: Service],
  Param: [Function: param],
  Type: 
   { [Function: type]
     super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
  Namespace: [Function: Namespace],
  Properties: [Function: Properties],
  Run: [Function: Run] }
[2019-01-01T19:38:39.856] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:38:39.857] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:38:39.857] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:39.857] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:38:39.857] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:39.857] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:38:39.857] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:39.857] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:38:40.178] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:38:40.179] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:38:40.179] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:38:40.196] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:38:40.236] [TRACE] Foundation -     Received context: { phase: 
   [ _BUILD_CONTEXT_: '0x2',
     _BUILD_FINISHED_: '0x4',
     _BUILD_PLUGIN_FINISHED_: '0x8',
     _BUILD_STRUCTURE_: '0x1',
     _FINAL_APPLICATION_CONTEXT_: '0xFF',
     _FINAL_PLUGIN_CONTEXT_: '0xFE' ],
  stages: 
   [ _AOP_INITIALIZE: 'aop_initialize',
     _AOP_WIRE: 'aop_wire',
     _FINISH_SETUP_: 'finishing bean setup',
     _INHERIT_: 'inherit',
     _INITIALIZE_: 'initialize',
     _INJECT_: 'inject',
     _INSTANTIATE_: 'instantiate',
     _RUN_: 'run',
     _STASHING_: 'stashing' ],
  LogManager: 
   LogManager {
     configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
     categories: 
      { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
        ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
        StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
        DependencyBuilder: 
         { appenders: [ 'default', 'DependencyBuilder' ],
           level: 'DEBUG' },
        PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
        Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
     logger: Logger { category: 'default', context: {} } },
  StaticMemberExpressionIdentifierMatch: [Function: StaticMemberExpressionIdentifierMatch],
  VariableDecorationStaticMemberExpressionIdentifierMatch: [Function: VariableDecorationStaticMemberExpressionIdentifierMatch],
  Diagram: [AsyncFunction: draw],
  TokenParser: 
   [ Block: [Function: Block],
     CallExpression: [Function: CallExpression],
     ClassDeclaration: [Function: ClassDeclaration],
     ExpressionStatement: [Function: ExpressionStatement],
     FunctionDeclaration: [Function: FunctionDeclaration],
     Line: [Function: Line],
     MemberExpression: [Function: MemberExpression],
     MethodDefinition: [Function: MethodDefinition],
     Property: [Function: Property],
     VariableDeclaration: [Function: VariableDeclaration] ],
  PropertiesProcessors: 
   [ { [Function: XMLPropertiesProcessor]
       Promise: 
        { [Function: Promise]
          TypeError: [Function: TypeError],
          RangeError: [Function: RangeError],
          CancellationError: [Function: SubError],
          TimeoutError: [Function: SubError],
          OperationalError: [Function: OperationalError],
          RejectionError: [Function: OperationalError],
          AggregateError: [Function: SubError],
          _peekContext: [Function],
          onPossiblyUnhandledRejection: [Function],
          onUnhandledRejectionHandled: [Function],
          longStackTraces: [Function],
          hasLongStackTraces: [Function],
          config: [Function],
          getNewLibraryCopy: [Function],
          is: [Function],
          fromCallback: [Function],
          fromNode: [Function],
          all: [Function],
          cast: [Function],
          fulfilled: [Function],
          resolve: [Function],
          rejected: [Function],
          reject: [Function],
          setScheduler: [Function],
          pending: [Function],
          defer: [Function],
          method: [Function],
          try: [Function],
          attempt: [Function],
          bind: [Function],
          PromiseInspection: [Function: PromiseInspection],
          join: [Function],
          Promise: [Circular],
          version: '3.5.3',
          map: [Function],
          using: [Function],
          delay: [Function],
          coroutine: { [Function] addYieldHandler: [Function] },
          spawn: [Function],
          promisify: [Function],
          promisifyAll: [Function],
          props: [Function],
          race: [Function],
          reduce: [Function],
          settle: [Function],
          some: [Function],
          _SomePromiseArray: [Function: SomePromiseArray],
          filter: [Function],
          each: [Function],
          mapSeries: [Function: PromiseMapSeries],
          any: [Function],
          noConflict: [Function: noConflict] },
       propertiesReader: 
        { parse: [Function],
          stringify: [Function],
          createStringifier: [Function: createStringifier] } },
     { [Function: JsonPropertiesProcessor]
       Promise: 
        { [Function: Promise]
          TypeError: [Function: TypeError],
          RangeError: [Function: RangeError],
          CancellationError: [Function: SubError],
          TimeoutError: [Function: SubError],
          OperationalError: [Function: OperationalError],
          RejectionError: [Function: OperationalError],
          AggregateError: [Function: SubError],
          _peekContext: [Function],
          onPossiblyUnhandledRejection: [Function],
          onUnhandledRejectionHandled: [Function],
          longStackTraces: [Function],
          hasLongStackTraces: [Function],
          config: [Function],
          getNewLibraryCopy: [Function],
          is: [Function],
          fromCallback: [Function],
          fromNode: [Function],
          all: [Function],
          cast: [Function],
          fulfilled: [Function],
          resolve: [Function],
          rejected: [Function],
          reject: [Function],
          setScheduler: [Function],
          pending: [Function],
          defer: [Function],
          method: [Function],
          try: [Function],
          attempt: [Function],
          bind: [Function],
          PromiseInspection: [Function: PromiseInspection],
          join: [Function],
          Promise: [Circular],
          version: '3.5.3',
          map: [Function],
          using: [Function],
          delay: [Function],
          coroutine: { [Function] addYieldHandler: [Function] },
          spawn: [Function],
          promisify: [Function],
          promisifyAll: [Function],
          props: [Function],
          race: [Function],
          reduce: [Function],
          settle: [Function],
          some: [Function],
          _SomePromiseArray: [Function: SomePromiseArray],
          filter: [Function],
          each: [Function],
          mapSeries: [Function: PromiseMapSeries],
          any: [Function],
          noConflict: [Function: noConflict] } },
     { [Function: XMLPropertiesProcessor]
       Promise: 
        { [Function: Promise]
          TypeError: [Function: TypeError],
          RangeError: [Function: RangeError],
          CancellationError: [Function: SubError],
          TimeoutError: [Function: SubError],
          OperationalError: [Function: OperationalError],
          RejectionError: [Function: OperationalError],
          AggregateError: [Function: SubError],
          _peekContext: [Function],
          onPossiblyUnhandledRejection: [Function],
          onUnhandledRejectionHandled: [Function],
          longStackTraces: [Function],
          hasLongStackTraces: [Function],
          config: [Function],
          getNewLibraryCopy: [Function],
          is: [Function],
          fromCallback: [Function],
          fromNode: [Function],
          all: [Function],
          cast: [Function],
          fulfilled: [Function],
          resolve: [Function],
          rejected: [Function],
          reject: [Function],
          setScheduler: [Function],
          pending: [Function],
          defer: [Function],
          method: [Function],
          try: [Function],
          attempt: [Function],
          bind: [Function],
          PromiseInspection: [Function: PromiseInspection],
          join: [Function],
          Promise: [Circular],
          version: '3.5.3',
          map: [Function],
          using: [Function],
          delay: [Function],
          coroutine: { [Function] addYieldHandler: [Function] },
          spawn: [Function],
          promisify: [Function],
          promisifyAll: [Function],
          props: [Function],
          race: [Function],
          reduce: [Function],
          settle: [Function],
          some: [Function],
          _SomePromiseArray: [Function: SomePromiseArray],
          filter: [Function],
          each: [Function],
          mapSeries: [Function: PromiseMapSeries],
          any: [Function],
          noConflict: [Function: noConflict] } } ],
  PropertiesAnnotationParserInstance: 
   PropertiesParser {
     processors: 
      { '.properties': 
         { [Function: XMLPropertiesProcessor]
           Promise: 
            { [Function: Promise]
              TypeError: [Function: TypeError],
              RangeError: [Function: RangeError],
              CancellationError: [Function: SubError],
              TimeoutError: [Function: SubError],
              OperationalError: [Function: OperationalError],
              RejectionError: [Function: OperationalError],
              AggregateError: [Function: SubError],
              _peekContext: [Function],
              onPossiblyUnhandledRejection: [Function],
              onUnhandledRejectionHandled: [Function],
              longStackTraces: [Function],
              hasLongStackTraces: [Function],
              config: [Function],
              getNewLibraryCopy: [Function],
              is: [Function],
              fromCallback: [Function],
              fromNode: [Function],
              all: [Function],
              cast: [Function],
              fulfilled: [Function],
              resolve: [Function],
              rejected: [Function],
              reject: [Function],
              setScheduler: [Function],
              pending: [Function],
              defer: [Function],
              method: [Function],
              try: [Function],
              attempt: [Function],
              bind: [Function],
              PromiseInspection: [Function: PromiseInspection],
              join: [Function],
              Promise: [Circular],
              version: '3.5.3',
              map: [Function],
              using: [Function],
              delay: [Function],
              coroutine: { [Function] addYieldHandler: [Function] },
              spawn: [Function],
              promisify: [Function],
              promisifyAll: [Function],
              props: [Function],
              race: [Function],
              reduce: [Function],
              settle: [Function],
              some: [Function],
              _SomePromiseArray: [Function: SomePromiseArray],
              filter: [Function],
              each: [Function],
              mapSeries: [Function: PromiseMapSeries],
              any: [Function],
              noConflict: [Function: noConflict] },
           propertiesReader: 
            { parse: [Function],
              stringify: [Function],
              createStringifier: [Function: createStringifier] } },
        '.json': 
         { [Function: JsonPropertiesProcessor]
           Promise: 
            { [Function: Promise]
              TypeError: [Function: TypeError],
              RangeError: [Function: RangeError],
              CancellationError: [Function: SubError],
              TimeoutError: [Function: SubError],
              OperationalError: [Function: OperationalError],
              RejectionError: [Function: OperationalError],
              AggregateError: [Function: SubError],
              _peekContext: [Function],
              onPossiblyUnhandledRejection: [Function],
              onUnhandledRejectionHandled: [Function],
              longStackTraces: [Function],
              hasLongStackTraces: [Function],
              config: [Function],
              getNewLibraryCopy: [Function],
              is: [Function],
              fromCallback: [Function],
              fromNode: [Function],
              all: [Function],
              cast: [Function],
              fulfilled: [Function],
              resolve: [Function],
              rejected: [Function],
              reject: [Function],
              setScheduler: [Function],
              pending: [Function],
              defer: [Function],
              method: [Function],
              try: [Function],
              attempt: [Function],
              bind: [Function],
              PromiseInspection: [Function: PromiseInspection],
              join: [Function],
              Promise: [Circular],
              version: '3.5.3',
              map: [Function],
              using: [Function],
              delay: [Function],
              coroutine: { [Function] addYieldHandler: [Function] },
              spawn: [Function],
              promisify: [Function],
              promisifyAll: [Function],
              props: [Function],
              race: [Function],
              reduce: [Function],
              settle: [Function],
              some: [Function],
              _SomePromiseArray: [Function: SomePromiseArray],
              filter: [Function],
              each: [Function],
              mapSeries: [Function: PromiseMapSeries],
              any: [Function],
              noConflict: [Function: noConflict] } },
        '.xml': 
         { [Function: XMLPropertiesProcessor]
           Promise: 
            { [Function: Promise]
              TypeError: [Function: TypeError],
              RangeError: [Function: RangeError],
              CancellationError: [Function: SubError],
              TimeoutError: [Function: SubError],
              OperationalError: [Function: OperationalError],
              RejectionError: [Function: OperationalError],
              AggregateError: [Function: SubError],
              _peekContext: [Function],
              onPossiblyUnhandledRejection: [Function],
              onUnhandledRejectionHandled: [Function],
              longStackTraces: [Function],
              hasLongStackTraces: [Function],
              config: [Function],
              getNewLibraryCopy: [Function],
              is: [Function],
              fromCallback: [Function],
              fromNode: [Function],
              all: [Function],
              cast: [Function],
              fulfilled: [Function],
              resolve: [Function],
              rejected: [Function],
              reject: [Function],
              setScheduler: [Function],
              pending: [Function],
              defer: [Function],
              method: [Function],
              try: [Function],
              attempt: [Function],
              bind: [Function],
              PromiseInspection: [Function: PromiseInspection],
              join: [Function],
              Promise: [Circular],
              version: '3.5.3',
              map: [Function],
              using: [Function],
              delay: [Function],
              coroutine: { [Function] addYieldHandler: [Function] },
              spawn: [Function],
              promisify: [Function],
              promisifyAll: [Function],
              props: [Function],
              race: [Function],
              reduce: [Function],
              settle: [Function],
              some: [Function],
              _SomePromiseArray: [Function: SomePromiseArray],
              filter: [Function],
              each: [Function],
              mapSeries: [Function: PromiseMapSeries],
              any: [Function],
              noConflict: [Function: noConflict] } } },
     glob: 
      { [Function: glob]
        sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
        GlobSync: [Function: GlobSync],
        glob: [Circular],
        hasMagic: [Function],
        Glob: 
         { [Function: Glob]
           super_: 
            { [Function: EventEmitter]
              EventEmitter: [Circular],
              usingDomains: false,
              defaultMaxListeners: [Getter/Setter],
              init: [Function],
              listenerCount: [Function] } } },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: 
         { resolve: [Function: resolve],
           normalize: [Function: normalize],
           isAbsolute: [Function: isAbsolute],
           join: [Function: join],
           relative: [Function: relative],
           _makeLong: [Function: _makeLong],
           dirname: [Function: dirname],
           basename: [Function: basename],
           extname: [Function: extname],
           format: [Function: format],
           parse: [Function: parse],
           sep: '\\',
           delimiter: ';',
           win32: [Circular],
           posix: [Circular] },
        posix: [Circular] },
     fs: 
      { constants: 
         { O_RDONLY: 0,
           O_WRONLY: 1,
           O_RDWR: 2,
           S_IFMT: 61440,
           S_IFREG: 32768,
           S_IFDIR: 16384,
           S_IFCHR: 8192,
           S_IFBLK: 24576,
           S_IFIFO: 4096,
           S_IFLNK: 40960,
           S_IFSOCK: 49152,
           O_CREAT: 512,
           O_EXCL: 2048,
           O_NOCTTY: 131072,
           O_TRUNC: 1024,
           O_APPEND: 8,
           O_DIRECTORY: 1048576,
           O_NOFOLLOW: 256,
           O_SYNC: 128,
           O_DSYNC: 4194304,
           O_SYMLINK: 2097152,
           O_NONBLOCK: 4,
           S_IRWXU: 448,
           S_IRUSR: 256,
           S_IWUSR: 128,
           S_IXUSR: 64,
           S_IRWXG: 56,
           S_IRGRP: 32,
           S_IWGRP: 16,
           S_IXGRP: 8,
           S_IRWXO: 7,
           S_IROTH: 4,
           S_IWOTH: 2,
           S_IXOTH: 1,
           F_OK: 0,
           R_OK: 4,
           W_OK: 2,
           X_OK: 1,
           UV_FS_COPYFILE_EXCL: 1,
           COPYFILE_EXCL: 1 },
        Stats: [Function: Stats],
        F_OK: 0,
        R_OK: 4,
        W_OK: 2,
        X_OK: 1,
        access: [Function],
        accessSync: [Function],
        exists: [Function],
        existsSync: [Function],
        readFile: [Function],
        readFileSync: [Function],
        close: [Function],
        closeSync: [Function],
        open: [Function],
        openSync: [Function],
        read: [Function],
        readSync: [Function],
        write: [Function],
        writeSync: [Function],
        rename: [Function],
        renameSync: [Function],
        truncate: [Function],
        truncateSync: [Function],
        ftruncate: [Function],
        ftruncateSync: [Function],
        rmdir: [Function],
        rmdirSync: [Function],
        fdatasync: [Function],
        fdatasyncSync: [Function],
        fsync: [Function],
        fsyncSync: [Function],
        mkdir: [Function],
        mkdirSync: [Function],
        readdir: [Function],
        readdirSync: [Function],
        fstat: [Function],
        lstat: [Function],
        stat: [Function],
        fstatSync: [Function],
        lstatSync: [Function],
        statSync: [Function],
        readlink: [Function],
        readlinkSync: [Function],
        symlink: [Function],
        symlinkSync: [Function],
        link: [Function],
        linkSync: [Function],
        unlink: [Function],
        unlinkSync: [Function],
        fchmod: [Function],
        fchmodSync: [Function],
        lchmod: [Function],
        lchmodSync: [Function],
        chmod: [Function],
        chmodSync: [Function],
        lchown: [Function],
        lchownSync: [Function],
        fchown: [Function],
        fchownSync: [Function],
        chown: [Function],
        chownSync: [Function],
        _toUnixTimestamp: [Function: toUnixTimestamp],
        utimes: [Function],
        utimesSync: [Function],
        futimes: [Function],
        futimesSync: [Function],
        writeFile: [Function],
        writeFileSync: [Function],
        appendFile: [Function],
        appendFileSync: [Function],
        watch: [Function],
        watchFile: [Function],
        unwatchFile: [Function],
        realpathSync: [Function: realpathSync],
        realpath: [Function: realpath],
        mkdtemp: [Function],
        mkdtempSync: [Function],
        copyFile: [Function],
        copyFileSync: [Function],
        createReadStream: [Function],
        ReadStream: 
         { [Function: ReadStream]
           super_: 
            { [Function: Readable]
              ReadableState: [Function: ReadableState],
              super_: 
               { [Function: Stream]
                 super_: 
                  { [Function: EventEmitter]
                    EventEmitter: [Circular],
                    usingDomains: false,
                    defaultMaxListeners: [Getter/Setter],
                    init: [Function],
                    listenerCount: [Function] },
                 Readable: [Circular],
                 Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                 Duplex: { [Function: Duplex] super_: [Circular] },
                 Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                 PassThrough: 
                  { [Function: PassThrough]
                    super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
              _fromList: [Function: fromList] } },
        FileReadStream: 
         { [Function: ReadStream]
           super_: 
            { [Function: Readable]
              ReadableState: [Function: ReadableState],
              super_: 
               { [Function: Stream]
                 super_: 
                  { [Function: EventEmitter]
                    EventEmitter: [Circular],
                    usingDomains: false,
                    defaultMaxListeners: [Getter/Setter],
                    init: [Function],
                    listenerCount: [Function] },
                 Readable: [Circular],
                 Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                 Duplex: { [Function: Duplex] super_: [Circular] },
                 Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                 PassThrough: 
                  { [Function: PassThrough]
                    super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
              _fromList: [Function: fromList] } },
        createWriteStream: [Function],
        WriteStream: 
         { [Function: WriteStream]
           super_: 
            { [Function: Writable]
              WritableState: [Function: WritableState],
              super_: 
               { [Function: Stream]
                 super_: 
                  { [Function: EventEmitter]
                    EventEmitter: [Circular],
                    usingDomains: false,
                    defaultMaxListeners: [Getter/Setter],
                    init: [Function],
                    listenerCount: [Function] },
                 Readable: 
                  { [Function: Readable]
                    ReadableState: [Function: ReadableState],
                    super_: [Circular],
                    _fromList: [Function: fromList] },
                 Writable: [Circular],
                 Duplex: 
                  { [Function: Duplex]
                    super_: 
                     { [Function: Readable]
                       ReadableState: [Function: ReadableState],
                       super_: [Circular],
                       _fromList: [Function: fromList] } },
                 Transform: 
                  { [Function: Transform]
                    super_: 
                     { [Function: Duplex]
                       super_: 
                        { [Function: Readable]
                          ReadableState: [Function: ReadableState],
                          super_: [Circular],
                          _fromList: [Function: fromList] } } },
                 PassThrough: 
                  { [Function: PassThrough]
                    super_: 
                     { [Function: Transform]
                       super_: 
                        { [Function: Duplex]
                          super_: 
                           { [Function: Readable]
                             ReadableState: [Function: ReadableState],
                             super_: [Circular],
                             _fromList: [Function: fromList] } } } },
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
        FileWriteStream: 
         { [Function: WriteStream]
           super_: 
            { [Function: Writable]
              WritableState: [Function: WritableState],
              super_: 
               { [Function: Stream]
                 super_: 
                  { [Function: EventEmitter]
                    EventEmitter: [Circular],
                    usingDomains: false,
                    defaultMaxListeners: [Getter/Setter],
                    init: [Function],
                    listenerCount: [Function] },
                 Readable: 
                  { [Function: Readable]
                    ReadableState: [Function: ReadableState],
                    super_: [Circular],
                    _fromList: [Function: fromList] },
                 Writable: [Circular],
                 Duplex: 
                  { [Function: Duplex]
                    super_: 
                     { [Function: Readable]
                       ReadableState: [Function: ReadableState],
                       super_: [Circular],
                       _fromList: [Function: fromList] } },
                 Transform: 
                  { [Function: Transform]
                    super_: 
                     { [Function: Duplex]
                       super_: 
                        { [Function: Readable]
                          ReadableState: [Function: ReadableState],
                          super_: [Circular],
                          _fromList: [Function: fromList] } } },
                 PassThrough: 
                  { [Function: PassThrough]
                    super_: 
                     { [Function: Transform]
                       super_: 
                        { [Function: Duplex]
                          super_: 
                           { [Function: Readable]
                             ReadableState: [Function: ReadableState],
                             super_: [Circular],
                             _fromList: [Function: fromList] } } } },
                 Stream: [Circular],
                 _isUint8Array: [Function: isUint8Array],
                 _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.3',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: { [Function] addYieldHandler: [Function] },
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        noConflict: [Function: noConflict] },
     camelcase: [Function],
     annotation: undefined,
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'PropertiesParser', context: {} } },
  AnnotationParser: 
   [ AfterAnnotationParser: AfterAnnotationParser {
       annotation: [Function: After],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     AspectAnnotationParser: AspectParser {
       annotation: [Function: Aspect],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     AutowireAnnotationParser: { [Function: AutowrieAnnotationParser]
       QualifierAnnotation: [Function: Qualifier],
       annotation: [Function: Autowire],
       camelcase: [Function],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     BeanAnnotationParser: BeanParser {
       annotation: [Function: Bean],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     BeforeAnnotationParser: BeforeAnnotationParser {
       annotation: [Function: Before],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ComponentAnnotationParser: ComponentParser {
       annotation: [Function: Component],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ConfigurationAnnotationParser: ConfigurationParser {
       annotation: [Function: Configuration],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ContextAnnotationParser: ContextParser {
       annotation: [Function: Context],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ControllerAnnotationParser: ControllerParser {
       annotation: [Function: Controller],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     InheritsAnnotationParser: InheritsAnnotationParser {
       globals: [],
       annotation: [Function: Inherits],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     InitAnnotationParser: InitParser {
       annotation: [Function: Init],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     NamespaceAnnotationParser: NamespaceParser {
       annotation: [Function: Namespace],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ParamAnnotationParser: { [Function: paramParser]
       annotation: [Function: param],
       doctrine: 
        { version: '3.0.0',
          parse: [Function: parse],
          parseType: [Function: parseType],
          parseParamType: [Function: parseParamType],
          unwrapComment: [Function: unwrapComment],
          Syntax: 
           { NullableLiteral: 'NullableLiteral',
             AllLiteral: 'AllLiteral',
             NullLiteral: 'NullLiteral',
             UndefinedLiteral: 'UndefinedLiteral',
             VoidLiteral: 'VoidLiteral',
             UnionType: 'UnionType',
             ArrayType: 'ArrayType',
             RecordType: 'RecordType',
             FieldType: 'FieldType',
             FunctionType: 'FunctionType',
             ParameterType: 'ParameterType',
             RestType: 'RestType',
             NonNullableType: 'NonNullableType',
             OptionalType: 'OptionalType',
             NullableType: 'NullableType',
             NameExpression: 'NameExpression',
             TypeApplication: 'TypeApplication',
             StringLiteralType: 'StringLiteralType',
             NumericLiteralType: 'NumericLiteralType',
             BooleanLiteralType: 'BooleanLiteralType' },
          Error: [Function: DoctrineError],
          type: 
           { Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             stringify: [Function: stringify] } },
       expressionParser: undefined,
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     PointCuteAnnotationParser: PointCutParser {
       wildcard: [Function],
       md5: [Function],
       annotation: [Function: PointCut],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     PropertiesAnnotationParser: PropertiesParser {
       processors: 
        { '.properties': 
           { [Function: XMLPropertiesProcessor]
             Promise: 
              { [Function: Promise]
                TypeError: [Function: TypeError],
                RangeError: [Function: RangeError],
                CancellationError: [Function: SubError],
                TimeoutError: [Function: SubError],
                OperationalError: [Function: OperationalError],
                RejectionError: [Function: OperationalError],
                AggregateError: [Function: SubError],
                _peekContext: [Function],
                onPossiblyUnhandledRejection: [Function],
                onUnhandledRejectionHandled: [Function],
                longStackTraces: [Function],
                hasLongStackTraces: [Function],
                config: [Function],
                getNewLibraryCopy: [Function],
                is: [Function],
                fromCallback: [Function],
                fromNode: [Function],
                all: [Function],
                cast: [Function],
                fulfilled: [Function],
                resolve: [Function],
                rejected: [Function],
                reject: [Function],
                setScheduler: [Function],
                pending: [Function],
                defer: [Function],
                method: [Function],
                try: [Function],
                attempt: [Function],
                bind: [Function],
                PromiseInspection: [Function: PromiseInspection],
                join: [Function],
                Promise: [Circular],
                version: '3.5.3',
                map: [Function],
                using: [Function],
                delay: [Function],
                coroutine: { [Function] addYieldHandler: [Function] },
                spawn: [Function],
                promisify: [Function],
                promisifyAll: [Function],
                props: [Function],
                race: [Function],
                reduce: [Function],
                settle: [Function],
                some: [Function],
                _SomePromiseArray: [Function: SomePromiseArray],
                filter: [Function],
                each: [Function],
                mapSeries: [Function: PromiseMapSeries],
                any: [Function],
                noConflict: [Function: noConflict] },
             propertiesReader: 
              { parse: [Function],
                stringify: [Function],
                createStringifier: [Function: createStringifier] } },
          '.json': 
           { [Function: JsonPropertiesProcessor]
             Promise: 
              { [Function: Promise]
                TypeError: [Function: TypeError],
                RangeError: [Function: RangeError],
                CancellationError: [Function: SubError],
                TimeoutError: [Function: SubError],
                OperationalError: [Function: OperationalError],
                RejectionError: [Function: OperationalError],
                AggregateError: [Function: SubError],
                _peekContext: [Function],
                onPossiblyUnhandledRejection: [Function],
                onUnhandledRejectionHandled: [Function],
                longStackTraces: [Function],
                hasLongStackTraces: [Function],
                config: [Function],
                getNewLibraryCopy: [Function],
                is: [Function],
                fromCallback: [Function],
                fromNode: [Function],
                all: [Function],
                cast: [Function],
                fulfilled: [Function],
                resolve: [Function],
                rejected: [Function],
                reject: [Function],
                setScheduler: [Function],
                pending: [Function],
                defer: [Function],
                method: [Function],
                try: [Function],
                attempt: [Function],
                bind: [Function],
                PromiseInspection: [Function: PromiseInspection],
                join: [Function],
                Promise: [Circular],
                version: '3.5.3',
                map: [Function],
                using: [Function],
                delay: [Function],
                coroutine: { [Function] addYieldHandler: [Function] },
                spawn: [Function],
                promisify: [Function],
                promisifyAll: [Function],
                props: [Function],
                race: [Function],
                reduce: [Function],
                settle: [Function],
                some: [Function],
                _SomePromiseArray: [Function: SomePromiseArray],
                filter: [Function],
                each: [Function],
                mapSeries: [Function: PromiseMapSeries],
                any: [Function],
                noConflict: [Function: noConflict] } },
          '.xml': 
           { [Function: XMLPropertiesProcessor]
             Promise: 
              { [Function: Promise]
                TypeError: [Function: TypeError],
                RangeError: [Function: RangeError],
                CancellationError: [Function: SubError],
                TimeoutError: [Function: SubError],
                OperationalError: [Function: OperationalError],
                RejectionError: [Function: OperationalError],
                AggregateError: [Function: SubError],
                _peekContext: [Function],
                onPossiblyUnhandledRejection: [Function],
                onUnhandledRejectionHandled: [Function],
                longStackTraces: [Function],
                hasLongStackTraces: [Function],
                config: [Function],
                getNewLibraryCopy: [Function],
                is: [Function],
                fromCallback: [Function],
                fromNode: [Function],
                all: [Function],
                cast: [Function],
                fulfilled: [Function],
                resolve: [Function],
                rejected: [Function],
                reject: [Function],
                setScheduler: [Function],
                pending: [Function],
                defer: [Function],
                method: [Function],
                try: [Function],
                attempt: [Function],
                bind: [Function],
                PromiseInspection: [Function: PromiseInspection],
                join: [Function],
                Promise: [Circular],
                version: '3.5.3',
                map: [Function],
                using: [Function],
                delay: [Function],
                coroutine: { [Function] addYieldHandler: [Function] },
                spawn: [Function],
                promisify: [Function],
                promisifyAll: [Function],
                props: [Function],
                race: [Function],
                reduce: [Function],
                settle: [Function],
                some: [Function],
                _SomePromiseArray: [Function: SomePromiseArray],
                filter: [Function],
                each: [Function],
                mapSeries: [Function: PromiseMapSeries],
                any: [Function],
                noConflict: [Function: noConflict] } } },
       glob: 
        { [Function: glob]
          sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
          GlobSync: [Function: GlobSync],
          glob: [Circular],
          hasMagic: [Function],
          Glob: 
           { [Function: Glob]
             super_: 
              { [Function: EventEmitter]
                EventEmitter: [Circular],
                usingDomains: false,
                defaultMaxListeners: [Getter/Setter],
                init: [Function],
                listenerCount: [Function] } } },
       path: 
        { resolve: [Function: resolve],
          normalize: [Function: normalize],
          isAbsolute: [Function: isAbsolute],
          join: [Function: join],
          relative: [Function: relative],
          _makeLong: [Function: _makeLong],
          dirname: [Function: dirname],
          basename: [Function: basename],
          extname: [Function: extname],
          format: [Function: format],
          parse: [Function: parse],
          sep: '/',
          delimiter: ':',
          win32: 
           { resolve: [Function: resolve],
             normalize: [Function: normalize],
             isAbsolute: [Function: isAbsolute],
             join: [Function: join],
             relative: [Function: relative],
             _makeLong: [Function: _makeLong],
             dirname: [Function: dirname],
             basename: [Function: basename],
             extname: [Function: extname],
             format: [Function: format],
             parse: [Function: parse],
             sep: '\\',
             delimiter: ';',
             win32: [Circular],
             posix: [Circular] },
          posix: [Circular] },
       fs: 
        { constants: 
           { O_RDONLY: 0,
             O_WRONLY: 1,
             O_RDWR: 2,
             S_IFMT: 61440,
             S_IFREG: 32768,
             S_IFDIR: 16384,
             S_IFCHR: 8192,
             S_IFBLK: 24576,
             S_IFIFO: 4096,
             S_IFLNK: 40960,
             S_IFSOCK: 49152,
             O_CREAT: 512,
             O_EXCL: 2048,
             O_NOCTTY: 131072,
             O_TRUNC: 1024,
             O_APPEND: 8,
             O_DIRECTORY: 1048576,
             O_NOFOLLOW: 256,
             O_SYNC: 128,
             O_DSYNC: 4194304,
             O_SYMLINK: 2097152,
             O_NONBLOCK: 4,
             S_IRWXU: 448,
             S_IRUSR: 256,
             S_IWUSR: 128,
             S_IXUSR: 64,
             S_IRWXG: 56,
             S_IRGRP: 32,
             S_IWGRP: 16,
             S_IXGRP: 8,
             S_IRWXO: 7,
             S_IROTH: 4,
             S_IWOTH: 2,
             S_IXOTH: 1,
             F_OK: 0,
             R_OK: 4,
             W_OK: 2,
             X_OK: 1,
             UV_FS_COPYFILE_EXCL: 1,
             COPYFILE_EXCL: 1 },
          Stats: [Function: Stats],
          F_OK: 0,
          R_OK: 4,
          W_OK: 2,
          X_OK: 1,
          access: [Function],
          accessSync: [Function],
          exists: [Function],
          existsSync: [Function],
          readFile: [Function],
          readFileSync: [Function],
          close: [Function],
          closeSync: [Function],
          open: [Function],
          openSync: [Function],
          read: [Function],
          readSync: [Function],
          write: [Function],
          writeSync: [Function],
          rename: [Function],
          renameSync: [Function],
          truncate: [Function],
          truncateSync: [Function],
          ftruncate: [Function],
          ftruncateSync: [Function],
          rmdir: [Function],
          rmdirSync: [Function],
          fdatasync: [Function],
          fdatasyncSync: [Function],
          fsync: [Function],
          fsyncSync: [Function],
          mkdir: [Function],
          mkdirSync: [Function],
          readdir: [Function],
          readdirSync: [Function],
          fstat: [Function],
          lstat: [Function],
          stat: [Function],
          fstatSync: [Function],
          lstatSync: [Function],
          statSync: [Function],
          readlink: [Function],
          readlinkSync: [Function],
          symlink: [Function],
          symlinkSync: [Function],
          link: [Function],
          linkSync: [Function],
          unlink: [Function],
          unlinkSync: [Function],
          fchmod: [Function],
          fchmodSync: [Function],
          lchmod: [Function],
          lchmodSync: [Function],
          chmod: [Function],
          chmodSync: [Function],
          lchown: [Function],
          lchownSync: [Function],
          fchown: [Function],
          fchownSync: [Function],
          chown: [Function],
          chownSync: [Function],
          _toUnixTimestamp: [Function: toUnixTimestamp],
          utimes: [Function],
          utimesSync: [Function],
          futimes: [Function],
          futimesSync: [Function],
          writeFile: [Function],
          writeFileSync: [Function],
          appendFile: [Function],
          appendFileSync: [Function],
          watch: [Function],
          watchFile: [Function],
          unwatchFile: [Function],
          realpathSync: [Function: realpathSync],
          realpath: [Function: realpath],
          mkdtemp: [Function],
          mkdtempSync: [Function],
          copyFile: [Function],
          copyFileSync: [Function],
          createReadStream: [Function],
          ReadStream: 
           { [Function: ReadStream]
             super_: 
              { [Function: Readable]
                ReadableState: [Function: ReadableState],
                super_: 
                 { [Function: Stream]
                   super_: 
                    { [Function: EventEmitter]
                      EventEmitter: [Circular],
                      usingDomains: false,
                      defaultMaxListeners: [Getter/Setter],
                      init: [Function],
                      listenerCount: [Function] },
                   Readable: [Circular],
                   Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                   Duplex: { [Function: Duplex] super_: [Circular] },
                   Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                   PassThrough: 
                    { [Function: PassThrough]
                      super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                   Stream: [Circular],
                   _isUint8Array: [Function: isUint8Array],
                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                _fromList: [Function: fromList] } },
          FileReadStream: 
           { [Function: ReadStream]
             super_: 
              { [Function: Readable]
                ReadableState: [Function: ReadableState],
                super_: 
                 { [Function: Stream]
                   super_: 
                    { [Function: EventEmitter]
                      EventEmitter: [Circular],
                      usingDomains: false,
                      defaultMaxListeners: [Getter/Setter],
                      init: [Function],
                      listenerCount: [Function] },
                   Readable: [Circular],
                   Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                   Duplex: { [Function: Duplex] super_: [Circular] },
                   Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                   PassThrough: 
                    { [Function: PassThrough]
                      super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                   Stream: [Circular],
                   _isUint8Array: [Function: isUint8Array],
                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                _fromList: [Function: fromList] } },
          createWriteStream: [Function],
          WriteStream: 
           { [Function: WriteStream]
             super_: 
              { [Function: Writable]
                WritableState: [Function: WritableState],
                super_: 
                 { [Function: Stream]
                   super_: 
                    { [Function: EventEmitter]
                      EventEmitter: [Circular],
                      usingDomains: false,
                      defaultMaxListeners: [Getter/Setter],
                      init: [Function],
                      listenerCount: [Function] },
                   Readable: 
                    { [Function: Readable]
                      ReadableState: [Function: ReadableState],
                      super_: [Circular],
                      _fromList: [Function: fromList] },
                   Writable: [Circular],
                   Duplex: 
                    { [Function: Duplex]
                      super_: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] } },
                   Transform: 
                    { [Function: Transform]
                      super_: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } } },
                   PassThrough: 
                    { [Function: PassThrough]
                      super_: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } } },
                   Stream: [Circular],
                   _isUint8Array: [Function: isUint8Array],
                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
          FileWriteStream: 
           { [Function: WriteStream]
             super_: 
              { [Function: Writable]
                WritableState: [Function: WritableState],
                super_: 
                 { [Function: Stream]
                   super_: 
                    { [Function: EventEmitter]
                      EventEmitter: [Circular],
                      usingDomains: false,
                      defaultMaxListeners: [Getter/Setter],
                      init: [Function],
                      listenerCount: [Function] },
                   Readable: 
                    { [Function: Readable]
                      ReadableState: [Function: ReadableState],
                      super_: [Circular],
                      _fromList: [Function: fromList] },
                   Writable: [Circular],
                   Duplex: 
                    { [Function: Duplex]
                      super_: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] } },
                   Transform: 
                    { [Function: Transform]
                      super_: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } } },
                   PassThrough: 
                    { [Function: PassThrough]
                      super_: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } } },
                   Stream: [Circular],
                   _isUint8Array: [Function: isUint8Array],
                   _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
       Promise: 
        { [Function: Promise]
          TypeError: [Function: TypeError],
          RangeError: [Function: RangeError],
          CancellationError: [Function: SubError],
          TimeoutError: [Function: SubError],
          OperationalError: [Function: OperationalError],
          RejectionError: [Function: OperationalError],
          AggregateError: [Function: SubError],
          _peekContext: [Function],
          onPossiblyUnhandledRejection: [Function],
          onUnhandledRejectionHandled: [Function],
          longStackTraces: [Function],
          hasLongStackTraces: [Function],
          config: [Function],
          getNewLibraryCopy: [Function],
          is: [Function],
          fromCallback: [Function],
          fromNode: [Function],
          all: [Function],
          cast: [Function],
          fulfilled: [Function],
          resolve: [Function],
          rejected: [Function],
          reject: [Function],
          setScheduler: [Function],
          pending: [Function],
          defer: [Function],
          method: [Function],
          try: [Function],
          attempt: [Function],
          bind: [Function],
          PromiseInspection: [Function: PromiseInspection],
          join: [Function],
          Promise: [Circular],
          version: '3.5.3',
          map: [Function],
          using: [Function],
          delay: [Function],
          coroutine: { [Function] addYieldHandler: [Function] },
          spawn: [Function],
          promisify: [Function],
          promisifyAll: [Function],
          props: [Function],
          race: [Function],
          reduce: [Function],
          settle: [Function],
          some: [Function],
          _SomePromiseArray: [Function: SomePromiseArray],
          filter: [Function],
          each: [Function],
          mapSeries: [Function: PromiseMapSeries],
          any: [Function],
          noConflict: [Function: noConflict] },
       camelcase: [Function],
       annotation: undefined,
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       logger: Logger { category: 'PropertiesParser', context: {} } },
     PrototypeAnnotationParser: Prototype {
       annotation: [Function: Prototype],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     QualifierAnnotationParser: QualifierParser {
       annotation: [Function: Qualifier],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     ResourceAnnotationParser: ResourceParser {
       annotation: [Function: Resource],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     ResourceParser: ResourceParser {
       annotation: [Function: Resource],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     RunAnnotationParser: RunParser {
       annotation: [Function: Run],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     ServiceAnnotationParser: ServiceParser {
       annotation: [Function: Service],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } },
     StoreAnnotationParser: { [Function: StoreParser]
       annotation: [Function: Store],
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } },
       util: 
        { _errnoException: [Function: _errnoException],
          _exceptionWithHostPort: [Function: _exceptionWithHostPort],
          _extend: [Function: _extend],
          callbackify: [Function: callbackify],
          debuglog: [Function: debuglog],
          deprecate: [Function: deprecate],
          format: [Function: format],
          inherits: [Function: inherits],
          inspect: 
           { [Function: inspect]
             custom: Symbol(util.inspect.custom),
             colors: 
              { bold: [ 1, 22 ],
                italic: [ 3, 23 ],
                underline: [ 4, 24 ],
                inverse: [ 7, 27 ],
                white: [ 37, 39 ],
                grey: [ 90, 39 ],
                black: [ 30, 39 ],
                blue: [ 34, 39 ],
                cyan: [ 36, 39 ],
                green: [ 32, 39 ],
                magenta: [ 35, 39 ],
                red: [ 31, 39 ],
                yellow: [ 33, 39 ] },
             styles: 
              { special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                symbol: 'green',
                date: 'magenta',
                regexp: 'red' } },
          isArray: [Function: isArray],
          isBoolean: [Function: isBoolean],
          isBuffer: [Function: isBuffer],
          isNull: [Function: isNull],
          isNullOrUndefined: [Function: isNullOrUndefined],
          isNumber: [Function: isNumber],
          isString: [Function: isString],
          isSymbol: [Function: isSymbol],
          isUndefined: [Function: isUndefined],
          isRegExp: [Function: isRegExp],
          isObject: [Function: isObject],
          isDate: [Function: isDate],
          isError: [Function: isError],
          isFunction: [Function: isFunction],
          isPrimitive: [Function: isPrimitive],
          log: [Function: log],
          promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
          TextDecoder: [Function: TextDecoder],
          TextEncoder: [Function: TextEncoder],
          debug: [Function: deprecated],
          error: [Function: deprecated],
          print: [Function: deprecated],
          puts: [Function: deprecated] } },
     TypeAnnotationParser: type {
       annotation: 
        { [Function: type]
          super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
       doctrine: 
        { version: '3.0.0',
          parse: [Function: parse],
          parseType: [Function: parseType],
          parseParamType: [Function: parseParamType],
          unwrapComment: [Function: unwrapComment],
          Syntax: 
           { NullableLiteral: 'NullableLiteral',
             AllLiteral: 'AllLiteral',
             NullLiteral: 'NullLiteral',
             UndefinedLiteral: 'UndefinedLiteral',
             VoidLiteral: 'VoidLiteral',
             UnionType: 'UnionType',
             ArrayType: 'ArrayType',
             RecordType: 'RecordType',
             FieldType: 'FieldType',
             FunctionType: 'FunctionType',
             ParameterType: 'ParameterType',
             RestType: 'RestType',
             NonNullableType: 'NonNullableType',
             OptionalType: 'OptionalType',
             NullableType: 'NullableType',
             NameExpression: 'NameExpression',
             TypeApplication: 'TypeApplication',
             StringLiteralType: 'StringLiteralType',
             NumericLiteralType: 'NumericLiteralType',
             BooleanLiteralType: 'BooleanLiteralType' },
          Error: [Function: DoctrineError],
          type: 
           { Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             stringify: [Function: stringify] } },
       expressionParser: undefined,
       logManager: 
        LogManager {
          configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
          categories: 
           { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
             ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
             StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
             DependencyBuilder: 
              { appenders: [ 'default', 'DependencyBuilder' ],
                level: 'DEBUG' },
             PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
             Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
          logger: Logger { category: 'default', context: {} } } } ],
  DependencyBuilder: 
   DependencyBuilder {
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'DependencyBuilder', context: {} },
     glob: 
      { [Function: glob]
        sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
        GlobSync: [Function: GlobSync],
        glob: [Circular],
        hasMagic: [Function],
        Glob: 
         { [Function: Glob]
           super_: 
            { [Function: EventEmitter]
              EventEmitter: [Circular],
              usingDomains: false,
              defaultMaxListeners: [Getter/Setter],
              init: [Function],
              listenerCount: [Function] } } },
     _: 
      { [Function: lodash]
        templateSettings: 
         { escape: /<%-([\s\S]+?)%>/g,
           evaluate: /<%([\s\S]+?)%>/g,
           interpolate: /<%=([\s\S]+?)%>/g,
           variable: '',
           imports: { _: [Circular] } },
        after: [Function: after],
        ary: [Function: ary],
        assign: [Function],
        assignIn: [Function],
        assignInWith: [Function],
        assignWith: [Function],
        at: [Function],
        before: [Function: before],
        bind: { [Function] placeholder: [Circular] },
        bindAll: [Function],
        bindKey: { [Function] placeholder: [Circular] },
        castArray: [Function: castArray],
        chain: [Function: chain],
        chunk: [Function: chunk],
        compact: [Function: compact],
        concat: [Function: concat],
        cond: [Function: cond],
        conforms: [Function: conforms],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        curry: { [Function: curry] placeholder: [Circular] },
        curryRight: { [Function: curryRight] placeholder: [Circular] },
        debounce: [Function: debounce],
        defaults: [Function],
        defaultsDeep: [Function],
        defer: [Function],
        delay: [Function],
        difference: [Function],
        differenceBy: [Function],
        differenceWith: [Function],
        drop: [Function: drop],
        dropRight: [Function: dropRight],
        dropRightWhile: [Function: dropRightWhile],
        dropWhile: [Function: dropWhile],
        fill: [Function: fill],
        filter: [Function: filter],
        flatMap: [Function: flatMap],
        flatMapDeep: [Function: flatMapDeep],
        flatMapDepth: [Function: flatMapDepth],
        flatten: [Function: flatten],
        flattenDeep: [Function: flattenDeep],
        flattenDepth: [Function: flattenDepth],
        flip: [Function: flip],
        flow: [Function],
        flowRight: [Function],
        fromPairs: [Function: fromPairs],
        functions: [Function: functions],
        functionsIn: [Function: functionsIn],
        groupBy: [Function],
        initial: [Function: initial],
        intersection: [Function],
        intersectionBy: [Function],
        intersectionWith: [Function],
        invert: [Function],
        invertBy: [Function],
        invokeMap: [Function],
        iteratee: [Function: iteratee],
        keyBy: [Function],
        keys: [Function: keys],
        keysIn: [Function: keysIn],
        map: [Function: map],
        mapKeys: [Function: mapKeys],
        mapValues: [Function: mapValues],
        matches: [Function: matches],
        matchesProperty: [Function: matchesProperty],
        memoize: { [Function: memoize] Cache: [Function: MapCache] },
        merge: [Function],
        mergeWith: [Function],
        method: [Function],
        methodOf: [Function],
        mixin: [Function: mixin],
        negate: [Function: negate],
        nthArg: [Function: nthArg],
        omit: [Function],
        omitBy: [Function: omitBy],
        once: [Function: once],
        orderBy: [Function: orderBy],
        over: [Function],
        overArgs: [Function],
        overEvery: [Function],
        overSome: [Function],
        partial: { [Function] placeholder: [Circular] },
        partialRight: { [Function] placeholder: [Circular] },
        partition: [Function],
        pick: [Function],
        pickBy: [Function: pickBy],
        property: [Function: property],
        propertyOf: [Function: propertyOf],
        pull: [Function],
        pullAll: [Function: pullAll],
        pullAllBy: [Function: pullAllBy],
        pullAllWith: [Function: pullAllWith],
        pullAt: [Function],
        range: [Function],
        rangeRight: [Function],
        rearg: [Function],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        reverse: [Function: reverse],
        sampleSize: [Function: sampleSize],
        set: [Function: set],
        setWith: [Function: setWith],
        shuffle: [Function: shuffle],
        slice: [Function: slice],
        sortBy: [Function],
        sortedUniq: [Function: sortedUniq],
        sortedUniqBy: [Function: sortedUniqBy],
        split: [Function: split],
        spread: [Function: spread],
        tail: [Function: tail],
        take: [Function: take],
        takeRight: [Function: takeRight],
        takeRightWhile: [Function: takeRightWhile],
        takeWhile: [Function: takeWhile],
        tap: [Function: tap],
        throttle: [Function: throttle],
        thru: [Function: thru],
        toArray: [Function: toArray],
        toPairs: [Function],
        toPairsIn: [Function],
        toPath: [Function: toPath],
        toPlainObject: [Function: toPlainObject],
        transform: [Function: transform],
        unary: [Function: unary],
        union: [Function],
        unionBy: [Function],
        unionWith: [Function],
        uniq: [Function: uniq],
        uniqBy: [Function: uniqBy],
        uniqWith: [Function: uniqWith],
        unset: [Function: unset],
        unzip: [Function: unzip],
        unzipWith: [Function: unzipWith],
        update: [Function: update],
        updateWith: [Function: updateWith],
        values: [Function: values],
        valuesIn: [Function: valuesIn],
        without: [Function],
        words: [Function: words],
        wrap: [Function: wrap],
        xor: [Function],
        xorBy: [Function],
        xorWith: [Function],
        zip: [Function],
        zipObject: [Function: zipObject],
        zipObjectDeep: [Function: zipObjectDeep],
        zipWith: [Function],
        entries: [Function],
        entriesIn: [Function],
        extend: [Function],
        extendWith: [Function],
        add: [Function],
        attempt: [Function],
        camelCase: [Function],
        capitalize: [Function: capitalize],
        ceil: [Function],
        clamp: [Function: clamp],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        cloneDeepWith: [Function: cloneDeepWith],
        cloneWith: [Function: cloneWith],
        conformsTo: [Function: conformsTo],
        deburr: [Function: deburr],
        defaultTo: [Function: defaultTo],
        divide: [Function],
        endsWith: [Function: endsWith],
        eq: [Function: eq],
        escape: [Function: escape],
        escapeRegExp: [Function: escapeRegExp],
        every: [Function: every],
        find: [Function],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        floor: [Function],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function: forIn],
        forInRight: [Function: forInRight],
        forOwn: [Function: forOwn],
        forOwnRight: [Function: forOwnRight],
        get: [Function: get],
        gt: [Function],
        gte: [Function],
        has: [Function: has],
        hasIn: [Function: hasIn],
        head: [Function: head],
        identity: [Function: identity],
        includes: [Function: includes],
        indexOf: [Function: indexOf],
        inRange: [Function: inRange],
        invoke: [Function],
        isArguments: [Function: baseIsArguments],
        isArray: [Function: isArray],
        isArrayBuffer: [Function],
        isArrayLike: [Function: isArrayLike],
        isArrayLikeObject: [Function: isArrayLikeObject],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isDate: [Function],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isEqualWith: [Function: isEqualWith],
        isError: [Function: isError],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isInteger: [Function: isInteger],
        isLength: [Function: isLength],
        isMap: [Function],
        isMatch: [Function: isMatch],
        isMatchWith: [Function: isMatchWith],
        isNaN: [Function: isNaN],
        isNative: [Function: isNative],
        isNil: [Function: isNil],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isObjectLike: [Function: isObjectLike],
        isPlainObject: [Function: isPlainObject],
        isRegExp: [Function],
        isSafeInteger: [Function: isSafeInteger],
        isSet: [Function],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isTypedArray: [Function],
        isUndefined: [Function: isUndefined],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        join: [Function: join],
        kebabCase: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lowerCase: [Function],
        lowerFirst: [Function],
        lt: [Function],
        lte: [Function],
        max: [Function: max],
        maxBy: [Function: maxBy],
        mean: [Function: mean],
        meanBy: [Function: meanBy],
        min: [Function: min],
        minBy: [Function: minBy],
        stubArray: [Function: stubArray],
        stubFalse: [Function: stubFalse],
        stubObject: [Function: stubObject],
        stubString: [Function: stubString],
        stubTrue: [Function: stubTrue],
        multiply: [Function],
        nth: [Function: nth],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function],
        pad: [Function: pad],
        padEnd: [Function: padEnd],
        padStart: [Function: padStart],
        parseInt: [Function: parseInt],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        repeat: [Function: repeat],
        replace: [Function: replace],
        result: [Function: result],
        round: [Function],
        runInContext: [Function: runInContext],
        sample: [Function: sample],
        size: [Function: size],
        snakeCase: [Function],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        sortedIndexBy: [Function: sortedIndexBy],
        sortedIndexOf: [Function: sortedIndexOf],
        sortedLastIndex: [Function: sortedLastIndex],
        sortedLastIndexBy: [Function: sortedLastIndexBy],
        sortedLastIndexOf: [Function: sortedLastIndexOf],
        startCase: [Function],
        startsWith: [Function: startsWith],
        subtract: [Function],
        sum: [Function: sum],
        sumBy: [Function: sumBy],
        template: [Function: template],
        times: [Function: times],
        toFinite: [Function: toFinite],
        toInteger: [Function: toInteger],
        toLength: [Function: toLength],
        toLower: [Function: toLower],
        toNumber: [Function: toNumber],
        toSafeInteger: [Function: toSafeInteger],
        toString: [Function: toString],
        toUpper: [Function: toUpper],
        trim: [Function: trim],
        trimEnd: [Function: trimEnd],
        trimStart: [Function: trimStart],
        truncate: [Function: truncate],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        upperCase: [Function],
        upperFirst: [Function],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        first: [Function: head],
        VERSION: '4.17.11',
        _: [Circular] },
     toposort: [Function: Toposort],
     util: 
      { _errnoException: [Function: _errnoException],
        _exceptionWithHostPort: [Function: _exceptionWithHostPort],
        _extend: [Function: _extend],
        callbackify: [Function: callbackify],
        debuglog: [Function: debuglog],
        deprecate: [Function: deprecate],
        format: [Function: format],
        inherits: [Function: inherits],
        inspect: 
         { [Function: inspect]
           custom: Symbol(util.inspect.custom),
           colors: 
            { bold: [ 1, 22 ],
              italic: [ 3, 23 ],
              underline: [ 4, 24 ],
              inverse: [ 7, 27 ],
              white: [ 37, 39 ],
              grey: [ 90, 39 ],
              black: [ 30, 39 ],
              blue: [ 34, 39 ],
              cyan: [ 36, 39 ],
              green: [ 32, 39 ],
              magenta: [ 35, 39 ],
              red: [ 31, 39 ],
              yellow: [ 33, 39 ] },
           styles: 
            { special: 'cyan',
              number: 'yellow',
              boolean: 'yellow',
              undefined: 'grey',
              null: 'bold',
              string: 'green',
              symbol: 'green',
              date: 'magenta',
              regexp: 'red' } },
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isNull: [Function: isNull],
        isNullOrUndefined: [Function: isNullOrUndefined],
        isNumber: [Function: isNumber],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isUndefined: [Function: isUndefined],
        isRegExp: [Function: isRegExp],
        isObject: [Function: isObject],
        isDate: [Function: isDate],
        isError: [Function: isError],
        isFunction: [Function: isFunction],
        isPrimitive: [Function: isPrimitive],
        log: [Function: log],
        promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
        TextDecoder: [Function: TextDecoder],
        TextEncoder: [Function: TextEncoder],
        debug: [Function: deprecated],
        error: [Function: deprecated],
        print: [Function: deprecated],
        puts: [Function: deprecated] },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: 
         { resolve: [Function: resolve],
           normalize: [Function: normalize],
           isAbsolute: [Function: isAbsolute],
           join: [Function: join],
           relative: [Function: relative],
           _makeLong: [Function: _makeLong],
           dirname: [Function: dirname],
           basename: [Function: basename],
           extname: [Function: extname],
           format: [Function: format],
           parse: [Function: parse],
           sep: '\\',
           delimiter: ';',
           win32: [Circular],
           posix: [Circular] },
        posix: [Circular] } },
  StructureParser: 
   StructureParser {
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'StructureParser', context: {} },
     annotationParser: 
      [ AfterAnnotationParser: AfterAnnotationParser {
          annotation: [Function: After],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        AspectAnnotationParser: AspectParser {
          annotation: [Function: Aspect],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        AutowireAnnotationParser: { [Function: AutowrieAnnotationParser]
          QualifierAnnotation: [Function: Qualifier],
          annotation: [Function: Autowire],
          camelcase: [Function],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        BeanAnnotationParser: BeanParser {
          annotation: [Function: Bean],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        BeforeAnnotationParser: BeforeAnnotationParser {
          annotation: [Function: Before],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ComponentAnnotationParser: ComponentParser {
          annotation: [Function: Component],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ConfigurationAnnotationParser: ConfigurationParser {
          annotation: [Function: Configuration],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ContextAnnotationParser: ContextParser {
          annotation: [Function: Context],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ControllerAnnotationParser: ControllerParser {
          annotation: [Function: Controller],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        InheritsAnnotationParser: InheritsAnnotationParser {
          globals: [],
          annotation: [Function: Inherits],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        InitAnnotationParser: InitParser {
          annotation: [Function: Init],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        NamespaceAnnotationParser: NamespaceParser {
          annotation: [Function: Namespace],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ParamAnnotationParser: { [Function: paramParser]
          annotation: [Function: param],
          doctrine: 
           { version: '3.0.0',
             parse: [Function: parse],
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             unwrapComment: [Function: unwrapComment],
             Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             Error: [Function: DoctrineError],
             type: 
              { Syntax: 
                 { NullableLiteral: 'NullableLiteral',
                   AllLiteral: 'AllLiteral',
                   NullLiteral: 'NullLiteral',
                   UndefinedLiteral: 'UndefinedLiteral',
                   VoidLiteral: 'VoidLiteral',
                   UnionType: 'UnionType',
                   ArrayType: 'ArrayType',
                   RecordType: 'RecordType',
                   FieldType: 'FieldType',
                   FunctionType: 'FunctionType',
                   ParameterType: 'ParameterType',
                   RestType: 'RestType',
                   NonNullableType: 'NonNullableType',
                   OptionalType: 'OptionalType',
                   NullableType: 'NullableType',
                   NameExpression: 'NameExpression',
                   TypeApplication: 'TypeApplication',
                   StringLiteralType: 'StringLiteralType',
                   NumericLiteralType: 'NumericLiteralType',
                   BooleanLiteralType: 'BooleanLiteralType' },
                parseType: [Function: parseType],
                parseParamType: [Function: parseParamType],
                stringify: [Function: stringify] } },
          expressionParser: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        PointCuteAnnotationParser: PointCutParser {
          wildcard: [Function],
          md5: [Function],
          annotation: [Function: PointCut],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        PropertiesAnnotationParser: PropertiesParser {
          processors: 
           { '.properties': 
              { [Function: XMLPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] },
                propertiesReader: 
                 { parse: [Function],
                   stringify: [Function],
                   createStringifier: [Function: createStringifier] } },
             '.json': 
              { [Function: JsonPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] } },
             '.xml': 
              { [Function: XMLPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] } } },
          glob: 
           { [Function: glob]
             sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
             GlobSync: [Function: GlobSync],
             glob: [Circular],
             hasMagic: [Function],
             Glob: 
              { [Function: Glob]
                super_: 
                 { [Function: EventEmitter]
                   EventEmitter: [Circular],
                   usingDomains: false,
                   defaultMaxListeners: [Getter/Setter],
                   init: [Function],
                   listenerCount: [Function] } } },
          path: 
           { resolve: [Function: resolve],
             normalize: [Function: normalize],
             isAbsolute: [Function: isAbsolute],
             join: [Function: join],
             relative: [Function: relative],
             _makeLong: [Function: _makeLong],
             dirname: [Function: dirname],
             basename: [Function: basename],
             extname: [Function: extname],
             format: [Function: format],
             parse: [Function: parse],
             sep: '/',
             delimiter: ':',
             win32: 
              { resolve: [Function: resolve],
                normalize: [Function: normalize],
                isAbsolute: [Function: isAbsolute],
                join: [Function: join],
                relative: [Function: relative],
                _makeLong: [Function: _makeLong],
                dirname: [Function: dirname],
                basename: [Function: basename],
                extname: [Function: extname],
                format: [Function: format],
                parse: [Function: parse],
                sep: '\\',
                delimiter: ';',
                win32: [Circular],
                posix: [Circular] },
             posix: [Circular] },
          fs: 
           { constants: 
              { O_RDONLY: 0,
                O_WRONLY: 1,
                O_RDWR: 2,
                S_IFMT: 61440,
                S_IFREG: 32768,
                S_IFDIR: 16384,
                S_IFCHR: 8192,
                S_IFBLK: 24576,
                S_IFIFO: 4096,
                S_IFLNK: 40960,
                S_IFSOCK: 49152,
                O_CREAT: 512,
                O_EXCL: 2048,
                O_NOCTTY: 131072,
                O_TRUNC: 1024,
                O_APPEND: 8,
                O_DIRECTORY: 1048576,
                O_NOFOLLOW: 256,
                O_SYNC: 128,
                O_DSYNC: 4194304,
                O_SYMLINK: 2097152,
                O_NONBLOCK: 4,
                S_IRWXU: 448,
                S_IRUSR: 256,
                S_IWUSR: 128,
                S_IXUSR: 64,
                S_IRWXG: 56,
                S_IRGRP: 32,
                S_IWGRP: 16,
                S_IXGRP: 8,
                S_IRWXO: 7,
                S_IROTH: 4,
                S_IWOTH: 2,
                S_IXOTH: 1,
                F_OK: 0,
                R_OK: 4,
                W_OK: 2,
                X_OK: 1,
                UV_FS_COPYFILE_EXCL: 1,
                COPYFILE_EXCL: 1 },
             Stats: [Function: Stats],
             F_OK: 0,
             R_OK: 4,
             W_OK: 2,
             X_OK: 1,
             access: [Function],
             accessSync: [Function],
             exists: [Function],
             existsSync: [Function],
             readFile: [Function],
             readFileSync: [Function],
             close: [Function],
             closeSync: [Function],
             open: [Function],
             openSync: [Function],
             read: [Function],
             readSync: [Function],
             write: [Function],
             writeSync: [Function],
             rename: [Function],
             renameSync: [Function],
             truncate: [Function],
             truncateSync: [Function],
             ftruncate: [Function],
             ftruncateSync: [Function],
             rmdir: [Function],
             rmdirSync: [Function],
             fdatasync: [Function],
             fdatasyncSync: [Function],
             fsync: [Function],
             fsyncSync: [Function],
             mkdir: [Function],
             mkdirSync: [Function],
             readdir: [Function],
             readdirSync: [Function],
             fstat: [Function],
             lstat: [Function],
             stat: [Function],
             fstatSync: [Function],
             lstatSync: [Function],
             statSync: [Function],
             readlink: [Function],
             readlinkSync: [Function],
             symlink: [Function],
             symlinkSync: [Function],
             link: [Function],
             linkSync: [Function],
             unlink: [Function],
             unlinkSync: [Function],
             fchmod: [Function],
             fchmodSync: [Function],
             lchmod: [Function],
             lchmodSync: [Function],
             chmod: [Function],
             chmodSync: [Function],
             lchown: [Function],
             lchownSync: [Function],
             fchown: [Function],
             fchownSync: [Function],
             chown: [Function],
             chownSync: [Function],
             _toUnixTimestamp: [Function: toUnixTimestamp],
             utimes: [Function],
             utimesSync: [Function],
             futimes: [Function],
             futimesSync: [Function],
             writeFile: [Function],
             writeFileSync: [Function],
             appendFile: [Function],
             appendFileSync: [Function],
             watch: [Function],
             watchFile: [Function],
             unwatchFile: [Function],
             realpathSync: [Function: realpathSync],
             realpath: [Function: realpath],
             mkdtemp: [Function],
             mkdtempSync: [Function],
             copyFile: [Function],
             copyFileSync: [Function],
             createReadStream: [Function],
             ReadStream: 
              { [Function: ReadStream]
                super_: 
                 { [Function: Readable]
                   ReadableState: [Function: ReadableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: [Circular],
                      Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                      Duplex: { [Function: Duplex] super_: [Circular] },
                      Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                   _fromList: [Function: fromList] } },
             FileReadStream: 
              { [Function: ReadStream]
                super_: 
                 { [Function: Readable]
                   ReadableState: [Function: ReadableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: [Circular],
                      Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                      Duplex: { [Function: Duplex] super_: [Circular] },
                      Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                   _fromList: [Function: fromList] } },
             createWriteStream: [Function],
             WriteStream: 
              { [Function: WriteStream]
                super_: 
                 { [Function: Writable]
                   WritableState: [Function: WritableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] },
                      Writable: [Circular],
                      Duplex: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } },
                      Transform: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Object] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
             FileWriteStream: 
              { [Function: WriteStream]
                super_: 
                 { [Function: Writable]
                   WritableState: [Function: WritableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] },
                      Writable: [Circular],
                      Duplex: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } },
                      Transform: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Object] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
          Promise: 
           { [Function: Promise]
             TypeError: [Function: TypeError],
             RangeError: [Function: RangeError],
             CancellationError: [Function: SubError],
             TimeoutError: [Function: SubError],
             OperationalError: [Function: OperationalError],
             RejectionError: [Function: OperationalError],
             AggregateError: [Function: SubError],
             _peekContext: [Function],
             onPossiblyUnhandledRejection: [Function],
             onUnhandledRejectionHandled: [Function],
             longStackTraces: [Function],
             hasLongStackTraces: [Function],
             config: [Function],
             getNewLibraryCopy: [Function],
             is: [Function],
             fromCallback: [Function],
             fromNode: [Function],
             all: [Function],
             cast: [Function],
             fulfilled: [Function],
             resolve: [Function],
             rejected: [Function],
             reject: [Function],
             setScheduler: [Function],
             pending: [Function],
             defer: [Function],
             method: [Function],
             try: [Function],
             attempt: [Function],
             bind: [Function],
             PromiseInspection: [Function: PromiseInspection],
             join: [Function],
             Promise: [Circular],
             version: '3.5.3',
             map: [Function],
             using: [Function],
             delay: [Function],
             coroutine: { [Function] addYieldHandler: [Function] },
             spawn: [Function],
             promisify: [Function],
             promisifyAll: [Function],
             props: [Function],
             race: [Function],
             reduce: [Function],
             settle: [Function],
             some: [Function],
             _SomePromiseArray: [Function: SomePromiseArray],
             filter: [Function],
             each: [Function],
             mapSeries: [Function: PromiseMapSeries],
             any: [Function],
             noConflict: [Function: noConflict] },
          camelcase: [Function],
          annotation: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          logger: Logger { category: 'PropertiesParser', context: {} } },
        PrototypeAnnotationParser: Prototype {
          annotation: [Function: Prototype],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        QualifierAnnotationParser: QualifierParser {
          annotation: [Function: Qualifier],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        ResourceAnnotationParser: ResourceParser {
          annotation: [Function: Resource],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        ResourceParser: ResourceParser {
          annotation: [Function: Resource],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        RunAnnotationParser: RunParser {
          annotation: [Function: Run],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ServiceAnnotationParser: ServiceParser {
          annotation: [Function: Service],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        StoreAnnotationParser: { [Function: StoreParser]
          annotation: [Function: Store],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        TypeAnnotationParser: type {
          annotation: 
           { [Function: type]
             super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
          doctrine: 
           { version: '3.0.0',
             parse: [Function: parse],
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             unwrapComment: [Function: unwrapComment],
             Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             Error: [Function: DoctrineError],
             type: 
              { Syntax: 
                 { NullableLiteral: 'NullableLiteral',
                   AllLiteral: 'AllLiteral',
                   NullLiteral: 'NullLiteral',
                   UndefinedLiteral: 'UndefinedLiteral',
                   VoidLiteral: 'VoidLiteral',
                   UnionType: 'UnionType',
                   ArrayType: 'ArrayType',
                   RecordType: 'RecordType',
                   FieldType: 'FieldType',
                   FunctionType: 'FunctionType',
                   ParameterType: 'ParameterType',
                   RestType: 'RestType',
                   NonNullableType: 'NonNullableType',
                   OptionalType: 'OptionalType',
                   NullableType: 'NullableType',
                   NameExpression: 'NameExpression',
                   TypeApplication: 'TypeApplication',
                   StringLiteralType: 'StringLiteralType',
                   NumericLiteralType: 'NumericLiteralType',
                   BooleanLiteralType: 'BooleanLiteralType' },
                parseType: [Function: parseType],
                parseParamType: [Function: parseParamType],
                stringify: [Function: stringify] } },
          expressionParser: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } } ],
     expressionParser: 
      [ Block: [Function: Block],
        CallExpression: [Function: CallExpression],
        ClassDeclaration: [Function: ClassDeclaration],
        ExpressionStatement: [Function: ExpressionStatement],
        FunctionDeclaration: [Function: FunctionDeclaration],
        Line: [Function: Line],
        MemberExpression: [Function: MemberExpression],
        MethodDefinition: [Function: MethodDefinition],
        Property: [Function: Property],
        VariableDeclaration: [Function: VariableDeclaration] ],
     removeTokens: 
      [ 'BlockStatement>',
        'AssignmentExpression',
        'Identifier',
        'Literal',
        'ClassBody',
        'ClassExpression' ],
     lightTokenInformation: 'true',
     removeLocationInformation: 'true',
     beautify: { [Function: js_beautify] defaultOptions: [Function] },
     _: 
      { [Function: lodash]
        templateSettings: 
         { escape: /<%-([\s\S]+?)%>/g,
           evaluate: /<%([\s\S]+?)%>/g,
           interpolate: /<%=([\s\S]+?)%>/g,
           variable: '',
           imports: { _: [Circular] } },
        after: [Function: after],
        ary: [Function: ary],
        assign: [Function],
        assignIn: [Function],
        assignInWith: [Function],
        assignWith: [Function],
        at: [Function],
        before: [Function: before],
        bind: { [Function] placeholder: [Circular] },
        bindAll: [Function],
        bindKey: { [Function] placeholder: [Circular] },
        castArray: [Function: castArray],
        chain: [Function: chain],
        chunk: [Function: chunk],
        compact: [Function: compact],
        concat: [Function: concat],
        cond: [Function: cond],
        conforms: [Function: conforms],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        curry: { [Function: curry] placeholder: [Circular] },
        curryRight: { [Function: curryRight] placeholder: [Circular] },
        debounce: [Function: debounce],
        defaults: [Function],
        defaultsDeep: [Function],
        defer: [Function],
        delay: [Function],
        difference: [Function],
        differenceBy: [Function],
        differenceWith: [Function],
        drop: [Function: drop],
        dropRight: [Function: dropRight],
        dropRightWhile: [Function: dropRightWhile],
        dropWhile: [Function: dropWhile],
        fill: [Function: fill],
        filter: [Function: filter],
        flatMap: [Function: flatMap],
        flatMapDeep: [Function: flatMapDeep],
        flatMapDepth: [Function: flatMapDepth],
        flatten: [Function: flatten],
        flattenDeep: [Function: flattenDeep],
        flattenDepth: [Function: flattenDepth],
        flip: [Function: flip],
        flow: [Function],
        flowRight: [Function],
        fromPairs: [Function: fromPairs],
        functions: [Function: functions],
        functionsIn: [Function: functionsIn],
        groupBy: [Function],
        initial: [Function: initial],
        intersection: [Function],
        intersectionBy: [Function],
        intersectionWith: [Function],
        invert: [Function],
        invertBy: [Function],
        invokeMap: [Function],
        iteratee: [Function: iteratee],
        keyBy: [Function],
        keys: [Function: keys],
        keysIn: [Function: keysIn],
        map: [Function: map],
        mapKeys: [Function: mapKeys],
        mapValues: [Function: mapValues],
        matches: [Function: matches],
        matchesProperty: [Function: matchesProperty],
        memoize: { [Function: memoize] Cache: [Function: MapCache] },
        merge: [Function],
        mergeWith: [Function],
        method: [Function],
        methodOf: [Function],
        mixin: [Function: mixin],
        negate: [Function: negate],
        nthArg: [Function: nthArg],
        omit: [Function],
        omitBy: [Function: omitBy],
        once: [Function: once],
        orderBy: [Function: orderBy],
        over: [Function],
        overArgs: [Function],
        overEvery: [Function],
        overSome: [Function],
        partial: { [Function] placeholder: [Circular] },
        partialRight: { [Function] placeholder: [Circular] },
        partition: [Function],
        pick: [Function],
        pickBy: [Function: pickBy],
        property: [Function: property],
        propertyOf: [Function: propertyOf],
        pull: [Function],
        pullAll: [Function: pullAll],
        pullAllBy: [Function: pullAllBy],
        pullAllWith: [Function: pullAllWith],
        pullAt: [Function],
        range: [Function],
        rangeRight: [Function],
        rearg: [Function],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        reverse: [Function: reverse],
        sampleSize: [Function: sampleSize],
        set: [Function: set],
        setWith: [Function: setWith],
        shuffle: [Function: shuffle],
        slice: [Function: slice],
        sortBy: [Function],
        sortedUniq: [Function: sortedUniq],
        sortedUniqBy: [Function: sortedUniqBy],
        split: [Function: split],
        spread: [Function: spread],
        tail: [Function: tail],
        take: [Function: take],
        takeRight: [Function: takeRight],
        takeRightWhile: [Function: takeRightWhile],
        takeWhile: [Function: takeWhile],
        tap: [Function: tap],
        throttle: [Function: throttle],
        thru: [Function: thru],
        toArray: [Function: toArray],
        toPairs: [Function],
        toPairsIn: [Function],
        toPath: [Function: toPath],
        toPlainObject: [Function: toPlainObject],
        transform: [Function: transform],
        unary: [Function: unary],
        union: [Function],
        unionBy: [Function],
        unionWith: [Function],
        uniq: [Function: uniq],
        uniqBy: [Function: uniqBy],
        uniqWith: [Function: uniqWith],
        unset: [Function: unset],
        unzip: [Function: unzip],
        unzipWith: [Function: unzipWith],
        update: [Function: update],
        updateWith: [Function: updateWith],
        values: [Function: values],
        valuesIn: [Function: valuesIn],
        without: [Function],
        words: [Function: words],
        wrap: [Function: wrap],
        xor: [Function],
        xorBy: [Function],
        xorWith: [Function],
        zip: [Function],
        zipObject: [Function: zipObject],
        zipObjectDeep: [Function: zipObjectDeep],
        zipWith: [Function],
        entries: [Function],
        entriesIn: [Function],
        extend: [Function],
        extendWith: [Function],
        add: [Function],
        attempt: [Function],
        camelCase: [Function],
        capitalize: [Function: capitalize],
        ceil: [Function],
        clamp: [Function: clamp],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        cloneDeepWith: [Function: cloneDeepWith],
        cloneWith: [Function: cloneWith],
        conformsTo: [Function: conformsTo],
        deburr: [Function: deburr],
        defaultTo: [Function: defaultTo],
        divide: [Function],
        endsWith: [Function: endsWith],
        eq: [Function: eq],
        escape: [Function: escape],
        escapeRegExp: [Function: escapeRegExp],
        every: [Function: every],
        find: [Function],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        floor: [Function],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function: forIn],
        forInRight: [Function: forInRight],
        forOwn: [Function: forOwn],
        forOwnRight: [Function: forOwnRight],
        get: [Function: get],
        gt: [Function],
        gte: [Function],
        has: [Function: has],
        hasIn: [Function: hasIn],
        head: [Function: head],
        identity: [Function: identity],
        includes: [Function: includes],
        indexOf: [Function: indexOf],
        inRange: [Function: inRange],
        invoke: [Function],
        isArguments: [Function: baseIsArguments],
        isArray: [Function: isArray],
        isArrayBuffer: [Function],
        isArrayLike: [Function: isArrayLike],
        isArrayLikeObject: [Function: isArrayLikeObject],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isDate: [Function],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isEqualWith: [Function: isEqualWith],
        isError: [Function: isError],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isInteger: [Function: isInteger],
        isLength: [Function: isLength],
        isMap: [Function],
        isMatch: [Function: isMatch],
        isMatchWith: [Function: isMatchWith],
        isNaN: [Function: isNaN],
        isNative: [Function: isNative],
        isNil: [Function: isNil],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isObjectLike: [Function: isObjectLike],
        isPlainObject: [Function: isPlainObject],
        isRegExp: [Function],
        isSafeInteger: [Function: isSafeInteger],
        isSet: [Function],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isTypedArray: [Function],
        isUndefined: [Function: isUndefined],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        join: [Function: join],
        kebabCase: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lowerCase: [Function],
        lowerFirst: [Function],
        lt: [Function],
        lte: [Function],
        max: [Function: max],
        maxBy: [Function: maxBy],
        mean: [Function: mean],
        meanBy: [Function: meanBy],
        min: [Function: min],
        minBy: [Function: minBy],
        stubArray: [Function: stubArray],
        stubFalse: [Function: stubFalse],
        stubObject: [Function: stubObject],
        stubString: [Function: stubString],
        stubTrue: [Function: stubTrue],
        multiply: [Function],
        nth: [Function: nth],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function],
        pad: [Function: pad],
        padEnd: [Function: padEnd],
        padStart: [Function: padStart],
        parseInt: [Function: parseInt],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        repeat: [Function: repeat],
        replace: [Function: replace],
        result: [Function: result],
        round: [Function],
        runInContext: [Function: runInContext],
        sample: [Function: sample],
        size: [Function: size],
        snakeCase: [Function],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        sortedIndexBy: [Function: sortedIndexBy],
        sortedIndexOf: [Function: sortedIndexOf],
        sortedLastIndex: [Function: sortedLastIndex],
        sortedLastIndexBy: [Function: sortedLastIndexBy],
        sortedLastIndexOf: [Function: sortedLastIndexOf],
        startCase: [Function],
        startsWith: [Function: startsWith],
        subtract: [Function],
        sum: [Function: sum],
        sumBy: [Function: sumBy],
        template: [Function: template],
        times: [Function: times],
        toFinite: [Function: toFinite],
        toInteger: [Function: toInteger],
        toLength: [Function: toLength],
        toLower: [Function: toLower],
        toNumber: [Function: toNumber],
        toSafeInteger: [Function: toSafeInteger],
        toString: [Function: toString],
        toUpper: [Function: toUpper],
        trim: [Function: trim],
        trimEnd: [Function: trimEnd],
        trimStart: [Function: trimStart],
        truncate: [Function: truncate],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        upperCase: [Function],
        upperFirst: [Function],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        first: [Function: head],
        VERSION: '4.17.11',
        _: [Circular] },
     util: 
      { _errnoException: [Function: _errnoException],
        _exceptionWithHostPort: [Function: _exceptionWithHostPort],
        _extend: [Function: _extend],
        callbackify: [Function: callbackify],
        debuglog: [Function: debuglog],
        deprecate: [Function: deprecate],
        format: [Function: format],
        inherits: [Function: inherits],
        inspect: 
         { [Function: inspect]
           custom: Symbol(util.inspect.custom),
           colors: 
            { bold: [ 1, 22 ],
              italic: [ 3, 23 ],
              underline: [ 4, 24 ],
              inverse: [ 7, 27 ],
              white: [ 37, 39 ],
              grey: [ 90, 39 ],
              black: [ 30, 39 ],
              blue: [ 34, 39 ],
              cyan: [ 36, 39 ],
              green: [ 32, 39 ],
              magenta: [ 35, 39 ],
              red: [ 31, 39 ],
              yellow: [ 33, 39 ] },
           styles: 
            { special: 'cyan',
              number: 'yellow',
              boolean: 'yellow',
              undefined: 'grey',
              null: 'bold',
              string: 'green',
              symbol: 'green',
              date: 'magenta',
              regexp: 'red' } },
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isNull: [Function: isNull],
        isNullOrUndefined: [Function: isNullOrUndefined],
        isNumber: [Function: isNumber],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isUndefined: [Function: isUndefined],
        isRegExp: [Function: isRegExp],
        isObject: [Function: isObject],
        isDate: [Function: isDate],
        isError: [Function: isError],
        isFunction: [Function: isFunction],
        isPrimitive: [Function: isPrimitive],
        log: [Function: log],
        promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
        TextDecoder: [Function: TextDecoder],
        TextEncoder: [Function: TextEncoder],
        debug: [Function: deprecated],
        error: [Function: deprecated],
        print: [Function: deprecated],
        puts: [Function: deprecated] },
     esprima: 
      { parse: [Function: parse],
        tokenize: [Function: tokenize],
        Syntax: 
         { AssignmentExpression: 'AssignmentExpression',
           AssignmentPattern: 'AssignmentPattern',
           ArrayExpression: 'ArrayExpression',
           ArrayPattern: 'ArrayPattern',
           ArrowFunctionExpression: 'ArrowFunctionExpression',
           BlockStatement: 'BlockStatement',
           BinaryExpression: 'BinaryExpression',
           BreakStatement: 'BreakStatement',
           CallExpression: 'CallExpression',
           CatchClause: 'CatchClause',
           ClassBody: 'ClassBody',
           ClassDeclaration: 'ClassDeclaration',
           ClassExpression: 'ClassExpression',
           ConditionalExpression: 'ConditionalExpression',
           ContinueStatement: 'ContinueStatement',
           DoWhileStatement: 'DoWhileStatement',
           DebuggerStatement: 'DebuggerStatement',
           EmptyStatement: 'EmptyStatement',
           ExportAllDeclaration: 'ExportAllDeclaration',
           ExportDefaultDeclaration: 'ExportDefaultDeclaration',
           ExportNamedDeclaration: 'ExportNamedDeclaration',
           ExportSpecifier: 'ExportSpecifier',
           ExpressionStatement: 'ExpressionStatement',
           ForStatement: 'ForStatement',
           ForOfStatement: 'ForOfStatement',
           ForInStatement: 'ForInStatement',
           FunctionDeclaration: 'FunctionDeclaration',
           FunctionExpression: 'FunctionExpression',
           Identifier: 'Identifier',
           IfStatement: 'IfStatement',
           ImportDeclaration: 'ImportDeclaration',
           ImportDefaultSpecifier: 'ImportDefaultSpecifier',
           ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
           ImportSpecifier: 'ImportSpecifier',
           Literal: 'Literal',
           LabeledStatement: 'LabeledStatement',
           LogicalExpression: 'LogicalExpression',
           MemberExpression: 'MemberExpression',
           MetaProperty: 'MetaProperty',
           MethodDefinition: 'MethodDefinition',
           NewExpression: 'NewExpression',
           ObjectExpression: 'ObjectExpression',
           ObjectPattern: 'ObjectPattern',
           Program: 'Program',
           Property: 'Property',
           RestElement: 'RestElement',
           ReturnStatement: 'ReturnStatement',
           SequenceExpression: 'SequenceExpression',
           SpreadElement: 'SpreadElement',
           Super: 'Super',
           SwitchCase: 'SwitchCase',
           SwitchStatement: 'SwitchStatement',
           TaggedTemplateExpression: 'TaggedTemplateExpression',
           TemplateElement: 'TemplateElement',
           TemplateLiteral: 'TemplateLiteral',
           ThisExpression: 'ThisExpression',
           ThrowStatement: 'ThrowStatement',
           TryStatement: 'TryStatement',
           UnaryExpression: 'UnaryExpression',
           UpdateExpression: 'UpdateExpression',
           VariableDeclaration: 'VariableDeclaration',
           VariableDeclarator: 'VariableDeclarator',
           WhileStatement: 'WhileStatement',
           WithStatement: 'WithStatement',
           YieldExpression: 'YieldExpression' },
        version: '3.1.3' },
     estraverse: 
      { version: '4.2.0',
        Syntax: 
         { AssignmentExpression: 'AssignmentExpression',
           AssignmentPattern: 'AssignmentPattern',
           ArrayExpression: 'ArrayExpression',
           ArrayPattern: 'ArrayPattern',
           ArrowFunctionExpression: 'ArrowFunctionExpression',
           AwaitExpression: 'AwaitExpression',
           BlockStatement: 'BlockStatement',
           BinaryExpression: 'BinaryExpression',
           BreakStatement: 'BreakStatement',
           CallExpression: 'CallExpression',
           CatchClause: 'CatchClause',
           ClassBody: 'ClassBody',
           ClassDeclaration: 'ClassDeclaration',
           ClassExpression: 'ClassExpression',
           ComprehensionBlock: 'ComprehensionBlock',
           ComprehensionExpression: 'ComprehensionExpression',
           ConditionalExpression: 'ConditionalExpression',
           ContinueStatement: 'ContinueStatement',
           DebuggerStatement: 'DebuggerStatement',
           DirectiveStatement: 'DirectiveStatement',
           DoWhileStatement: 'DoWhileStatement',
           EmptyStatement: 'EmptyStatement',
           ExportAllDeclaration: 'ExportAllDeclaration',
           ExportDefaultDeclaration: 'ExportDefaultDeclaration',
           ExportNamedDeclaration: 'ExportNamedDeclaration',
           ExportSpecifier: 'ExportSpecifier',
           ExpressionStatement: 'ExpressionStatement',
           ForStatement: 'ForStatement',
           ForInStatement: 'ForInStatement',
           ForOfStatement: 'ForOfStatement',
           FunctionDeclaration: 'FunctionDeclaration',
           FunctionExpression: 'FunctionExpression',
           GeneratorExpression: 'GeneratorExpression',
           Identifier: 'Identifier',
           IfStatement: 'IfStatement',
           ImportDeclaration: 'ImportDeclaration',
           ImportDefaultSpecifier: 'ImportDefaultSpecifier',
           ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
           ImportSpecifier: 'ImportSpecifier',
           Literal: 'Literal',
           LabeledStatement: 'LabeledStatement',
           LogicalExpression: 'LogicalExpression',
           MemberExpression: 'MemberExpression',
           MetaProperty: 'MetaProperty',
           MethodDefinition: 'MethodDefinition',
           ModuleSpecifier: 'ModuleSpecifier',
           NewExpression: 'NewExpression',
           ObjectExpression: 'ObjectExpression',
           ObjectPattern: 'ObjectPattern',
           Program: 'Program',
           Property: 'Property',
           RestElement: 'RestElement',
           ReturnStatement: 'ReturnStatement',
           SequenceExpression: 'SequenceExpression',
           SpreadElement: 'SpreadElement',
           Super: 'Super',
           SwitchStatement: 'SwitchStatement',
           SwitchCase: 'SwitchCase',
           TaggedTemplateExpression: 'TaggedTemplateExpression',
           TemplateElement: 'TemplateElement',
           TemplateLiteral: 'TemplateLiteral',
           ThisExpression: 'ThisExpression',
           ThrowStatement: 'ThrowStatement',
           TryStatement: 'TryStatement',
           UnaryExpression: 'UnaryExpression',
           UpdateExpression: 'UpdateExpression',
           VariableDeclaration: 'VariableDeclaration',
           VariableDeclarator: 'VariableDeclarator',
           WhileStatement: 'WhileStatement',
           WithStatement: 'WithStatement',
           YieldExpression: 'YieldExpression' },
        traverse: [Function: traverse],
        replace: [Function: replace],
        attachComments: [Function: attachComments],
        VisitorKeys: 
         { AssignmentExpression: [ 'left', 'right' ],
           AssignmentPattern: [ 'left', 'right' ],
           ArrayExpression: [ 'elements' ],
           ArrayPattern: [ 'elements' ],
           ArrowFunctionExpression: [ 'params', 'body' ],
           AwaitExpression: [ 'argument' ],
           BlockStatement: [ 'body' ],
           BinaryExpression: [ 'left', 'right' ],
           BreakStatement: [ 'label' ],
           CallExpression: [ 'callee', 'arguments' ],
           CatchClause: [ 'param', 'body' ],
           ClassBody: [ 'body' ],
           ClassDeclaration: [ 'id', 'superClass', 'body' ],
           ClassExpression: [ 'id', 'superClass', 'body' ],
           ComprehensionBlock: [ 'left', 'right' ],
           ComprehensionExpression: [ 'blocks', 'filter', 'body' ],
           ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
           ContinueStatement: [ 'label' ],
           DebuggerStatement: [],
           DirectiveStatement: [],
           DoWhileStatement: [ 'body', 'test' ],
           EmptyStatement: [],
           ExportAllDeclaration: [ 'source' ],
           ExportDefaultDeclaration: [ 'declaration' ],
           ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
           ExportSpecifier: [ 'exported', 'local' ],
           ExpressionStatement: [ 'expression' ],
           ForStatement: [ 'init', 'test', 'update', 'body' ],
           ForInStatement: [ 'left', 'right', 'body' ],
           ForOfStatement: [ 'left', 'right', 'body' ],
           FunctionDeclaration: [ 'id', 'params', 'body' ],
           FunctionExpression: [ 'id', 'params', 'body' ],
           GeneratorExpression: [ 'blocks', 'filter', 'body' ],
           Identifier: [],
           IfStatement: [ 'test', 'consequent', 'alternate' ],
           ImportDeclaration: [ 'specifiers', 'source' ],
           ImportDefaultSpecifier: [ 'local' ],
           ImportNamespaceSpecifier: [ 'local' ],
           ImportSpecifier: [ 'imported', 'local' ],
           Literal: [],
           LabeledStatement: [ 'label', 'body' ],
           LogicalExpression: [ 'left', 'right' ],
           MemberExpression: [ 'object', 'property' ],
           MetaProperty: [ 'meta', 'property' ],
           MethodDefinition: [ 'key', 'value' ],
           ModuleSpecifier: [],
           NewExpression: [ 'callee', 'arguments' ],
           ObjectExpression: [ 'properties' ],
           ObjectPattern: [ 'properties' ],
           Program: [ 'body' ],
           Property: [ 'key', 'value' ],
           RestElement: [ 'argument' ],
           ReturnStatement: [ 'argument' ],
           SequenceExpression: [ 'expressions' ],
           SpreadElement: [ 'argument' ],
           Super: [],
           SwitchStatement: [ 'discriminant', 'cases' ],
           SwitchCase: [ 'test', 'consequent' ],
           TaggedTemplateExpression: [ 'tag', 'quasi' ],
           TemplateElement: [],
           TemplateLiteral: [ 'quasis', 'expressions' ],
           ThisExpression: [],
           ThrowStatement: [ 'argument' ],
           TryStatement: [ 'block', 'handler', 'finalizer' ],
           UnaryExpression: [ 'argument' ],
           UpdateExpression: [ 'argument' ],
           VariableDeclaration: [ 'declarations' ],
           VariableDeclarator: [ 'id', 'init' ],
           WhileStatement: [ 'test', 'body' ],
           WithStatement: [ 'object', 'body' ],
           YieldExpression: [ 'argument' ] },
        VisitorOption: { Break: {}, Skip: {}, Remove: {} },
        Controller: [Function: Controller],
        cloneEnvironment: [Function] } },
  ContextBuilder: 
   ContextBuilder {
     domain: null,
     _events: 
      { aop_initialize: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        aop_wire: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        'finishing bean setup': 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        inherit: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        initialize: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        inject: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        instantiate: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        run: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        stashing: 
         [ [Function: _parseBeanStructure],
           [Function: _parseBeanStructure],
           [Function: _parseBeanStructure] ],
        '0x2': 
         [ [Function: processApplicationStack],
           [Function: processApplicationStack],
           [Function: processApplicationStack] ] },
     _eventsCount: 10,
     _maxListeners: undefined,
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'ContextBuilder', context: {} },
     annotationParser: 
      [ AfterAnnotationParser: AfterAnnotationParser {
          annotation: [Function: After],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        AspectAnnotationParser: AspectParser {
          annotation: [Function: Aspect],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        AutowireAnnotationParser: { [Function: AutowrieAnnotationParser]
          QualifierAnnotation: [Function: Qualifier],
          annotation: [Function: Autowire],
          camelcase: [Function],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        BeanAnnotationParser: BeanParser {
          annotation: [Function: Bean],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        BeforeAnnotationParser: BeforeAnnotationParser {
          annotation: [Function: Before],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ComponentAnnotationParser: ComponentParser {
          annotation: [Function: Component],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ConfigurationAnnotationParser: ConfigurationParser {
          annotation: [Function: Configuration],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ContextAnnotationParser: ContextParser {
          annotation: [Function: Context],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ControllerAnnotationParser: ControllerParser {
          annotation: [Function: Controller],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        InheritsAnnotationParser: InheritsAnnotationParser {
          globals: [],
          annotation: [Function: Inherits],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        InitAnnotationParser: InitParser {
          annotation: [Function: Init],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        NamespaceAnnotationParser: NamespaceParser {
          annotation: [Function: Namespace],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ParamAnnotationParser: { [Function: paramParser]
          annotation: [Function: param],
          doctrine: 
           { version: '3.0.0',
             parse: [Function: parse],
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             unwrapComment: [Function: unwrapComment],
             Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             Error: [Function: DoctrineError],
             type: 
              { Syntax: 
                 { NullableLiteral: 'NullableLiteral',
                   AllLiteral: 'AllLiteral',
                   NullLiteral: 'NullLiteral',
                   UndefinedLiteral: 'UndefinedLiteral',
                   VoidLiteral: 'VoidLiteral',
                   UnionType: 'UnionType',
                   ArrayType: 'ArrayType',
                   RecordType: 'RecordType',
                   FieldType: 'FieldType',
                   FunctionType: 'FunctionType',
                   ParameterType: 'ParameterType',
                   RestType: 'RestType',
                   NonNullableType: 'NonNullableType',
                   OptionalType: 'OptionalType',
                   NullableType: 'NullableType',
                   NameExpression: 'NameExpression',
                   TypeApplication: 'TypeApplication',
                   StringLiteralType: 'StringLiteralType',
                   NumericLiteralType: 'NumericLiteralType',
                   BooleanLiteralType: 'BooleanLiteralType' },
                parseType: [Function: parseType],
                parseParamType: [Function: parseParamType],
                stringify: [Function: stringify] } },
          expressionParser: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        PointCuteAnnotationParser: PointCutParser {
          wildcard: [Function],
          md5: [Function],
          annotation: [Function: PointCut],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        PropertiesAnnotationParser: PropertiesParser {
          processors: 
           { '.properties': 
              { [Function: XMLPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] },
                propertiesReader: 
                 { parse: [Function],
                   stringify: [Function],
                   createStringifier: [Function: createStringifier] } },
             '.json': 
              { [Function: JsonPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] } },
             '.xml': 
              { [Function: XMLPropertiesProcessor]
                Promise: 
                 { [Function: Promise]
                   TypeError: [Function: TypeError],
                   RangeError: [Function: RangeError],
                   CancellationError: [Function: SubError],
                   TimeoutError: [Function: SubError],
                   OperationalError: [Function: OperationalError],
                   RejectionError: [Function: OperationalError],
                   AggregateError: [Function: SubError],
                   _peekContext: [Function],
                   onPossiblyUnhandledRejection: [Function],
                   onUnhandledRejectionHandled: [Function],
                   longStackTraces: [Function],
                   hasLongStackTraces: [Function],
                   config: [Function],
                   getNewLibraryCopy: [Function],
                   is: [Function],
                   fromCallback: [Function],
                   fromNode: [Function],
                   all: [Function],
                   cast: [Function],
                   fulfilled: [Function],
                   resolve: [Function],
                   rejected: [Function],
                   reject: [Function],
                   setScheduler: [Function],
                   pending: [Function],
                   defer: [Function],
                   method: [Function],
                   try: [Function],
                   attempt: [Function],
                   bind: [Function],
                   PromiseInspection: [Function: PromiseInspection],
                   join: [Function],
                   Promise: [Circular],
                   version: '3.5.3',
                   map: [Function],
                   using: [Function],
                   delay: [Function],
                   coroutine: { [Function] addYieldHandler: [Function] },
                   spawn: [Function],
                   promisify: [Function],
                   promisifyAll: [Function],
                   props: [Function],
                   race: [Function],
                   reduce: [Function],
                   settle: [Function],
                   some: [Function],
                   _SomePromiseArray: [Function: SomePromiseArray],
                   filter: [Function],
                   each: [Function],
                   mapSeries: [Function: PromiseMapSeries],
                   any: [Function],
                   noConflict: [Function: noConflict] } } },
          glob: 
           { [Function: glob]
             sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
             GlobSync: [Function: GlobSync],
             glob: [Circular],
             hasMagic: [Function],
             Glob: 
              { [Function: Glob]
                super_: 
                 { [Function: EventEmitter]
                   EventEmitter: [Circular],
                   usingDomains: false,
                   defaultMaxListeners: [Getter/Setter],
                   init: [Function],
                   listenerCount: [Function] } } },
          path: 
           { resolve: [Function: resolve],
             normalize: [Function: normalize],
             isAbsolute: [Function: isAbsolute],
             join: [Function: join],
             relative: [Function: relative],
             _makeLong: [Function: _makeLong],
             dirname: [Function: dirname],
             basename: [Function: basename],
             extname: [Function: extname],
             format: [Function: format],
             parse: [Function: parse],
             sep: '/',
             delimiter: ':',
             win32: 
              { resolve: [Function: resolve],
                normalize: [Function: normalize],
                isAbsolute: [Function: isAbsolute],
                join: [Function: join],
                relative: [Function: relative],
                _makeLong: [Function: _makeLong],
                dirname: [Function: dirname],
                basename: [Function: basename],
                extname: [Function: extname],
                format: [Function: format],
                parse: [Function: parse],
                sep: '\\',
                delimiter: ';',
                win32: [Circular],
                posix: [Circular] },
             posix: [Circular] },
          fs: 
           { constants: 
              { O_RDONLY: 0,
                O_WRONLY: 1,
                O_RDWR: 2,
                S_IFMT: 61440,
                S_IFREG: 32768,
                S_IFDIR: 16384,
                S_IFCHR: 8192,
                S_IFBLK: 24576,
                S_IFIFO: 4096,
                S_IFLNK: 40960,
                S_IFSOCK: 49152,
                O_CREAT: 512,
                O_EXCL: 2048,
                O_NOCTTY: 131072,
                O_TRUNC: 1024,
                O_APPEND: 8,
                O_DIRECTORY: 1048576,
                O_NOFOLLOW: 256,
                O_SYNC: 128,
                O_DSYNC: 4194304,
                O_SYMLINK: 2097152,
                O_NONBLOCK: 4,
                S_IRWXU: 448,
                S_IRUSR: 256,
                S_IWUSR: 128,
                S_IXUSR: 64,
                S_IRWXG: 56,
                S_IRGRP: 32,
                S_IWGRP: 16,
                S_IXGRP: 8,
                S_IRWXO: 7,
                S_IROTH: 4,
                S_IWOTH: 2,
                S_IXOTH: 1,
                F_OK: 0,
                R_OK: 4,
                W_OK: 2,
                X_OK: 1,
                UV_FS_COPYFILE_EXCL: 1,
                COPYFILE_EXCL: 1 },
             Stats: [Function: Stats],
             F_OK: 0,
             R_OK: 4,
             W_OK: 2,
             X_OK: 1,
             access: [Function],
             accessSync: [Function],
             exists: [Function],
             existsSync: [Function],
             readFile: [Function],
             readFileSync: [Function],
             close: [Function],
             closeSync: [Function],
             open: [Function],
             openSync: [Function],
             read: [Function],
             readSync: [Function],
             write: [Function],
             writeSync: [Function],
             rename: [Function],
             renameSync: [Function],
             truncate: [Function],
             truncateSync: [Function],
             ftruncate: [Function],
             ftruncateSync: [Function],
             rmdir: [Function],
             rmdirSync: [Function],
             fdatasync: [Function],
             fdatasyncSync: [Function],
             fsync: [Function],
             fsyncSync: [Function],
             mkdir: [Function],
             mkdirSync: [Function],
             readdir: [Function],
             readdirSync: [Function],
             fstat: [Function],
             lstat: [Function],
             stat: [Function],
             fstatSync: [Function],
             lstatSync: [Function],
             statSync: [Function],
             readlink: [Function],
             readlinkSync: [Function],
             symlink: [Function],
             symlinkSync: [Function],
             link: [Function],
             linkSync: [Function],
             unlink: [Function],
             unlinkSync: [Function],
             fchmod: [Function],
             fchmodSync: [Function],
             lchmod: [Function],
             lchmodSync: [Function],
             chmod: [Function],
             chmodSync: [Function],
             lchown: [Function],
             lchownSync: [Function],
             fchown: [Function],
             fchownSync: [Function],
             chown: [Function],
             chownSync: [Function],
             _toUnixTimestamp: [Function: toUnixTimestamp],
             utimes: [Function],
             utimesSync: [Function],
             futimes: [Function],
             futimesSync: [Function],
             writeFile: [Function],
             writeFileSync: [Function],
             appendFile: [Function],
             appendFileSync: [Function],
             watch: [Function],
             watchFile: [Function],
             unwatchFile: [Function],
             realpathSync: [Function: realpathSync],
             realpath: [Function: realpath],
             mkdtemp: [Function],
             mkdtempSync: [Function],
             copyFile: [Function],
             copyFileSync: [Function],
             createReadStream: [Function],
             ReadStream: 
              { [Function: ReadStream]
                super_: 
                 { [Function: Readable]
                   ReadableState: [Function: ReadableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: [Circular],
                      Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                      Duplex: { [Function: Duplex] super_: [Circular] },
                      Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                   _fromList: [Function: fromList] } },
             FileReadStream: 
              { [Function: ReadStream]
                super_: 
                 { [Function: Readable]
                   ReadableState: [Function: ReadableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: [Circular],
                      Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
                      Duplex: { [Function: Duplex] super_: [Circular] },
                      Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
                   _fromList: [Function: fromList] } },
             createWriteStream: [Function],
             WriteStream: 
              { [Function: WriteStream]
                super_: 
                 { [Function: Writable]
                   WritableState: [Function: WritableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] },
                      Writable: [Circular],
                      Duplex: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } },
                      Transform: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Object] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
             FileWriteStream: 
              { [Function: WriteStream]
                super_: 
                 { [Function: Writable]
                   WritableState: [Function: WritableState],
                   super_: 
                    { [Function: Stream]
                      super_: 
                       { [Function: EventEmitter]
                         EventEmitter: [Circular],
                         usingDomains: false,
                         defaultMaxListeners: [Getter/Setter],
                         init: [Function],
                         listenerCount: [Function] },
                      Readable: 
                       { [Function: Readable]
                         ReadableState: [Function: ReadableState],
                         super_: [Circular],
                         _fromList: [Function: fromList] },
                      Writable: [Circular],
                      Duplex: 
                       { [Function: Duplex]
                         super_: 
                          { [Function: Readable]
                            ReadableState: [Function: ReadableState],
                            super_: [Circular],
                            _fromList: [Function: fromList] } },
                      Transform: 
                       { [Function: Transform]
                         super_: 
                          { [Function: Duplex]
                            super_: 
                             { [Function: Readable]
                               ReadableState: [Function: ReadableState],
                               super_: [Circular],
                               _fromList: [Function: fromList] } } },
                      PassThrough: 
                       { [Function: PassThrough]
                         super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Object] } } },
                      Stream: [Circular],
                      _isUint8Array: [Function: isUint8Array],
                      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
          Promise: 
           { [Function: Promise]
             TypeError: [Function: TypeError],
             RangeError: [Function: RangeError],
             CancellationError: [Function: SubError],
             TimeoutError: [Function: SubError],
             OperationalError: [Function: OperationalError],
             RejectionError: [Function: OperationalError],
             AggregateError: [Function: SubError],
             _peekContext: [Function],
             onPossiblyUnhandledRejection: [Function],
             onUnhandledRejectionHandled: [Function],
             longStackTraces: [Function],
             hasLongStackTraces: [Function],
             config: [Function],
             getNewLibraryCopy: [Function],
             is: [Function],
             fromCallback: [Function],
             fromNode: [Function],
             all: [Function],
             cast: [Function],
             fulfilled: [Function],
             resolve: [Function],
             rejected: [Function],
             reject: [Function],
             setScheduler: [Function],
             pending: [Function],
             defer: [Function],
             method: [Function],
             try: [Function],
             attempt: [Function],
             bind: [Function],
             PromiseInspection: [Function: PromiseInspection],
             join: [Function],
             Promise: [Circular],
             version: '3.5.3',
             map: [Function],
             using: [Function],
             delay: [Function],
             coroutine: { [Function] addYieldHandler: [Function] },
             spawn: [Function],
             promisify: [Function],
             promisifyAll: [Function],
             props: [Function],
             race: [Function],
             reduce: [Function],
             settle: [Function],
             some: [Function],
             _SomePromiseArray: [Function: SomePromiseArray],
             filter: [Function],
             each: [Function],
             mapSeries: [Function: PromiseMapSeries],
             any: [Function],
             noConflict: [Function: noConflict] },
          camelcase: [Function],
          annotation: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          logger: Logger { category: 'PropertiesParser', context: {} } },
        PrototypeAnnotationParser: Prototype {
          annotation: [Function: Prototype],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        QualifierAnnotationParser: QualifierParser {
          annotation: [Function: Qualifier],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        ResourceAnnotationParser: ResourceParser {
          annotation: [Function: Resource],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        ResourceParser: ResourceParser {
          annotation: [Function: Resource],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        RunAnnotationParser: RunParser {
          annotation: [Function: Run],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        ServiceAnnotationParser: ServiceParser {
          annotation: [Function: Service],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } },
        StoreAnnotationParser: { [Function: StoreParser]
          annotation: [Function: Store],
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } },
          util: 
           { _errnoException: [Function: _errnoException],
             _exceptionWithHostPort: [Function: _exceptionWithHostPort],
             _extend: [Function: _extend],
             callbackify: [Function: callbackify],
             debuglog: [Function: debuglog],
             deprecate: [Function: deprecate],
             format: [Function: format],
             inherits: [Function: inherits],
             inspect: 
              { [Function: inspect]
                custom: Symbol(util.inspect.custom),
                colors: 
                 { bold: [ 1, 22 ],
                   italic: [ 3, 23 ],
                   underline: [ 4, 24 ],
                   inverse: [ 7, 27 ],
                   white: [ 37, 39 ],
                   grey: [ 90, 39 ],
                   black: [ 30, 39 ],
                   blue: [ 34, 39 ],
                   cyan: [ 36, 39 ],
                   green: [ 32, 39 ],
                   magenta: [ 35, 39 ],
                   red: [ 31, 39 ],
                   yellow: [ 33, 39 ] },
                styles: 
                 { special: 'cyan',
                   number: 'yellow',
                   boolean: 'yellow',
                   undefined: 'grey',
                   null: 'bold',
                   string: 'green',
                   symbol: 'green',
                   date: 'magenta',
                   regexp: 'red' } },
             isArray: [Function: isArray],
             isBoolean: [Function: isBoolean],
             isBuffer: [Function: isBuffer],
             isNull: [Function: isNull],
             isNullOrUndefined: [Function: isNullOrUndefined],
             isNumber: [Function: isNumber],
             isString: [Function: isString],
             isSymbol: [Function: isSymbol],
             isUndefined: [Function: isUndefined],
             isRegExp: [Function: isRegExp],
             isObject: [Function: isObject],
             isDate: [Function: isDate],
             isError: [Function: isError],
             isFunction: [Function: isFunction],
             isPrimitive: [Function: isPrimitive],
             log: [Function: log],
             promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
             TextDecoder: [Function: TextDecoder],
             TextEncoder: [Function: TextEncoder],
             debug: [Function: deprecated],
             error: [Function: deprecated],
             print: [Function: deprecated],
             puts: [Function: deprecated] } },
        TypeAnnotationParser: type {
          annotation: 
           { [Function: type]
             super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
          doctrine: 
           { version: '3.0.0',
             parse: [Function: parse],
             parseType: [Function: parseType],
             parseParamType: [Function: parseParamType],
             unwrapComment: [Function: unwrapComment],
             Syntax: 
              { NullableLiteral: 'NullableLiteral',
                AllLiteral: 'AllLiteral',
                NullLiteral: 'NullLiteral',
                UndefinedLiteral: 'UndefinedLiteral',
                VoidLiteral: 'VoidLiteral',
                UnionType: 'UnionType',
                ArrayType: 'ArrayType',
                RecordType: 'RecordType',
                FieldType: 'FieldType',
                FunctionType: 'FunctionType',
                ParameterType: 'ParameterType',
                RestType: 'RestType',
                NonNullableType: 'NonNullableType',
                OptionalType: 'OptionalType',
                NullableType: 'NullableType',
                NameExpression: 'NameExpression',
                TypeApplication: 'TypeApplication',
                StringLiteralType: 'StringLiteralType',
                NumericLiteralType: 'NumericLiteralType',
                BooleanLiteralType: 'BooleanLiteralType' },
             Error: [Function: DoctrineError],
             type: 
              { Syntax: 
                 { NullableLiteral: 'NullableLiteral',
                   AllLiteral: 'AllLiteral',
                   NullLiteral: 'NullLiteral',
                   UndefinedLiteral: 'UndefinedLiteral',
                   VoidLiteral: 'VoidLiteral',
                   UnionType: 'UnionType',
                   ArrayType: 'ArrayType',
                   RecordType: 'RecordType',
                   FieldType: 'FieldType',
                   FunctionType: 'FunctionType',
                   ParameterType: 'ParameterType',
                   RestType: 'RestType',
                   NonNullableType: 'NonNullableType',
                   OptionalType: 'OptionalType',
                   NullableType: 'NullableType',
                   NameExpression: 'NameExpression',
                   TypeApplication: 'TypeApplication',
                   StringLiteralType: 'StringLiteralType',
                   NumericLiteralType: 'NumericLiteralType',
                   BooleanLiteralType: 'BooleanLiteralType' },
                parseType: [Function: parseType],
                parseParamType: [Function: parseParamType],
                stringify: [Function: stringify] } },
          expressionParser: undefined,
          logManager: 
           LogManager {
             configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
             categories: 
              { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
                ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
                StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
                DependencyBuilder: 
                 { appenders: [ 'default', 'DependencyBuilder' ],
                   level: 'DEBUG' },
                PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
                Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
             logger: Logger { category: 'default', context: {} } } } ],
     stages: 
      [ _AOP_INITIALIZE: 'aop_initialize',
        _AOP_WIRE: 'aop_wire',
        _FINISH_SETUP_: 'finishing bean setup',
        _INHERIT_: 'inherit',
        _INITIALIZE_: 'initialize',
        _INJECT_: 'inject',
        _INSTANTIATE_: 'instantiate',
        _RUN_: 'run',
        _STASHING_: 'stashing' ],
     promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.3',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: { [Function] addYieldHandler: [Function] },
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        noConflict: [Function: noConflict] } },
  Factory: 
   Factory {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     modulePath: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/factory',
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: 
         { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
           ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
           StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
           DependencyBuilder: 
            { appenders: [ 'default', 'DependencyBuilder' ],
              level: 'DEBUG' },
           PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
           Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
        logger: Logger { category: 'default', context: {} } },
     logger: Logger { category: 'default', context: {} },
     stacks: [],
     dependencyBuilder: 
      DependencyBuilder {
        logManager: 
         LogManager {
           configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
           categories: 
            { default: { appenders: [ 'default', 'defaultFile' ], level: 'DEBUG' },
              ContextBuilder: { appenders: [ 'default', 'ContextBuilder' ], level: 'DEBUG' },
              StructureParser: { appenders: [ 'default', 'StructureParser' ], level: 'DEBUG' },
              DependencyBuilder: 
               { appenders: [ 'default', 'DependencyBuilder' ],
                 level: 'DEBUG' },
              PropertiesParser: { appenders: [ 'default', 'PropertiesParser' ], level: 'TRACE' },
              Foundation: { appenders: [ 'default', 'Foundation' ], level: 'TRACE' } },
           logger: Logger { category: 'default', context: {} } },
        logger: Logger { category: 'DependencyBuilder', context: {} },
        glob: 
         { [Function: glob]
           sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
           GlobSync: [Function: GlobSync],
           glob: [Circular],
           hasMagic: [Function],
           Glob: 
            { [Function: Glob]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] } } },
        _: 
         { [Function: lodash]
           templateSettings: 
            { escape: /<%-([\s\S]+?)%>/g,
              evaluate: /<%([\s\S]+?)%>/g,
              interpolate: /<%=([\s\S]+?)%>/g,
              variable: '',
              imports: { _: [Circular] } },
           after: [Function: after],
           ary: [Function: ary],
           assign: [Function],
           assignIn: [Function],
           assignInWith: [Function],
           assignWith: [Function],
           at: [Function],
           before: [Function: before],
           bind: { [Function] placeholder: [Circular] },
           bindAll: [Function],
           bindKey: { [Function] placeholder: [Circular] },
           castArray: [Function: castArray],
           chain: [Function: chain],
           chunk: [Function: chunk],
           compact: [Function: compact],
           concat: [Function: concat],
           cond: [Function: cond],
           conforms: [Function: conforms],
           constant: [Function: constant],
           countBy: [Function],
           create: [Function: create],
           curry: { [Function: curry] placeholder: [Circular] },
           curryRight: { [Function: curryRight] placeholder: [Circular] },
           debounce: [Function: debounce],
           defaults: [Function],
           defaultsDeep: [Function],
           defer: [Function],
           delay: [Function],
           difference: [Function],
           differenceBy: [Function],
           differenceWith: [Function],
           drop: [Function: drop],
           dropRight: [Function: dropRight],
           dropRightWhile: [Function: dropRightWhile],
           dropWhile: [Function: dropWhile],
           fill: [Function: fill],
           filter: [Function: filter],
           flatMap: [Function: flatMap],
           flatMapDeep: [Function: flatMapDeep],
           flatMapDepth: [Function: flatMapDepth],
           flatten: [Function: flatten],
           flattenDeep: [Function: flattenDeep],
           flattenDepth: [Function: flattenDepth],
           flip: [Function: flip],
           flow: [Function],
           flowRight: [Function],
           fromPairs: [Function: fromPairs],
           functions: [Function: functions],
           functionsIn: [Function: functionsIn],
           groupBy: [Function],
           initial: [Function: initial],
           intersection: [Function],
           intersectionBy: [Function],
           intersectionWith: [Function],
           invert: [Function],
           invertBy: [Function],
           invokeMap: [Function],
           iteratee: [Function: iteratee],
           keyBy: [Function],
           keys: [Function: keys],
           keysIn: [Function: keysIn],
           map: [Function: map],
           mapKeys: [Function: mapKeys],
           mapValues: [Function: mapValues],
           matches: [Function: matches],
           matchesProperty: [Function: matchesProperty],
           memoize: { [Function: memoize] Cache: [Function: MapCache] },
           merge: [Function],
           mergeWith: [Function],
           method: [Function],
           methodOf: [Function],
           mixin: [Function: mixin],
           negate: [Function: negate],
           nthArg: [Function: nthArg],
           omit: [Function],
           omitBy: [Function: omitBy],
           once: [Function: once],
           orderBy: [Function: orderBy],
           over: [Function],
           overArgs: [Function],
           overEvery: [Function],
           overSome: [Function],
           partial: { [Function] placeholder: [Circular] },
           partialRight: { [Function] placeholder: [Circular] },
           partition: [Function],
           pick: [Function],
           pickBy: [Function: pickBy],
           property: [Function: property],
           propertyOf: [Function: propertyOf],
           pull: [Function],
           pullAll: [Function: pullAll],
           pullAllBy: [Function: pullAllBy],
           pullAllWith: [Function: pullAllWith],
           pullAt: [Function],
           range: [Function],
           rangeRight: [Function],
           rearg: [Function],
           reject: [Function: reject],
           remove: [Function: remove],
           rest: [Function: rest],
           reverse: [Function: reverse],
           sampleSize: [Function: sampleSize],
           set: [Function: set],
           setWith: [Function: setWith],
           shuffle: [Function: shuffle],
           slice: [Function: slice],
           sortBy: [Function],
           sortedUniq: [Function: sortedUniq],
           sortedUniqBy: [Function: sortedUniqBy],
           split: [Function: split],
           spread: [Function: spread],
           tail: [Function: tail],
           take: [Function: take],
           takeRight: [Function: takeRight],
           takeRightWhile: [Function: takeRightWhile],
           takeWhile: [Function: takeWhile],
           tap: [Function: tap],
           throttle: [Function: throttle],
           thru: [Function: thru],
           toArray: [Function: toArray],
           toPairs: [Function],
           toPairsIn: [Function],
           toPath: [Function: toPath],
           toPlainObject: [Function: toPlainObject],
           transform: [Function: transform],
           unary: [Function: unary],
           union: [Function],
           unionBy: [Function],
           unionWith: [Function],
           uniq: [Function: uniq],
           uniqBy: [Function: uniqBy],
           uniqWith: [Function: uniqWith],
           unset: [Function: unset],
           unzip: [Function: unzip],
           unzipWith: [Function: unzipWith],
           update: [Function: update],
           updateWith: [Function: updateWith],
           values: [Function: values],
           valuesIn: [Function: valuesIn],
           without: [Function],
           words: [Function: words],
           wrap: [Function: wrap],
           xor: [Function],
           xorBy: [Function],
           xorWith: [Function],
           zip: [Function],
           zipObject: [Function: zipObject],
           zipObjectDeep: [Function: zipObjectDeep],
           zipWith: [Function],
           entries: [Function],
           entriesIn: [Function],
           extend: [Function],
           extendWith: [Function],
           add: [Function],
           attempt: [Function],
           camelCase: [Function],
           capitalize: [Function: capitalize],
           ceil: [Function],
           clamp: [Function: clamp],
           clone: [Function: clone],
           cloneDeep: [Function: cloneDeep],
           cloneDeepWith: [Function: cloneDeepWith],
           cloneWith: [Function: cloneWith],
           conformsTo: [Function: conformsTo],
           deburr: [Function: deburr],
           defaultTo: [Function: defaultTo],
           divide: [Function],
           endsWith: [Function: endsWith],
           eq: [Function: eq],
           escape: [Function: escape],
           escapeRegExp: [Function: escapeRegExp],
           every: [Function: every],
           find: [Function],
           findIndex: [Function: findIndex],
           findKey: [Function: findKey],
           findLast: [Function],
           findLastIndex: [Function: findLastIndex],
           findLastKey: [Function: findLastKey],
           floor: [Function],
           forEach: [Function: forEach],
           forEachRight: [Function: forEachRight],
           forIn: [Function: forIn],
           forInRight: [Function: forInRight],
           forOwn: [Function: forOwn],
           forOwnRight: [Function: forOwnRight],
           get: [Function: get],
           gt: [Function],
           gte: [Function],
           has: [Function: has],
           hasIn: [Function: hasIn],
           head: [Function: head],
           identity: [Function: identity],
           includes: [Function: includes],
           indexOf: [Function: indexOf],
           inRange: [Function: inRange],
           invoke: [Function],
           isArguments: [Function: baseIsArguments],
           isArray: [Function: isArray],
           isArrayBuffer: [Function],
           isArrayLike: [Function: isArrayLike],
           isArrayLikeObject: [Function: isArrayLikeObject],
           isBoolean: [Function: isBoolean],
           isBuffer: [Function: isBuffer],
           isDate: [Function],
           isElement: [Function: isElement],
           isEmpty: [Function: isEmpty],
           isEqual: [Function: isEqual],
           isEqualWith: [Function: isEqualWith],
           isError: [Function: isError],
           isFinite: [Function: isFinite],
           isFunction: [Function: isFunction],
           isInteger: [Function: isInteger],
           isLength: [Function: isLength],
           isMap: [Function],
           isMatch: [Function: isMatch],
           isMatchWith: [Function: isMatchWith],
           isNaN: [Function: isNaN],
           isNative: [Function: isNative],
           isNil: [Function: isNil],
           isNull: [Function: isNull],
           isNumber: [Function: isNumber],
           isObject: [Function: isObject],
           isObjectLike: [Function: isObjectLike],
           isPlainObject: [Function: isPlainObject],
           isRegExp: [Function],
           isSafeInteger: [Function: isSafeInteger],
           isSet: [Function],
           isString: [Function: isString],
           isSymbol: [Function: isSymbol],
           isTypedArray: [Function],
           isUndefined: [Function: isUndefined],
           isWeakMap: [Function: isWeakMap],
           isWeakSet: [Function: isWeakSet],
           join: [Function: join],
           kebabCase: [Function],
           last: [Function: last],
           lastIndexOf: [Function: lastIndexOf],
           lowerCase: [Function],
           lowerFirst: [Function],
           lt: [Function],
           lte: [Function],
           max: [Function: max],
           maxBy: [Function: maxBy],
           mean: [Function: mean],
           meanBy: [Function: meanBy],
           min: [Function: min],
           minBy: [Function: minBy],
           stubArray: [Function: stubArray],
           stubFalse: [Function: stubFalse],
           stubObject: [Function: stubObject],
           stubString: [Function: stubString],
           stubTrue: [Function: stubTrue],
           multiply: [Function],
           nth: [Function: nth],
           noConflict: [Function: noConflict],
           noop: [Function: noop],
           now: [Function],
           pad: [Function: pad],
           padEnd: [Function: padEnd],
           padStart: [Function: padStart],
           parseInt: [Function: parseInt],
           random: [Function: random],
           reduce: [Function: reduce],
           reduceRight: [Function: reduceRight],
           repeat: [Function: repeat],
           replace: [Function: replace],
           result: [Function: result],
           round: [Function],
           runInContext: [Function: runInContext],
           sample: [Function: sample],
           size: [Function: size],
           snakeCase: [Function],
           some: [Function: some],
           sortedIndex: [Function: sortedIndex],
           sortedIndexBy: [Function: sortedIndexBy],
           sortedIndexOf: [Function: sortedIndexOf],
           sortedLastIndex: [Function: sortedLastIndex],
           sortedLastIndexBy: [Function: sortedLastIndexBy],
           sortedLastIndexOf: [Function: sortedLastIndexOf],
           startCase: [Function],
           startsWith: [Function: startsWith],
           subtract: [Function],
           sum: [Function: sum],
           sumBy: [Function: sumBy],
           template: [Function: template],
           times: [Function: times],
           toFinite: [Function: toFinite],
           toInteger: [Function: toInteger],
           toLength: [Function: toLength],
           toLower: [Function: toLower],
           toNumber: [Function: toNumber],
           toSafeInteger: [Function: toSafeInteger],
           toString: [Function: toString],
           toUpper: [Function: toUpper],
           trim: [Function: trim],
           trimEnd: [Function: trimEnd],
           trimStart: [Function: trimStart],
           truncate: [Function: truncate],
           unescape: [Function: unescape],
           uniqueId: [Function: uniqueId],
           upperCase: [Function],
           upperFirst: [Function],
           each: [Function: forEach],
           eachRight: [Function: forEachRight],
           first: [Function: head],
           VERSION: '4.17.11',
           _: [Circular] },
        toposort: [Function: Toposort],
        util: 
         { _errnoException: [Function: _errnoException],
           _exceptionWithHostPort: [Function: _exceptionWithHostPort],
           _extend: [Function: _extend],
           callbackify: [Function: callbackify],
           debuglog: [Function: debuglog],
           deprecate: [Function: deprecate],
           format: [Function: format],
           inherits: [Function: inherits],
           inspect: 
            { [Function: inspect]
              custom: Symbol(util.inspect.custom),
              colors: 
               { bold: [ 1, 22 ],
                 italic: [ 3, 23 ],
                 underline: [ 4, 24 ],
                 inverse: [ 7, 27 ],
                 white: [ 37, 39 ],
                 grey: [ 90, 39 ],
                 black: [ 30, 39 ],
                 blue: [ 34, 39 ],
                 cyan: [ 36, 39 ],
                 green: [ 32, 39 ],
                 magenta: [ 35, 39 ],
                 red: [ 31, 39 ],
                 yellow: [ 33, 39 ] },
              styles: 
               { special: 'cyan',
                 number: 'yellow',
                 boolean: 'yellow',
                 undefined: 'grey',
                 null: 'bold',
                 string: 'green',
                 symbol: 'green',
                 date: 'magenta',
                 regexp: 'red' } },
           isArray: [Function: isArray],
           isBoolean: [Function: isBoolean],
           isBuffer: [Function: isBuffer],
           isNull: [Function: isNull],
           isNullOrUndefined: [Function: isNullOrUndefined],
           isNumber: [Function: isNumber],
           isString: [Function: isString],
           isSymbol: [Function: isSymbol],
           isUndefined: [Function: isUndefined],
           isRegExp: [Function: isRegExp],
           isObject: [Function: isObject],
           isDate: [Function: isDate],
           isError: [Function: isError],
           isFunction: [Function: isFunction],
           isPrimitive: [Function: isPrimitive],
           log: [Function: log],
           promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
           TextDecoder: [Function: TextDecoder],
           TextEncoder: [Function: TextEncoder],
           debug: [Function: deprecated],
           error: [Function: deprecated],
           print: [Function: deprecated],
           puts: [Function: deprecated] },
        path: 
         { resolve: [Function: resolve],
           normalize: [Function: normalize],
           isAbsolute: [Function: isAbsolute],
           join: [Function: join],
           relative: [Function: relative],
           _makeLong: [Function: _makeLong],
           dirname: [Function: dirname],
           basename: [Function: basename],
           extname: [Function: extname],
           format: [Function: format],
           parse: [Function: parse],
           sep: '/',
           delimiter: ':',
           win32: 
            { resolve: [Function: resolve],
              normalize: [Function: normalize],
              isAbsolute: [Function: isAbsolute],
              join: [Function: join],
              relative: [Function: relative],
              _makeLong: [Function: _makeLong],
              dirname: [Function: dirname],
              basename: [Function: basename],
              extname: [Function: extname],
              format: [Function: format],
              parse: [Function: parse],
              sep: '\\',
              delimiter: ';',
              win32: [Circular],
              posix: [Circular] },
           posix: [Circular] } },
     esprima: 
      { parse: [Function: parse],
        tokenize: [Function: tokenize],
        Syntax: 
         { AssignmentExpression: 'AssignmentExpression',
           AssignmentPattern: 'AssignmentPattern',
           ArrayExpression: 'ArrayExpression',
           ArrayPattern: 'ArrayPattern',
           ArrowFunctionExpression: 'ArrowFunctionExpression',
           BlockStatement: 'BlockStatement',
           BinaryExpression: 'BinaryExpression',
           BreakStatement: 'BreakStatement',
           CallExpression: 'CallExpression',
           CatchClause: 'CatchClause',
           ClassBody: 'ClassBody',
           ClassDeclaration: 'ClassDeclaration',
           ClassExpression: 'ClassExpression',
           ConditionalExpression: 'ConditionalExpression',
           ContinueStatement: 'ContinueStatement',
           DoWhileStatement: 'DoWhileStatement',
           DebuggerStatement: 'DebuggerStatement',
           EmptyStatement: 'EmptyStatement',
           ExportAllDeclaration: 'ExportAllDeclaration',
           ExportDefaultDeclaration: 'ExportDefaultDeclaration',
           ExportNamedDeclaration: 'ExportNamedDeclaration',
           ExportSpecifier: 'ExportSpecifier',
           ExpressionStatement: 'ExpressionStatement',
           ForStatement: 'ForStatement',
           ForOfStatement: 'ForOfStatement',
           ForInStatement: 'ForInStatement',
           FunctionDeclaration: 'FunctionDeclaration',
           FunctionExpression: 'FunctionExpression',
           Identifier: 'Identifier',
           IfStatement: 'IfStatement',
           ImportDeclaration: 'ImportDeclaration',
           ImportDefaultSpecifier: 'ImportDefaultSpecifier',
           ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
           ImportSpecifier: 'ImportSpecifier',
           Literal: 'Literal',
           LabeledStatement: 'LabeledStatement',
           LogicalExpression: 'LogicalExpression',
           MemberExpression: 'MemberExpression',
           MetaProperty: 'MetaProperty',
           MethodDefinition: 'MethodDefinition',
           NewExpression: 'NewExpression',
           ObjectExpression: 'ObjectExpression',
           ObjectPattern: 'ObjectPattern',
           Program: 'Program',
           Property: 'Property',
           RestElement: 'RestElement',
           ReturnStatement: 'ReturnStatement',
           SequenceExpression: 'SequenceExpression',
           SpreadElement: 'SpreadElement',
           Super: 'Super',
           SwitchCase: 'SwitchCase',
           SwitchStatement: 'SwitchStatement',
           TaggedTemplateExpression: 'TaggedTemplateExpression',
           TemplateElement: 'TemplateElement',
           TemplateLiteral: 'TemplateLiteral',
           ThisExpression: 'ThisExpression',
           ThrowStatement: 'ThrowStatement',
           TryStatement: 'TryStatement',
           UnaryExpression: 'UnaryExpression',
           UpdateExpression: 'UpdateExpression',
           VariableDeclaration: 'VariableDeclaration',
           VariableDeclarator: 'VariableDeclarator',
           WhileStatement: 'WhileStatement',
           WithStatement: 'WithStatement',
           YieldExpression: 'YieldExpression' },
        version: '3.1.3' },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: 
         { resolve: [Function: resolve],
           normalize: [Function: normalize],
           isAbsolute: [Function: isAbsolute],
           join: [Function: join],
           relative: [Function: relative],
           _makeLong: [Function: _makeLong],
           dirname: [Function: dirname],
           basename: [Function: basename],
           extname: [Function: extname],
           format: [Function: format],
           parse: [Function: parse],
           sep: '\\',
           delimiter: ';',
           win32: [Circular],
           posix: [Circular] },
        posix: [Circular] },
     estraverse: 
      { version: '4.2.0',
        Syntax: 
         { AssignmentExpression: 'AssignmentExpression',
           AssignmentPattern: 'AssignmentPattern',
           ArrayExpression: 'ArrayExpression',
           ArrayPattern: 'ArrayPattern',
           ArrowFunctionExpression: 'ArrowFunctionExpression',
           AwaitExpression: 'AwaitExpression',
           BlockStatement: 'BlockStatement',
           BinaryExpression: 'BinaryExpression',
           BreakStatement: 'BreakStatement',
           CallExpression: 'CallExpression',
           CatchClause: 'CatchClause',
           ClassBody: 'ClassBody',
           ClassDeclaration: 'ClassDeclaration',
           ClassExpression: 'ClassExpression',
           ComprehensionBlock: 'ComprehensionBlock',
           ComprehensionExpression: 'ComprehensionExpression',
           ConditionalExpression: 'ConditionalExpression',
           ContinueStatement: 'ContinueStatement',
           DebuggerStatement: 'DebuggerStatement',
           DirectiveStatement: 'DirectiveStatement',
           DoWhileStatement: 'DoWhileStatement',
           EmptyStatement: 'EmptyStatement',
           ExportAllDeclaration: 'ExportAllDeclaration',
           ExportDefaultDeclaration: 'ExportDefaultDeclaration',
           ExportNamedDeclaration: 'ExportNamedDeclaration',
           ExportSpecifier: 'ExportSpecifier',
           ExpressionStatement: 'ExpressionStatement',
           ForStatement: 'ForStatement',
           ForInStatement: 'ForInStatement',
           ForOfStatement: 'ForOfStatement',
           FunctionDeclaration: 'FunctionDeclaration',
           FunctionExpression: 'FunctionExpression',
           GeneratorExpression: 'GeneratorExpression',
           Identifier: 'Identifier',
           IfStatement: 'IfStatement',
           ImportDeclaration: 'ImportDeclaration',
           ImportDefaultSpecifier: 'ImportDefaultSpecifier',
           ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
           ImportSpecifier: 'ImportSpecifier',
           Literal: 'Literal',
           LabeledStatement: 'LabeledStatement',
           LogicalExpression: 'LogicalExpression',
           MemberExpression: 'MemberExpression',
           MetaProperty: 'MetaProperty',
           MethodDefinition: 'MethodDefinition',
           ModuleSpecifier: 'ModuleSpecifier',
           NewExpression: 'NewExpression',
           ObjectExpression: 'ObjectExpression',
           ObjectPattern: 'ObjectPattern',
           Program: 'Program',
           Property: 'Property',
           RestElement: 'RestElement',
           ReturnStatement: 'ReturnStatement',
           SequenceExpression: 'SequenceExpression',
           SpreadElement: 'SpreadElement',
           Super: 'Super',
           SwitchStatement: 'SwitchStatement',
           SwitchCase: 'SwitchCase',
           TaggedTemplateExpression: 'TaggedTemplateExpression',
           TemplateElement: 'TemplateElement',
           TemplateLiteral: 'TemplateLiteral',
           ThisExpression: 'ThisExpression',
           ThrowStatement: 'ThrowStatement',
           TryStatement: 'TryStatement',
           UnaryExpression: 'UnaryExpression',
           UpdateExpression: 'UpdateExpression',
           VariableDeclaration: 'VariableDeclaration',
           VariableDeclarator: 'VariableDeclarator',
           WhileStatement: 'WhileStatement',
           WithStatement: 'WithStatement',
           YieldExpression: 'YieldExpression' },
        traverse: [Function: traverse],
        replace: [Function: replace],
        attachComments: [Function: attachComments],
        VisitorKeys: 
         { AssignmentExpression: [ 'left', 'right' ],
           AssignmentPattern: [ 'left', 'right' ],
           ArrayExpression: [ 'elements' ],
           ArrayPattern: [ 'elements' ],
           ArrowFunctionExpression: [ 'params', 'body' ],
           AwaitExpression: [ 'argument' ],
           BlockStatement: [ 'body' ],
           BinaryExpression: [ 'left', 'right' ],
           BreakStatement: [ 'label' ],
           CallExpression: [ 'callee', 'arguments' ],
           CatchClause: [ 'param', 'body' ],
           ClassBody: [ 'body' ],
           ClassDeclaration: [ 'id', 'superClass', 'body' ],
           ClassExpression: [ 'id', 'superClass', 'body' ],
           ComprehensionBlock: [ 'left', 'right' ],
           ComprehensionExpression: [ 'blocks', 'filter', 'body' ],
           ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
           ContinueStatement: [ 'label' ],
           DebuggerStatement: [],
           DirectiveStatement: [],
           DoWhileStatement: [ 'body', 'test' ],
           EmptyStatement: [],
           ExportAllDeclaration: [ 'source' ],
           ExportDefaultDeclaration: [ 'declaration' ],
           ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
           ExportSpecifier: [ 'exported', 'local' ],
           ExpressionStatement: [ 'expression' ],
           ForStatement: [ 'init', 'test', 'update', 'body' ],
           ForInStatement: [ 'left', 'right', 'body' ],
           ForOfStatement: [ 'left', 'right', 'body' ],
           FunctionDeclaration: [ 'id', 'params', 'body' ],
           FunctionExpression: [ 'id', 'params', 'body' ],
           GeneratorExpression: [ 'blocks', 'filter', 'body' ],
           Identifier: [],
           IfStatement: [ 'test', 'consequent', 'alternate' ],
           ImportDeclaration: [ 'specifiers', 'source' ],
           ImportDefaultSpecifier: [ 'local' ],
           ImportNamespaceSpecifier: [ 'local' ],
           ImportSpecifier: [ 'imported', 'local' ],
           Literal: [],
           LabeledStatement: [ 'label', 'body' ],
           LogicalExpression: [ 'left', 'right' ],
           MemberExpression: [ 'object', 'property' ],
           MetaProperty: [ 'meta', 'property' ],
           MethodDefinition: [ 'key', 'value' ],
           ModuleSpecifier: [],
           NewExpression: [ 'callee', 'arguments' ],
           ObjectExpression: [ 'properties' ],
           ObjectPattern: [ 'properties' ],
           Program: [ 'body' ],
           Property: [ 'key', 'value' ],
           RestElement: [ 'argument' ],
           ReturnStatement: [ 'argument' ],
           SequenceExpression: [ 'expressions' ],
           SpreadElement: [ 'argument' ],
           Super: [],
           SwitchStatement: [ 'discriminant', 'cases' ],
           SwitchCase: [ 'test', 'consequent' ],
           TaggedTemplateExpression: [ 'tag', 'quasi' ],
           TemplateElement: [],
           TemplateLiteral: [ 'quasis', 'expressions' ],
           ThisExpression: [],
           ThrowStatement: [ 'argument' ],
           TryStatement: [ 'block', 'handler', 'finalizer' ],
           UnaryExpression: [ 'argument' ],
           UpdateExpression: [ 'argument' ],
           VariableDeclaration: [ 'declarations' ],
           VariableDeclarator: [ 'id', 'init' ],
           WhileStatement: [ 'test', 'body' ],
           WithStatement: [ 'object', 'body' ],
           YieldExpression: [ 'argument' ] },
        VisitorOption: { Break: {}, Skip: {}, Remove: {} },
        Controller: [Function: Controller],
        cloneEnvironment: [Function] },
     stages: 
      [ _AOP_INITIALIZE: 'aop_initialize',
        _AOP_WIRE: 'aop_wire',
        _FINISH_SETUP_: 'finishing bean setup',
        _INHERIT_: 'inherit',
        _INITIALIZE_: 'initialize',
        _INJECT_: 'inject',
        _INSTANTIATE_: 'instantiate',
        _RUN_: 'run',
        _STASHING_: 'stashing' ] },
  BaseAnnotationParser: [Function: BaseAnnotationParser],
  BeanAnnotationParserPrototype: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] },
  Esprima: 
   { parse: [Function: parse],
     tokenize: [Function: tokenize],
     Syntax: 
      { AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression' },
     version: '3.1.3' },
  Util: 
   { _errnoException: [Function: _errnoException],
     _exceptionWithHostPort: [Function: _exceptionWithHostPort],
     _extend: [Function: _extend],
     callbackify: [Function: callbackify],
     debuglog: [Function: debuglog],
     deprecate: [Function: deprecate],
     format: [Function: format],
     inherits: [Function: inherits],
     inspect: 
      { [Function: inspect]
        custom: Symbol(util.inspect.custom),
        colors: 
         { bold: [ 1, 22 ],
           italic: [ 3, 23 ],
           underline: [ 4, 24 ],
           inverse: [ 7, 27 ],
           white: [ 37, 39 ],
           grey: [ 90, 39 ],
           black: [ 30, 39 ],
           blue: [ 34, 39 ],
           cyan: [ 36, 39 ],
           green: [ 32, 39 ],
           magenta: [ 35, 39 ],
           red: [ 31, 39 ],
           yellow: [ 33, 39 ] },
        styles: 
         { special: 'cyan',
           number: 'yellow',
           boolean: 'yellow',
           undefined: 'grey',
           null: 'bold',
           string: 'green',
           symbol: 'green',
           date: 'magenta',
           regexp: 'red' } },
     isArray: [Function: isArray],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isNull: [Function: isNull],
     isNullOrUndefined: [Function: isNullOrUndefined],
     isNumber: [Function: isNumber],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isUndefined: [Function: isUndefined],
     isRegExp: [Function: isRegExp],
     isObject: [Function: isObject],
     isDate: [Function: isDate],
     isError: [Function: isError],
     isFunction: [Function: isFunction],
     isPrimitive: [Function: isPrimitive],
     log: [Function: log],
     promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
     TextDecoder: [Function: TextDecoder],
     TextEncoder: [Function: TextEncoder],
     debug: [Function: deprecated],
     error: [Function: deprecated],
     print: [Function: deprecated],
     puts: [Function: deprecated] },
  Path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '\\',
        delimiter: ';',
        win32: [Circular],
        posix: [Circular] },
     posix: [Circular] },
  Lodash: 
   { [Function: lodash]
     templateSettings: 
      { escape: /<%-([\s\S]+?)%>/g,
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        variable: '',
        imports: { _: [Circular] } },
     after: [Function: after],
     ary: [Function: ary],
     assign: [Function],
     assignIn: [Function],
     assignInWith: [Function],
     assignWith: [Function],
     at: [Function],
     before: [Function: before],
     bind: { [Function] placeholder: [Circular] },
     bindAll: [Function],
     bindKey: { [Function] placeholder: [Circular] },
     castArray: [Function: castArray],
     chain: [Function: chain],
     chunk: [Function: chunk],
     compact: [Function: compact],
     concat: [Function: concat],
     cond: [Function: cond],
     conforms: [Function: conforms],
     constant: [Function: constant],
     countBy: [Function],
     create: [Function: create],
     curry: { [Function: curry] placeholder: [Circular] },
     curryRight: { [Function: curryRight] placeholder: [Circular] },
     debounce: [Function: debounce],
     defaults: [Function],
     defaultsDeep: [Function],
     defer: [Function],
     delay: [Function],
     difference: [Function],
     differenceBy: [Function],
     differenceWith: [Function],
     drop: [Function: drop],
     dropRight: [Function: dropRight],
     dropRightWhile: [Function: dropRightWhile],
     dropWhile: [Function: dropWhile],
     fill: [Function: fill],
     filter: [Function: filter],
     flatMap: [Function: flatMap],
     flatMapDeep: [Function: flatMapDeep],
     flatMapDepth: [Function: flatMapDepth],
     flatten: [Function: flatten],
     flattenDeep: [Function: flattenDeep],
     flattenDepth: [Function: flattenDepth],
     flip: [Function: flip],
     flow: [Function],
     flowRight: [Function],
     fromPairs: [Function: fromPairs],
     functions: [Function: functions],
     functionsIn: [Function: functionsIn],
     groupBy: [Function],
     initial: [Function: initial],
     intersection: [Function],
     intersectionBy: [Function],
     intersectionWith: [Function],
     invert: [Function],
     invertBy: [Function],
     invokeMap: [Function],
     iteratee: [Function: iteratee],
     keyBy: [Function],
     keys: [Function: keys],
     keysIn: [Function: keysIn],
     map: [Function: map],
     mapKeys: [Function: mapKeys],
     mapValues: [Function: mapValues],
     matches: [Function: matches],
     matchesProperty: [Function: matchesProperty],
     memoize: { [Function: memoize] Cache: [Function: MapCache] },
     merge: [Function],
     mergeWith: [Function],
     method: [Function],
     methodOf: [Function],
     mixin: [Function: mixin],
     negate: [Function: negate],
     nthArg: [Function: nthArg],
     omit: [Function],
     omitBy: [Function: omitBy],
     once: [Function: once],
     orderBy: [Function: orderBy],
     over: [Function],
     overArgs: [Function],
     overEvery: [Function],
     overSome: [Function],
     partial: { [Function] placeholder: [Circular] },
     partialRight: { [Function] placeholder: [Circular] },
     partition: [Function],
     pick: [Function],
     pickBy: [Function: pickBy],
     property: [Function: property],
     propertyOf: [Function: propertyOf],
     pull: [Function],
     pullAll: [Function: pullAll],
     pullAllBy: [Function: pullAllBy],
     pullAllWith: [Function: pullAllWith],
     pullAt: [Function],
     range: [Function],
     rangeRight: [Function],
     rearg: [Function],
     reject: [Function: reject],
     remove: [Function: remove],
     rest: [Function: rest],
     reverse: [Function: reverse],
     sampleSize: [Function: sampleSize],
     set: [Function: set],
     setWith: [Function: setWith],
     shuffle: [Function: shuffle],
     slice: [Function: slice],
     sortBy: [Function],
     sortedUniq: [Function: sortedUniq],
     sortedUniqBy: [Function: sortedUniqBy],
     split: [Function: split],
     spread: [Function: spread],
     tail: [Function: tail],
     take: [Function: take],
     takeRight: [Function: takeRight],
     takeRightWhile: [Function: takeRightWhile],
     takeWhile: [Function: takeWhile],
     tap: [Function: tap],
     throttle: [Function: throttle],
     thru: [Function: thru],
     toArray: [Function: toArray],
     toPairs: [Function],
     toPairsIn: [Function],
     toPath: [Function: toPath],
     toPlainObject: [Function: toPlainObject],
     transform: [Function: transform],
     unary: [Function: unary],
     union: [Function],
     unionBy: [Function],
     unionWith: [Function],
     uniq: [Function: uniq],
     uniqBy: [Function: uniqBy],
     uniqWith: [Function: uniqWith],
     unset: [Function: unset],
     unzip: [Function: unzip],
     unzipWith: [Function: unzipWith],
     update: [Function: update],
     updateWith: [Function: updateWith],
     values: [Function: values],
     valuesIn: [Function: valuesIn],
     without: [Function],
     words: [Function: words],
     wrap: [Function: wrap],
     xor: [Function],
     xorBy: [Function],
     xorWith: [Function],
     zip: [Function],
     zipObject: [Function: zipObject],
     zipObjectDeep: [Function: zipObjectDeep],
     zipWith: [Function],
     entries: [Function],
     entriesIn: [Function],
     extend: [Function],
     extendWith: [Function],
     add: [Function],
     attempt: [Function],
     camelCase: [Function],
     capitalize: [Function: capitalize],
     ceil: [Function],
     clamp: [Function: clamp],
     clone: [Function: clone],
     cloneDeep: [Function: cloneDeep],
     cloneDeepWith: [Function: cloneDeepWith],
     cloneWith: [Function: cloneWith],
     conformsTo: [Function: conformsTo],
     deburr: [Function: deburr],
     defaultTo: [Function: defaultTo],
     divide: [Function],
     endsWith: [Function: endsWith],
     eq: [Function: eq],
     escape: [Function: escape],
     escapeRegExp: [Function: escapeRegExp],
     every: [Function: every],
     find: [Function],
     findIndex: [Function: findIndex],
     findKey: [Function: findKey],
     findLast: [Function],
     findLastIndex: [Function: findLastIndex],
     findLastKey: [Function: findLastKey],
     floor: [Function],
     forEach: [Function: forEach],
     forEachRight: [Function: forEachRight],
     forIn: [Function: forIn],
     forInRight: [Function: forInRight],
     forOwn: [Function: forOwn],
     forOwnRight: [Function: forOwnRight],
     get: [Function: get],
     gt: [Function],
     gte: [Function],
     has: [Function: has],
     hasIn: [Function: hasIn],
     head: [Function: head],
     identity: [Function: identity],
     includes: [Function: includes],
     indexOf: [Function: indexOf],
     inRange: [Function: inRange],
     invoke: [Function],
     isArguments: [Function: baseIsArguments],
     isArray: [Function: isArray],
     isArrayBuffer: [Function],
     isArrayLike: [Function: isArrayLike],
     isArrayLikeObject: [Function: isArrayLikeObject],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isDate: [Function],
     isElement: [Function: isElement],
     isEmpty: [Function: isEmpty],
     isEqual: [Function: isEqual],
     isEqualWith: [Function: isEqualWith],
     isError: [Function: isError],
     isFinite: [Function: isFinite],
     isFunction: [Function: isFunction],
     isInteger: [Function: isInteger],
     isLength: [Function: isLength],
     isMap: [Function],
     isMatch: [Function: isMatch],
     isMatchWith: [Function: isMatchWith],
     isNaN: [Function: isNaN],
     isNative: [Function: isNative],
     isNil: [Function: isNil],
     isNull: [Function: isNull],
     isNumber: [Function: isNumber],
     isObject: [Function: isObject],
     isObjectLike: [Function: isObjectLike],
     isPlainObject: [Function: isPlainObject],
     isRegExp: [Function],
     isSafeInteger: [Function: isSafeInteger],
     isSet: [Function],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isTypedArray: [Function],
     isUndefined: [Function: isUndefined],
     isWeakMap: [Function: isWeakMap],
     isWeakSet: [Function: isWeakSet],
     join: [Function: join],
     kebabCase: [Function],
     last: [Function: last],
     lastIndexOf: [Function: lastIndexOf],
     lowerCase: [Function],
     lowerFirst: [Function],
     lt: [Function],
     lte: [Function],
     max: [Function: max],
     maxBy: [Function: maxBy],
     mean: [Function: mean],
     meanBy: [Function: meanBy],
     min: [Function: min],
     minBy: [Function: minBy],
     stubArray: [Function: stubArray],
     stubFalse: [Function: stubFalse],
     stubObject: [Function: stubObject],
     stubString: [Function: stubString],
     stubTrue: [Function: stubTrue],
     multiply: [Function],
     nth: [Function: nth],
     noConflict: [Function: noConflict],
     noop: [Function: noop],
     now: [Function],
     pad: [Function: pad],
     padEnd: [Function: padEnd],
     padStart: [Function: padStart],
     parseInt: [Function: parseInt],
     random: [Function: random],
     reduce: [Function: reduce],
     reduceRight: [Function: reduceRight],
     repeat: [Function: repeat],
     replace: [Function: replace],
     result: [Function: result],
     round: [Function],
     runInContext: [Function: runInContext],
     sample: [Function: sample],
     size: [Function: size],
     snakeCase: [Function],
     some: [Function: some],
     sortedIndex: [Function: sortedIndex],
     sortedIndexBy: [Function: sortedIndexBy],
     sortedIndexOf: [Function: sortedIndexOf],
     sortedLastIndex: [Function: sortedLastIndex],
     sortedLastIndexBy: [Function: sortedLastIndexBy],
     sortedLastIndexOf: [Function: sortedLastIndexOf],
     startCase: [Function],
     startsWith: [Function: startsWith],
     subtract: [Function],
     sum: [Function: sum],
     sumBy: [Function: sumBy],
     template: [Function: template],
     times: [Function: times],
     toFinite: [Function: toFinite],
     toInteger: [Function: toInteger],
     toLength: [Function: toLength],
     toLower: [Function: toLower],
     toNumber: [Function: toNumber],
     toSafeInteger: [Function: toSafeInteger],
     toString: [Function: toString],
     toUpper: [Function: toUpper],
     trim: [Function: trim],
     trimEnd: [Function: trimEnd],
     trimStart: [Function: trimStart],
     truncate: [Function: truncate],
     unescape: [Function: unescape],
     uniqueId: [Function: uniqueId],
     upperCase: [Function],
     upperFirst: [Function],
     each: [Function: forEach],
     eachRight: [Function: forEachRight],
     first: [Function: head],
     VERSION: '4.17.11',
     _: [Circular] },
  Estraverse: 
   { version: '4.2.0',
     Syntax: 
      { AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',
        ComprehensionExpression: 'ComprehensionExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression' },
     traverse: [Function: traverse],
     replace: [Function: replace],
     attachComments: [Function: attachComments],
     VisitorKeys: 
      { AssignmentExpression: [ 'left', 'right' ],
        AssignmentPattern: [ 'left', 'right' ],
        ArrayExpression: [ 'elements' ],
        ArrayPattern: [ 'elements' ],
        ArrowFunctionExpression: [ 'params', 'body' ],
        AwaitExpression: [ 'argument' ],
        BlockStatement: [ 'body' ],
        BinaryExpression: [ 'left', 'right' ],
        BreakStatement: [ 'label' ],
        CallExpression: [ 'callee', 'arguments' ],
        CatchClause: [ 'param', 'body' ],
        ClassBody: [ 'body' ],
        ClassDeclaration: [ 'id', 'superClass', 'body' ],
        ClassExpression: [ 'id', 'superClass', 'body' ],
        ComprehensionBlock: [ 'left', 'right' ],
        ComprehensionExpression: [ 'blocks', 'filter', 'body' ],
        ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
        ContinueStatement: [ 'label' ],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: [ 'body', 'test' ],
        EmptyStatement: [],
        ExportAllDeclaration: [ 'source' ],
        ExportDefaultDeclaration: [ 'declaration' ],
        ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
        ExportSpecifier: [ 'exported', 'local' ],
        ExpressionStatement: [ 'expression' ],
        ForStatement: [ 'init', 'test', 'update', 'body' ],
        ForInStatement: [ 'left', 'right', 'body' ],
        ForOfStatement: [ 'left', 'right', 'body' ],
        FunctionDeclaration: [ 'id', 'params', 'body' ],
        FunctionExpression: [ 'id', 'params', 'body' ],
        GeneratorExpression: [ 'blocks', 'filter', 'body' ],
        Identifier: [],
        IfStatement: [ 'test', 'consequent', 'alternate' ],
        ImportDeclaration: [ 'specifiers', 'source' ],
        ImportDefaultSpecifier: [ 'local' ],
        ImportNamespaceSpecifier: [ 'local' ],
        ImportSpecifier: [ 'imported', 'local' ],
        Literal: [],
        LabeledStatement: [ 'label', 'body' ],
        LogicalExpression: [ 'left', 'right' ],
        MemberExpression: [ 'object', 'property' ],
        MetaProperty: [ 'meta', 'property' ],
        MethodDefinition: [ 'key', 'value' ],
        ModuleSpecifier: [],
        NewExpression: [ 'callee', 'arguments' ],
        ObjectExpression: [ 'properties' ],
        ObjectPattern: [ 'properties' ],
        Program: [ 'body' ],
        Property: [ 'key', 'value' ],
        RestElement: [ 'argument' ],
        ReturnStatement: [ 'argument' ],
        SequenceExpression: [ 'expressions' ],
        SpreadElement: [ 'argument' ],
        Super: [],
        SwitchStatement: [ 'discriminant', 'cases' ],
        SwitchCase: [ 'test', 'consequent' ],
        TaggedTemplateExpression: [ 'tag', 'quasi' ],
        TemplateElement: [],
        TemplateLiteral: [ 'quasis', 'expressions' ],
        ThisExpression: [],
        ThrowStatement: [ 'argument' ],
        TryStatement: [ 'block', 'handler', 'finalizer' ],
        UnaryExpression: [ 'argument' ],
        UpdateExpression: [ 'argument' ],
        VariableDeclaration: [ 'declarations' ],
        VariableDeclarator: [ 'id', 'init' ],
        WhileStatement: [ 'test', 'body' ],
        WithStatement: [ 'object', 'body' ],
        YieldExpression: [ 'argument' ] },
     VisitorOption: { Break: {}, Skip: {}, Remove: {} },
     Controller: [Function: Controller],
     cloneEnvironment: [Function] },
  Bluebird: 
   { [Function: Promise]
     TypeError: [Function: TypeError],
     RangeError: [Function: RangeError],
     CancellationError: [Function: SubError],
     TimeoutError: [Function: SubError],
     OperationalError: [Function: OperationalError],
     RejectionError: [Function: OperationalError],
     AggregateError: [Function: SubError],
     _peekContext: [Function],
     onPossiblyUnhandledRejection: [Function],
     onUnhandledRejectionHandled: [Function],
     longStackTraces: [Function],
     hasLongStackTraces: [Function],
     config: [Function],
     getNewLibraryCopy: [Function],
     is: [Function],
     fromCallback: [Function],
     fromNode: [Function],
     all: [Function],
     cast: [Function],
     fulfilled: [Function],
     resolve: [Function],
     rejected: [Function],
     reject: [Function],
     setScheduler: [Function],
     pending: [Function],
     defer: [Function],
     method: [Function],
     try: [Function],
     attempt: [Function],
     bind: [Function],
     PromiseInspection: [Function: PromiseInspection],
     join: [Function],
     Promise: [Circular],
     version: '3.5.3',
     map: [Function],
     using: [Function],
     delay: [Function],
     coroutine: { [Function] addYieldHandler: [Function] },
     spawn: [Function],
     promisify: [Function],
     promisifyAll: [Function],
     props: [Function],
     race: [Function],
     reduce: [Function],
     settle: [Function],
     some: [Function],
     _SomePromiseArray: [Function: SomePromiseArray],
     filter: [Function],
     each: [Function],
     mapSeries: [Function: PromiseMapSeries],
     any: [Function],
     noConflict: [Function: noConflict] },
  FS: 
   { constants: 
      { O_RDONLY: 0,
        O_WRONLY: 1,
        O_RDWR: 2,
        S_IFMT: 61440,
        S_IFREG: 32768,
        S_IFDIR: 16384,
        S_IFCHR: 8192,
        S_IFBLK: 24576,
        S_IFIFO: 4096,
        S_IFLNK: 40960,
        S_IFSOCK: 49152,
        O_CREAT: 512,
        O_EXCL: 2048,
        O_NOCTTY: 131072,
        O_TRUNC: 1024,
        O_APPEND: 8,
        O_DIRECTORY: 1048576,
        O_NOFOLLOW: 256,
        O_SYNC: 128,
        O_DSYNC: 4194304,
        O_SYMLINK: 2097152,
        O_NONBLOCK: 4,
        S_IRWXU: 448,
        S_IRUSR: 256,
        S_IWUSR: 128,
        S_IXUSR: 64,
        S_IRWXG: 56,
        S_IRGRP: 32,
        S_IWGRP: 16,
        S_IXGRP: 8,
        S_IRWXO: 7,
        S_IROTH: 4,
        S_IWOTH: 2,
        S_IXOTH: 1,
        F_OK: 0,
        R_OK: 4,
        W_OK: 2,
        X_OK: 1,
        UV_FS_COPYFILE_EXCL: 1,
        COPYFILE_EXCL: 1 },
     Stats: [Function: Stats],
     F_OK: 0,
     R_OK: 4,
     W_OK: 2,
     X_OK: 1,
     access: [Function],
     accessSync: [Function],
     exists: [Function],
     existsSync: [Function],
     readFile: [Function],
     readFileSync: [Function],
     close: [Function],
     closeSync: [Function],
     open: [Function],
     openSync: [Function],
     read: [Function],
     readSync: [Function],
     write: [Function],
     writeSync: [Function],
     rename: [Function],
     renameSync: [Function],
     truncate: [Function],
     truncateSync: [Function],
     ftruncate: [Function],
     ftruncateSync: [Function],
     rmdir: [Function],
     rmdirSync: [Function],
     fdatasync: [Function],
     fdatasyncSync: [Function],
     fsync: [Function],
     fsyncSync: [Function],
     mkdir: [Function],
     mkdirSync: [Function],
     readdir: [Function],
     readdirSync: [Function],
     fstat: [Function],
     lstat: [Function],
     stat: [Function],
     fstatSync: [Function],
     lstatSync: [Function],
     statSync: [Function],
     readlink: [Function],
     readlinkSync: [Function],
     symlink: [Function],
     symlinkSync: [Function],
     link: [Function],
     linkSync: [Function],
     unlink: [Function],
     unlinkSync: [Function],
     fchmod: [Function],
     fchmodSync: [Function],
     lchmod: [Function],
     lchmodSync: [Function],
     chmod: [Function],
     chmodSync: [Function],
     lchown: [Function],
     lchownSync: [Function],
     fchown: [Function],
     fchownSync: [Function],
     chown: [Function],
     chownSync: [Function],
     _toUnixTimestamp: [Function: toUnixTimestamp],
     utimes: [Function],
     utimesSync: [Function],
     futimes: [Function],
     futimesSync: [Function],
     writeFile: [Function],
     writeFileSync: [Function],
     appendFile: [Function],
     appendFileSync: [Function],
     watch: [Function],
     watchFile: [Function],
     unwatchFile: [Function],
     realpathSync: [Function: realpathSync],
     realpath: [Function: realpath],
     mkdtemp: [Function],
     mkdtempSync: [Function],
     copyFile: [Function],
     copyFileSync: [Function],
     createReadStream: [Function],
     ReadStream: 
      { [Function: ReadStream]
        super_: 
         { [Function: Readable]
           ReadableState: [Function: ReadableState],
           super_: 
            { [Function: Stream]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] },
              Readable: [Circular],
              Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
              Duplex: { [Function: Duplex] super_: [Circular] },
              Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
              PassThrough: 
               { [Function: PassThrough]
                 super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
              Stream: [Circular],
              _isUint8Array: [Function: isUint8Array],
              _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
           _fromList: [Function: fromList] } },
     FileReadStream: 
      { [Function: ReadStream]
        super_: 
         { [Function: Readable]
           ReadableState: [Function: ReadableState],
           super_: 
            { [Function: Stream]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] },
              Readable: [Circular],
              Writable: { [Function: Writable] WritableState: [Function: WritableState], super_: [Circular] },
              Duplex: { [Function: Duplex] super_: [Circular] },
              Transform: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } },
              PassThrough: 
               { [Function: PassThrough]
                 super_: { [Function: Transform] super_: { [Function: Duplex] super_: [Circular] } } },
              Stream: [Circular],
              _isUint8Array: [Function: isUint8Array],
              _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] },
           _fromList: [Function: fromList] } },
     createWriteStream: [Function],
     WriteStream: 
      { [Function: WriteStream]
        super_: 
         { [Function: Writable]
           WritableState: [Function: WritableState],
           super_: 
            { [Function: Stream]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] },
              Readable: 
               { [Function: Readable]
                 ReadableState: [Function: ReadableState],
                 super_: [Circular],
                 _fromList: [Function: fromList] },
              Writable: [Circular],
              Duplex: 
               { [Function: Duplex]
                 super_: 
                  { [Function: Readable]
                    ReadableState: [Function: ReadableState],
                    super_: [Circular],
                    _fromList: [Function: fromList] } },
              Transform: 
               { [Function: Transform]
                 super_: 
                  { [Function: Duplex]
                    super_: 
                     { [Function: Readable]
                       ReadableState: [Function: ReadableState],
                       super_: [Circular],
                       _fromList: [Function: fromList] } } },
              PassThrough: 
               { [Function: PassThrough]
                 super_: 
                  { [Function: Transform]
                    super_: 
                     { [Function: Duplex]
                       super_: 
                        { [Function: Readable]
                          ReadableState: [Function: ReadableState],
                          super_: [Circular],
                          _fromList: [Function: fromList] } } } },
              Stream: [Circular],
              _isUint8Array: [Function: isUint8Array],
              _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } },
     FileWriteStream: 
      { [Function: WriteStream]
        super_: 
         { [Function: Writable]
           WritableState: [Function: WritableState],
           super_: 
            { [Function: Stream]
              super_: 
               { [Function: EventEmitter]
                 EventEmitter: [Circular],
                 usingDomains: false,
                 defaultMaxListeners: [Getter/Setter],
                 init: [Function],
                 listenerCount: [Function] },
              Readable: 
               { [Function: Readable]
                 ReadableState: [Function: ReadableState],
                 super_: [Circular],
                 _fromList: [Function: fromList] },
              Writable: [Circular],
              Duplex: 
               { [Function: Duplex]
                 super_: 
                  { [Function: Readable]
                    ReadableState: [Function: ReadableState],
                    super_: [Circular],
                    _fromList: [Function: fromList] } },
              Transform: 
               { [Function: Transform]
                 super_: 
                  { [Function: Duplex]
                    super_: 
                     { [Function: Readable]
                       ReadableState: [Function: ReadableState],
                       super_: [Circular],
                       _fromList: [Function: fromList] } } },
              PassThrough: 
               { [Function: PassThrough]
                 super_: 
                  { [Function: Transform]
                    super_: 
                     { [Function: Duplex]
                       super_: 
                        { [Function: Readable]
                          ReadableState: [Function: ReadableState],
                          super_: [Circular],
                          _fromList: [Function: fromList] } } } },
              Stream: [Circular],
              _isUint8Array: [Function: isUint8Array],
              _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer] } } } },
  Glob: 
   { [Function: glob]
     sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
     GlobSync: [Function: GlobSync],
     glob: [Circular],
     hasMagic: [Function],
     Glob: 
      { [Function: Glob]
        super_: 
         { [Function: EventEmitter]
           EventEmitter: [Circular],
           usingDomains: false,
           defaultMaxListeners: [Getter/Setter],
           init: [Function],
           listenerCount: [Function] } } },
  Toposort: [Function: Toposort],
  Beautify: 
   { [Function: beautify]
     js: { [Function: js_beautify] defaultOptions: [Function] },
     css: { [Function: css_beautify] defaultOptions: [Function] },
     html: { [Function: style_html] defaultOptions: [Function] },
     js_beautify: { [Function: js_beautify] defaultOptions: [Function] },
     css_beautify: { [Function: css_beautify] defaultOptions: [Function] },
     html_beautify: { [Function: style_html] defaultOptions: [Function] } },
  Wildcard: [Function],
  Md5: [Function],
  CamelCase: [Function],
  Doctrine: 
   { version: '3.0.0',
     parse: [Function: parse],
     parseType: [Function: parseType],
     parseParamType: [Function: parseParamType],
     unwrapComment: [Function: unwrapComment],
     Syntax: 
      { NullableLiteral: 'NullableLiteral',
        AllLiteral: 'AllLiteral',
        NullLiteral: 'NullLiteral',
        UndefinedLiteral: 'UndefinedLiteral',
        VoidLiteral: 'VoidLiteral',
        UnionType: 'UnionType',
        ArrayType: 'ArrayType',
        RecordType: 'RecordType',
        FieldType: 'FieldType',
        FunctionType: 'FunctionType',
        ParameterType: 'ParameterType',
        RestType: 'RestType',
        NonNullableType: 'NonNullableType',
        OptionalType: 'OptionalType',
        NullableType: 'NullableType',
        NameExpression: 'NameExpression',
        TypeApplication: 'TypeApplication',
        StringLiteralType: 'StringLiteralType',
        NumericLiteralType: 'NumericLiteralType',
        BooleanLiteralType: 'BooleanLiteralType' },
     Error: [Function: DoctrineError],
     type: 
      { Syntax: 
         { NullableLiteral: 'NullableLiteral',
           AllLiteral: 'AllLiteral',
           NullLiteral: 'NullLiteral',
           UndefinedLiteral: 'UndefinedLiteral',
           VoidLiteral: 'VoidLiteral',
           UnionType: 'UnionType',
           ArrayType: 'ArrayType',
           RecordType: 'RecordType',
           FieldType: 'FieldType',
           FunctionType: 'FunctionType',
           ParameterType: 'ParameterType',
           RestType: 'RestType',
           NonNullableType: 'NonNullableType',
           OptionalType: 'OptionalType',
           NullableType: 'NullableType',
           NameExpression: 'NameExpression',
           TypeApplication: 'TypeApplication',
           StringLiteralType: 'StringLiteralType',
           NumericLiteralType: 'NumericLiteralType',
           BooleanLiteralType: 'BooleanLiteralType' },
        parseType: [Function: parseType],
        parseParamType: [Function: parseParamType],
        stringify: [Function: stringify] } },
  PropertiesReader: 
   { parse: [Function],
     stringify: [Function],
     createStringifier: [Function: createStringifier] },
  XML2js: 
   { defaults: 
      { '0.1': 
         { explicitCharkey: false,
           trim: true,
           normalize: true,
           normalizeTags: false,
           attrkey: '@',
           charkey: '#',
           explicitArray: false,
           ignoreAttrs: false,
           mergeAttrs: false,
           explicitRoot: false,
           validator: null,
           xmlns: false,
           explicitChildren: false,
           childkey: '@@',
           charsAsChildren: false,
           includeWhiteChars: false,
           async: false,
           strict: true,
           attrNameProcessors: null,
           attrValueProcessors: null,
           tagNameProcessors: null,
           valueProcessors: null,
           emptyTag: '' },
        '0.2': 
         { explicitCharkey: false,
           trim: false,
           normalize: false,
           normalizeTags: false,
           attrkey: '$',
           charkey: '_',
           explicitArray: true,
           ignoreAttrs: false,
           mergeAttrs: false,
           explicitRoot: true,
           validator: null,
           xmlns: false,
           explicitChildren: false,
           preserveChildrenOrder: false,
           childkey: '$$',
           charsAsChildren: false,
           includeWhiteChars: false,
           async: false,
           strict: true,
           attrNameProcessors: null,
           attrValueProcessors: null,
           tagNameProcessors: null,
           valueProcessors: null,
           rootName: 'root',
           xmldec: { version: '1.0', encoding: 'UTF-8', standalone: true },
           doctype: null,
           renderOpts: { pretty: true, indent: '  ', newline: '\n' },
           headless: false,
           chunkSize: 10000,
           emptyTag: '',
           cdata: false } },
     processors: 
      { normalize: [Function],
        firstCharLowerCase: [Function],
        stripPrefix: [Function],
        parseNumbers: [Function],
        parseBooleans: [Function] },
     ValidationError: { [Function: ValidationError] stackTraceLimit: Infinity, __super__: Error {} },
     Builder: [Function: Builder],
     Parser: 
      { [Function: Parser]
        EventEmitter: 
         { [Function: EventEmitter]
           EventEmitter: [Circular],
           usingDomains: false,
           defaultMaxListeners: [Getter/Setter],
           init: [Function],
           listenerCount: [Function] },
        usingDomains: false,
        defaultMaxListeners: 10,
        init: [Function],
        listenerCount: [Function],
        __super__: 
         EventEmitter {
           domain: undefined,
           _events: undefined,
           _maxListeners: undefined,
           setMaxListeners: [Function: setMaxListeners],
           getMaxListeners: [Function: getMaxListeners],
           emit: [Function: emit],
           addListener: [Function: addListener],
           on: [Function: addListener],
           prependListener: [Function: prependListener],
           once: [Function: once],
           prependOnceListener: [Function: prependOnceListener],
           removeListener: [Function: removeListener],
           removeAllListeners: [Function: removeAllListeners],
           listeners: [Function: listeners],
           listenerCount: [Function: listenerCount],
           eventNames: [Function: eventNames] } },
     parseString: [Function] },
  Init: [Function: Init],
  Qualifier: [Function: Qualifier],
  Bean: [Function: Bean],
  Resource: [Function: Resource],
  After: [Function: After],
  Aspect: [Function: Aspect],
  Before: [Function: Before],
  PointCut: [Function: PointCut],
  Inherits: [Function: Inherits],
  Autowire: [Function: Autowire],
  Inject: [Function: Inject],
  Store: [Function: Store],
  Component: [Function: Component],
  Configuration: [Function: Configuration],
  Context: [Function: Context],
  Controller: [Function: Controller],
  Prototype: [Function: Prototype],
  Service: [Function: Service],
  Param: [Function: param],
  Type: 
   { [Function: type]
     super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
  Namespace: [Function: Namespace],
  Properties: [Function: Properties],
  Run: [Function: Run] }
[2019-01-01T19:38:40.196] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:38:40.196] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:38:40.196] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:40.196] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:38:40.196] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:40.196] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:38:40.196] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:40.196] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:38:53.175] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:38:53.203] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:52:16)
[2019-01-01T19:38:53.175] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:38:53.176] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:38:53.176] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:38:53.176] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:38:53.176] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:38:53.176] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:38:53.176] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:38:53.176] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:38:53.204] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:38:53.204] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:99:16)
[2019-01-01T19:38:53.233] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:38:53.246] [TRACE] Foundation -     Received context: { phase: 
   [ _BUILD_CONTEXT_: '0x2',
     _BUILD_FINISHED_: '0x4',
     _BUILD_PLUGIN_FINISHED_: '0x8',
     _BUILD_STRUCTURE_: '0x1',
     _FINAL_APPLICATION_CONTEXT_: '0xFF',
     _FINAL_PLUGIN_CONTEXT_: '0xFE' ],
  stages: 
   [ _AOP_INITIALIZE: 'aop_initialize',
     _AOP_WIRE: 'aop_wire',
     _FINISH_SETUP_: 'finishing bean setup',
     _INHERIT_: 'inherit',
     _INITIALIZE_: 'initialize',
     _INJECT_: 'inject',
     _INSTANTIATE_: 'instantiate',
     _RUN_: 'run',
     _STASHING_: 'stashing' ],
  LogManager: 
   LogManager {
     configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
     categories: 
      { default: [Object],
        ContextBuilder: [Object],
        StructureParser: [Object],
        DependencyBuilder: [Object],
        PropertiesParser: [Object],
        Foundation: [Object] },
     logger: Logger { category: 'default', context: {} } },
  StaticMemberExpressionIdentifierMatch: [Function: StaticMemberExpressionIdentifierMatch],
  VariableDecorationStaticMemberExpressionIdentifierMatch: [Function: VariableDecorationStaticMemberExpressionIdentifierMatch],
  Diagram: [AsyncFunction: draw],
  TokenParser: 
   [ Block: [Function: Block],
     CallExpression: [Function: CallExpression],
     ClassDeclaration: [Function: ClassDeclaration],
     ExpressionStatement: [Function: ExpressionStatement],
     FunctionDeclaration: [Function: FunctionDeclaration],
     Line: [Function: Line],
     MemberExpression: [Function: MemberExpression],
     MethodDefinition: [Function: MethodDefinition],
     Property: [Function: Property],
     VariableDeclaration: [Function: VariableDeclaration] ],
  PropertiesProcessors: 
   [ { [Function: XMLPropertiesProcessor] Promise: [Object], propertiesReader: [Object] },
     { [Function: JsonPropertiesProcessor] Promise: [Object] },
     { [Function: XMLPropertiesProcessor] Promise: [Object] } ],
  PropertiesAnnotationParserInstance: 
   PropertiesParser {
     processors: { '.properties': [Object], '.json': [Object], '.xml': [Object] },
     glob: 
      { [Function: glob]
        sync: [Object],
        GlobSync: [Function: GlobSync],
        glob: [Circular],
        hasMagic: [Function],
        Glob: [Object] },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: [Object],
        posix: [Circular] },
     fs: 
      { constants: [Object],
        Stats: [Function: Stats],
        F_OK: 0,
        R_OK: 4,
        W_OK: 2,
        X_OK: 1,
        access: [Function],
        accessSync: [Function],
        exists: [Function],
        existsSync: [Function],
        readFile: [Function],
        readFileSync: [Function],
        close: [Function],
        closeSync: [Function],
        open: [Function],
        openSync: [Function],
        read: [Function],
        readSync: [Function],
        write: [Function],
        writeSync: [Function],
        rename: [Function],
        renameSync: [Function],
        truncate: [Function],
        truncateSync: [Function],
        ftruncate: [Function],
        ftruncateSync: [Function],
        rmdir: [Function],
        rmdirSync: [Function],
        fdatasync: [Function],
        fdatasyncSync: [Function],
        fsync: [Function],
        fsyncSync: [Function],
        mkdir: [Function],
        mkdirSync: [Function],
        readdir: [Function],
        readdirSync: [Function],
        fstat: [Function],
        lstat: [Function],
        stat: [Function],
        fstatSync: [Function],
        lstatSync: [Function],
        statSync: [Function],
        readlink: [Function],
        readlinkSync: [Function],
        symlink: [Function],
        symlinkSync: [Function],
        link: [Function],
        linkSync: [Function],
        unlink: [Function],
        unlinkSync: [Function],
        fchmod: [Function],
        fchmodSync: [Function],
        lchmod: [Function],
        lchmodSync: [Function],
        chmod: [Function],
        chmodSync: [Function],
        lchown: [Function],
        lchownSync: [Function],
        fchown: [Function],
        fchownSync: [Function],
        chown: [Function],
        chownSync: [Function],
        _toUnixTimestamp: [Function: toUnixTimestamp],
        utimes: [Function],
        utimesSync: [Function],
        futimes: [Function],
        futimesSync: [Function],
        writeFile: [Function],
        writeFileSync: [Function],
        appendFile: [Function],
        appendFileSync: [Function],
        watch: [Function],
        watchFile: [Function],
        unwatchFile: [Function],
        realpathSync: [Function: realpathSync],
        realpath: [Function: realpath],
        mkdtemp: [Function],
        mkdtempSync: [Function],
        copyFile: [Function],
        copyFileSync: [Function],
        createReadStream: [Function],
        ReadStream: [Object],
        FileReadStream: [Object],
        createWriteStream: [Function],
        WriteStream: [Object],
        FileWriteStream: [Object] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.3',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        noConflict: [Function: noConflict] },
     camelcase: [Function],
     annotation: undefined,
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'PropertiesParser', context: {} } },
  AnnotationParser: 
   [ AfterAnnotationParser: AfterAnnotationParser { annotation: [Function: After], logManager: [Object] },
     AspectAnnotationParser: AspectParser { annotation: [Function: Aspect], logManager: [Object] },
     AutowireAnnotationParser: { [Function: AutowrieAnnotationParser]
       QualifierAnnotation: [Function: Qualifier],
       annotation: [Function: Autowire],
       camelcase: [Function],
       logManager: [Object] },
     BeanAnnotationParser: BeanParser { annotation: [Function: Bean], logManager: [Object] },
     BeforeAnnotationParser: BeforeAnnotationParser { annotation: [Function: Before], logManager: [Object] },
     ComponentAnnotationParser: ComponentParser { annotation: [Function: Component], logManager: [Object] },
     ConfigurationAnnotationParser: ConfigurationParser { annotation: [Function: Configuration], logManager: [Object] },
     ContextAnnotationParser: ContextParser { annotation: [Function: Context], logManager: [Object] },
     ControllerAnnotationParser: ControllerParser { annotation: [Function: Controller], logManager: [Object] },
     InheritsAnnotationParser: InheritsAnnotationParser {
       globals: [],
       annotation: [Function: Inherits],
       logManager: [Object],
       util: [Object] },
     InitAnnotationParser: InitParser {
       annotation: [Function: Init],
       logManager: [Object],
       util: [Object] },
     NamespaceAnnotationParser: NamespaceParser { annotation: [Function: Namespace], logManager: [Object] },
     ParamAnnotationParser: { [Function: paramParser]
       annotation: [Function: param],
       doctrine: [Object],
       expressionParser: undefined,
       logManager: [Object] },
     PointCuteAnnotationParser: PointCutParser {
       wildcard: [Function],
       md5: [Function],
       annotation: [Function: PointCut],
       logManager: [Object] },
     PropertiesAnnotationParser: PropertiesParser {
       processors: [Object],
       glob: [Object],
       path: [Object],
       fs: [Object],
       Promise: [Object],
       camelcase: [Function],
       annotation: undefined,
       logManager: [Object],
       logger: [Object] },
     PrototypeAnnotationParser: Prototype { annotation: [Function: Prototype], logManager: [Object] },
     QualifierAnnotationParser: QualifierParser {
       annotation: [Function: Qualifier],
       logManager: [Object],
       util: [Object] },
     ResourceAnnotationParser: ResourceParser {
       annotation: [Function: Resource],
       logManager: [Object],
       util: [Object] },
     ResourceParser: ResourceParser {
       annotation: [Function: Resource],
       logManager: [Object],
       util: [Object] },
     RunAnnotationParser: RunParser { annotation: [Function: Run], logManager: [Object] },
     ServiceAnnotationParser: ServiceParser { annotation: [Function: Service], logManager: [Object] },
     StoreAnnotationParser: { [Function: StoreParser]
       annotation: [Function: Store],
       logManager: [Object],
       util: [Object] },
     TypeAnnotationParser: type {
       annotation: [Object],
       doctrine: [Object],
       expressionParser: undefined,
       logManager: [Object] } ],
  DependencyBuilder: 
   DependencyBuilder {
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'DependencyBuilder', context: {} },
     glob: 
      { [Function: glob]
        sync: [Object],
        GlobSync: [Function: GlobSync],
        glob: [Circular],
        hasMagic: [Function],
        Glob: [Object] },
     _: 
      { [Function: lodash]
        templateSettings: [Object],
        after: [Function: after],
        ary: [Function: ary],
        assign: [Function],
        assignIn: [Function],
        assignInWith: [Function],
        assignWith: [Function],
        at: [Function],
        before: [Function: before],
        bind: [Object],
        bindAll: [Function],
        bindKey: [Object],
        castArray: [Function: castArray],
        chain: [Function: chain],
        chunk: [Function: chunk],
        compact: [Function: compact],
        concat: [Function: concat],
        cond: [Function: cond],
        conforms: [Function: conforms],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        curry: [Object],
        curryRight: [Object],
        debounce: [Function: debounce],
        defaults: [Function],
        defaultsDeep: [Function],
        defer: [Function],
        delay: [Function],
        difference: [Function],
        differenceBy: [Function],
        differenceWith: [Function],
        drop: [Function: drop],
        dropRight: [Function: dropRight],
        dropRightWhile: [Function: dropRightWhile],
        dropWhile: [Function: dropWhile],
        fill: [Function: fill],
        filter: [Function: filter],
        flatMap: [Function: flatMap],
        flatMapDeep: [Function: flatMapDeep],
        flatMapDepth: [Function: flatMapDepth],
        flatten: [Function: flatten],
        flattenDeep: [Function: flattenDeep],
        flattenDepth: [Function: flattenDepth],
        flip: [Function: flip],
        flow: [Function],
        flowRight: [Function],
        fromPairs: [Function: fromPairs],
        functions: [Function: functions],
        functionsIn: [Function: functionsIn],
        groupBy: [Function],
        initial: [Function: initial],
        intersection: [Function],
        intersectionBy: [Function],
        intersectionWith: [Function],
        invert: [Function],
        invertBy: [Function],
        invokeMap: [Function],
        iteratee: [Function: iteratee],
        keyBy: [Function],
        keys: [Function: keys],
        keysIn: [Function: keysIn],
        map: [Function: map],
        mapKeys: [Function: mapKeys],
        mapValues: [Function: mapValues],
        matches: [Function: matches],
        matchesProperty: [Function: matchesProperty],
        memoize: [Object],
        merge: [Function],
        mergeWith: [Function],
        method: [Function],
        methodOf: [Function],
        mixin: [Function: mixin],
        negate: [Function: negate],
        nthArg: [Function: nthArg],
        omit: [Function],
        omitBy: [Function: omitBy],
        once: [Function: once],
        orderBy: [Function: orderBy],
        over: [Function],
        overArgs: [Function],
        overEvery: [Function],
        overSome: [Function],
        partial: [Object],
        partialRight: [Object],
        partition: [Function],
        pick: [Function],
        pickBy: [Function: pickBy],
        property: [Function: property],
        propertyOf: [Function: propertyOf],
        pull: [Function],
        pullAll: [Function: pullAll],
        pullAllBy: [Function: pullAllBy],
        pullAllWith: [Function: pullAllWith],
        pullAt: [Function],
        range: [Function],
        rangeRight: [Function],
        rearg: [Function],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        reverse: [Function: reverse],
        sampleSize: [Function: sampleSize],
        set: [Function: set],
        setWith: [Function: setWith],
        shuffle: [Function: shuffle],
        slice: [Function: slice],
        sortBy: [Function],
        sortedUniq: [Function: sortedUniq],
        sortedUniqBy: [Function: sortedUniqBy],
        split: [Function: split],
        spread: [Function: spread],
        tail: [Function: tail],
        take: [Function: take],
        takeRight: [Function: takeRight],
        takeRightWhile: [Function: takeRightWhile],
        takeWhile: [Function: takeWhile],
        tap: [Function: tap],
        throttle: [Function: throttle],
        thru: [Function: thru],
        toArray: [Function: toArray],
        toPairs: [Function],
        toPairsIn: [Function],
        toPath: [Function: toPath],
        toPlainObject: [Function: toPlainObject],
        transform: [Function: transform],
        unary: [Function: unary],
        union: [Function],
        unionBy: [Function],
        unionWith: [Function],
        uniq: [Function: uniq],
        uniqBy: [Function: uniqBy],
        uniqWith: [Function: uniqWith],
        unset: [Function: unset],
        unzip: [Function: unzip],
        unzipWith: [Function: unzipWith],
        update: [Function: update],
        updateWith: [Function: updateWith],
        values: [Function: values],
        valuesIn: [Function: valuesIn],
        without: [Function],
        words: [Function: words],
        wrap: [Function: wrap],
        xor: [Function],
        xorBy: [Function],
        xorWith: [Function],
        zip: [Function],
        zipObject: [Function: zipObject],
        zipObjectDeep: [Function: zipObjectDeep],
        zipWith: [Function],
        entries: [Function],
        entriesIn: [Function],
        extend: [Function],
        extendWith: [Function],
        add: [Function],
        attempt: [Function],
        camelCase: [Function],
        capitalize: [Function: capitalize],
        ceil: [Function],
        clamp: [Function: clamp],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        cloneDeepWith: [Function: cloneDeepWith],
        cloneWith: [Function: cloneWith],
        conformsTo: [Function: conformsTo],
        deburr: [Function: deburr],
        defaultTo: [Function: defaultTo],
        divide: [Function],
        endsWith: [Function: endsWith],
        eq: [Function: eq],
        escape: [Function: escape],
        escapeRegExp: [Function: escapeRegExp],
        every: [Function: every],
        find: [Function],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        floor: [Function],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function: forIn],
        forInRight: [Function: forInRight],
        forOwn: [Function: forOwn],
        forOwnRight: [Function: forOwnRight],
        get: [Function: get],
        gt: [Function],
        gte: [Function],
        has: [Function: has],
        hasIn: [Function: hasIn],
        head: [Function: head],
        identity: [Function: identity],
        includes: [Function: includes],
        indexOf: [Function: indexOf],
        inRange: [Function: inRange],
        invoke: [Function],
        isArguments: [Function: baseIsArguments],
        isArray: [Function: isArray],
        isArrayBuffer: [Function],
        isArrayLike: [Function: isArrayLike],
        isArrayLikeObject: [Function: isArrayLikeObject],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isDate: [Function],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isEqualWith: [Function: isEqualWith],
        isError: [Function: isError],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isInteger: [Function: isInteger],
        isLength: [Function: isLength],
        isMap: [Function],
        isMatch: [Function: isMatch],
        isMatchWith: [Function: isMatchWith],
        isNaN: [Function: isNaN],
        isNative: [Function: isNative],
        isNil: [Function: isNil],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isObjectLike: [Function: isObjectLike],
        isPlainObject: [Function: isPlainObject],
        isRegExp: [Function],
        isSafeInteger: [Function: isSafeInteger],
        isSet: [Function],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isTypedArray: [Function],
        isUndefined: [Function: isUndefined],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        join: [Function: join],
        kebabCase: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lowerCase: [Function],
        lowerFirst: [Function],
        lt: [Function],
        lte: [Function],
        max: [Function: max],
        maxBy: [Function: maxBy],
        mean: [Function: mean],
        meanBy: [Function: meanBy],
        min: [Function: min],
        minBy: [Function: minBy],
        stubArray: [Function: stubArray],
        stubFalse: [Function: stubFalse],
        stubObject: [Function: stubObject],
        stubString: [Function: stubString],
        stubTrue: [Function: stubTrue],
        multiply: [Function],
        nth: [Function: nth],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function],
        pad: [Function: pad],
        padEnd: [Function: padEnd],
        padStart: [Function: padStart],
        parseInt: [Function: parseInt],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        repeat: [Function: repeat],
        replace: [Function: replace],
        result: [Function: result],
        round: [Function],
        runInContext: [Function: runInContext],
        sample: [Function: sample],
        size: [Function: size],
        snakeCase: [Function],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        sortedIndexBy: [Function: sortedIndexBy],
        sortedIndexOf: [Function: sortedIndexOf],
        sortedLastIndex: [Function: sortedLastIndex],
        sortedLastIndexBy: [Function: sortedLastIndexBy],
        sortedLastIndexOf: [Function: sortedLastIndexOf],
        startCase: [Function],
        startsWith: [Function: startsWith],
        subtract: [Function],
        sum: [Function: sum],
        sumBy: [Function: sumBy],
        template: [Function: template],
        times: [Function: times],
        toFinite: [Function: toFinite],
        toInteger: [Function: toInteger],
        toLength: [Function: toLength],
        toLower: [Function: toLower],
        toNumber: [Function: toNumber],
        toSafeInteger: [Function: toSafeInteger],
        toString: [Function: toString],
        toUpper: [Function: toUpper],
        trim: [Function: trim],
        trimEnd: [Function: trimEnd],
        trimStart: [Function: trimStart],
        truncate: [Function: truncate],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        upperCase: [Function],
        upperFirst: [Function],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        first: [Function: head],
        VERSION: '4.17.11',
        _: [Circular] },
     toposort: [Function: Toposort],
     util: 
      { _errnoException: [Function: _errnoException],
        _exceptionWithHostPort: [Function: _exceptionWithHostPort],
        _extend: [Function: _extend],
        callbackify: [Function: callbackify],
        debuglog: [Function: debuglog],
        deprecate: [Function: deprecate],
        format: [Function: format],
        inherits: [Function: inherits],
        inspect: [Object],
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isNull: [Function: isNull],
        isNullOrUndefined: [Function: isNullOrUndefined],
        isNumber: [Function: isNumber],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isUndefined: [Function: isUndefined],
        isRegExp: [Function: isRegExp],
        isObject: [Function: isObject],
        isDate: [Function: isDate],
        isError: [Function: isError],
        isFunction: [Function: isFunction],
        isPrimitive: [Function: isPrimitive],
        log: [Function: log],
        promisify: [Object],
        TextDecoder: [Function: TextDecoder],
        TextEncoder: [Function: TextEncoder],
        debug: [Function: deprecated],
        error: [Function: deprecated],
        print: [Function: deprecated],
        puts: [Function: deprecated] },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: [Object],
        posix: [Circular] } },
  StructureParser: 
   StructureParser {
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'StructureParser', context: {} },
     annotationParser: 
      [ AfterAnnotationParser: [Object],
        AspectAnnotationParser: [Object],
        AutowireAnnotationParser: [Object],
        BeanAnnotationParser: [Object],
        BeforeAnnotationParser: [Object],
        ComponentAnnotationParser: [Object],
        ConfigurationAnnotationParser: [Object],
        ContextAnnotationParser: [Object],
        ControllerAnnotationParser: [Object],
        InheritsAnnotationParser: [Object],
        InitAnnotationParser: [Object],
        NamespaceAnnotationParser: [Object],
        ParamAnnotationParser: [Object],
        PointCuteAnnotationParser: [Object],
        PropertiesAnnotationParser: [Object],
        PrototypeAnnotationParser: [Object],
        QualifierAnnotationParser: [Object],
        ResourceAnnotationParser: [Object],
        ResourceParser: [Object],
        RunAnnotationParser: [Object],
        ServiceAnnotationParser: [Object],
        StoreAnnotationParser: [Object],
        TypeAnnotationParser: [Object] ],
     expressionParser: 
      [ Block: [Function: Block],
        CallExpression: [Function: CallExpression],
        ClassDeclaration: [Function: ClassDeclaration],
        ExpressionStatement: [Function: ExpressionStatement],
        FunctionDeclaration: [Function: FunctionDeclaration],
        Line: [Function: Line],
        MemberExpression: [Function: MemberExpression],
        MethodDefinition: [Function: MethodDefinition],
        Property: [Function: Property],
        VariableDeclaration: [Function: VariableDeclaration] ],
     removeTokens: 
      [ 'BlockStatement>',
        'AssignmentExpression',
        'Identifier',
        'Literal',
        'ClassBody',
        'ClassExpression' ],
     lightTokenInformation: 'true',
     removeLocationInformation: 'true',
     beautify: { [Function: js_beautify] defaultOptions: [Function] },
     _: 
      { [Function: lodash]
        templateSettings: [Object],
        after: [Function: after],
        ary: [Function: ary],
        assign: [Function],
        assignIn: [Function],
        assignInWith: [Function],
        assignWith: [Function],
        at: [Function],
        before: [Function: before],
        bind: [Object],
        bindAll: [Function],
        bindKey: [Object],
        castArray: [Function: castArray],
        chain: [Function: chain],
        chunk: [Function: chunk],
        compact: [Function: compact],
        concat: [Function: concat],
        cond: [Function: cond],
        conforms: [Function: conforms],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        curry: [Object],
        curryRight: [Object],
        debounce: [Function: debounce],
        defaults: [Function],
        defaultsDeep: [Function],
        defer: [Function],
        delay: [Function],
        difference: [Function],
        differenceBy: [Function],
        differenceWith: [Function],
        drop: [Function: drop],
        dropRight: [Function: dropRight],
        dropRightWhile: [Function: dropRightWhile],
        dropWhile: [Function: dropWhile],
        fill: [Function: fill],
        filter: [Function: filter],
        flatMap: [Function: flatMap],
        flatMapDeep: [Function: flatMapDeep],
        flatMapDepth: [Function: flatMapDepth],
        flatten: [Function: flatten],
        flattenDeep: [Function: flattenDeep],
        flattenDepth: [Function: flattenDepth],
        flip: [Function: flip],
        flow: [Function],
        flowRight: [Function],
        fromPairs: [Function: fromPairs],
        functions: [Function: functions],
        functionsIn: [Function: functionsIn],
        groupBy: [Function],
        initial: [Function: initial],
        intersection: [Function],
        intersectionBy: [Function],
        intersectionWith: [Function],
        invert: [Function],
        invertBy: [Function],
        invokeMap: [Function],
        iteratee: [Function: iteratee],
        keyBy: [Function],
        keys: [Function: keys],
        keysIn: [Function: keysIn],
        map: [Function: map],
        mapKeys: [Function: mapKeys],
        mapValues: [Function: mapValues],
        matches: [Function: matches],
        matchesProperty: [Function: matchesProperty],
        memoize: [Object],
        merge: [Function],
        mergeWith: [Function],
        method: [Function],
        methodOf: [Function],
        mixin: [Function: mixin],
        negate: [Function: negate],
        nthArg: [Function: nthArg],
        omit: [Function],
        omitBy: [Function: omitBy],
        once: [Function: once],
        orderBy: [Function: orderBy],
        over: [Function],
        overArgs: [Function],
        overEvery: [Function],
        overSome: [Function],
        partial: [Object],
        partialRight: [Object],
        partition: [Function],
        pick: [Function],
        pickBy: [Function: pickBy],
        property: [Function: property],
        propertyOf: [Function: propertyOf],
        pull: [Function],
        pullAll: [Function: pullAll],
        pullAllBy: [Function: pullAllBy],
        pullAllWith: [Function: pullAllWith],
        pullAt: [Function],
        range: [Function],
        rangeRight: [Function],
        rearg: [Function],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        reverse: [Function: reverse],
        sampleSize: [Function: sampleSize],
        set: [Function: set],
        setWith: [Function: setWith],
        shuffle: [Function: shuffle],
        slice: [Function: slice],
        sortBy: [Function],
        sortedUniq: [Function: sortedUniq],
        sortedUniqBy: [Function: sortedUniqBy],
        split: [Function: split],
        spread: [Function: spread],
        tail: [Function: tail],
        take: [Function: take],
        takeRight: [Function: takeRight],
        takeRightWhile: [Function: takeRightWhile],
        takeWhile: [Function: takeWhile],
        tap: [Function: tap],
        throttle: [Function: throttle],
        thru: [Function: thru],
        toArray: [Function: toArray],
        toPairs: [Function],
        toPairsIn: [Function],
        toPath: [Function: toPath],
        toPlainObject: [Function: toPlainObject],
        transform: [Function: transform],
        unary: [Function: unary],
        union: [Function],
        unionBy: [Function],
        unionWith: [Function],
        uniq: [Function: uniq],
        uniqBy: [Function: uniqBy],
        uniqWith: [Function: uniqWith],
        unset: [Function: unset],
        unzip: [Function: unzip],
        unzipWith: [Function: unzipWith],
        update: [Function: update],
        updateWith: [Function: updateWith],
        values: [Function: values],
        valuesIn: [Function: valuesIn],
        without: [Function],
        words: [Function: words],
        wrap: [Function: wrap],
        xor: [Function],
        xorBy: [Function],
        xorWith: [Function],
        zip: [Function],
        zipObject: [Function: zipObject],
        zipObjectDeep: [Function: zipObjectDeep],
        zipWith: [Function],
        entries: [Function],
        entriesIn: [Function],
        extend: [Function],
        extendWith: [Function],
        add: [Function],
        attempt: [Function],
        camelCase: [Function],
        capitalize: [Function: capitalize],
        ceil: [Function],
        clamp: [Function: clamp],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        cloneDeepWith: [Function: cloneDeepWith],
        cloneWith: [Function: cloneWith],
        conformsTo: [Function: conformsTo],
        deburr: [Function: deburr],
        defaultTo: [Function: defaultTo],
        divide: [Function],
        endsWith: [Function: endsWith],
        eq: [Function: eq],
        escape: [Function: escape],
        escapeRegExp: [Function: escapeRegExp],
        every: [Function: every],
        find: [Function],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        floor: [Function],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function: forIn],
        forInRight: [Function: forInRight],
        forOwn: [Function: forOwn],
        forOwnRight: [Function: forOwnRight],
        get: [Function: get],
        gt: [Function],
        gte: [Function],
        has: [Function: has],
        hasIn: [Function: hasIn],
        head: [Function: head],
        identity: [Function: identity],
        includes: [Function: includes],
        indexOf: [Function: indexOf],
        inRange: [Function: inRange],
        invoke: [Function],
        isArguments: [Function: baseIsArguments],
        isArray: [Function: isArray],
        isArrayBuffer: [Function],
        isArrayLike: [Function: isArrayLike],
        isArrayLikeObject: [Function: isArrayLikeObject],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isDate: [Function],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isEqualWith: [Function: isEqualWith],
        isError: [Function: isError],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isInteger: [Function: isInteger],
        isLength: [Function: isLength],
        isMap: [Function],
        isMatch: [Function: isMatch],
        isMatchWith: [Function: isMatchWith],
        isNaN: [Function: isNaN],
        isNative: [Function: isNative],
        isNil: [Function: isNil],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isObjectLike: [Function: isObjectLike],
        isPlainObject: [Function: isPlainObject],
        isRegExp: [Function],
        isSafeInteger: [Function: isSafeInteger],
        isSet: [Function],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isTypedArray: [Function],
        isUndefined: [Function: isUndefined],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        join: [Function: join],
        kebabCase: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lowerCase: [Function],
        lowerFirst: [Function],
        lt: [Function],
        lte: [Function],
        max: [Function: max],
        maxBy: [Function: maxBy],
        mean: [Function: mean],
        meanBy: [Function: meanBy],
        min: [Function: min],
        minBy: [Function: minBy],
        stubArray: [Function: stubArray],
        stubFalse: [Function: stubFalse],
        stubObject: [Function: stubObject],
        stubString: [Function: stubString],
        stubTrue: [Function: stubTrue],
        multiply: [Function],
        nth: [Function: nth],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function],
        pad: [Function: pad],
        padEnd: [Function: padEnd],
        padStart: [Function: padStart],
        parseInt: [Function: parseInt],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        repeat: [Function: repeat],
        replace: [Function: replace],
        result: [Function: result],
        round: [Function],
        runInContext: [Function: runInContext],
        sample: [Function: sample],
        size: [Function: size],
        snakeCase: [Function],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        sortedIndexBy: [Function: sortedIndexBy],
        sortedIndexOf: [Function: sortedIndexOf],
        sortedLastIndex: [Function: sortedLastIndex],
        sortedLastIndexBy: [Function: sortedLastIndexBy],
        sortedLastIndexOf: [Function: sortedLastIndexOf],
        startCase: [Function],
        startsWith: [Function: startsWith],
        subtract: [Function],
        sum: [Function: sum],
        sumBy: [Function: sumBy],
        template: [Function: template],
        times: [Function: times],
        toFinite: [Function: toFinite],
        toInteger: [Function: toInteger],
        toLength: [Function: toLength],
        toLower: [Function: toLower],
        toNumber: [Function: toNumber],
        toSafeInteger: [Function: toSafeInteger],
        toString: [Function: toString],
        toUpper: [Function: toUpper],
        trim: [Function: trim],
        trimEnd: [Function: trimEnd],
        trimStart: [Function: trimStart],
        truncate: [Function: truncate],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        upperCase: [Function],
        upperFirst: [Function],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        first: [Function: head],
        VERSION: '4.17.11',
        _: [Circular] },
     util: 
      { _errnoException: [Function: _errnoException],
        _exceptionWithHostPort: [Function: _exceptionWithHostPort],
        _extend: [Function: _extend],
        callbackify: [Function: callbackify],
        debuglog: [Function: debuglog],
        deprecate: [Function: deprecate],
        format: [Function: format],
        inherits: [Function: inherits],
        inspect: [Object],
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isNull: [Function: isNull],
        isNullOrUndefined: [Function: isNullOrUndefined],
        isNumber: [Function: isNumber],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isUndefined: [Function: isUndefined],
        isRegExp: [Function: isRegExp],
        isObject: [Function: isObject],
        isDate: [Function: isDate],
        isError: [Function: isError],
        isFunction: [Function: isFunction],
        isPrimitive: [Function: isPrimitive],
        log: [Function: log],
        promisify: [Object],
        TextDecoder: [Function: TextDecoder],
        TextEncoder: [Function: TextEncoder],
        debug: [Function: deprecated],
        error: [Function: deprecated],
        print: [Function: deprecated],
        puts: [Function: deprecated] },
     esprima: 
      { parse: [Function: parse],
        tokenize: [Function: tokenize],
        Syntax: [Object],
        version: '3.1.3' },
     estraverse: 
      { version: '4.2.0',
        Syntax: [Object],
        traverse: [Function: traverse],
        replace: [Function: replace],
        attachComments: [Function: attachComments],
        VisitorKeys: [Object],
        VisitorOption: [Object],
        Controller: [Function: Controller],
        cloneEnvironment: [Function] } },
  ContextBuilder: 
   ContextBuilder {
     domain: null,
     _events: 
      { aop_initialize: [Array],
        aop_wire: [Array],
        'finishing bean setup': [Array],
        inherit: [Array],
        initialize: [Array],
        inject: [Array],
        instantiate: [Array],
        run: [Array],
        stashing: [Array],
        '0x2': [Array] },
     _eventsCount: 10,
     _maxListeners: undefined,
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'ContextBuilder', context: {} },
     annotationParser: 
      [ AfterAnnotationParser: [Object],
        AspectAnnotationParser: [Object],
        AutowireAnnotationParser: [Object],
        BeanAnnotationParser: [Object],
        BeforeAnnotationParser: [Object],
        ComponentAnnotationParser: [Object],
        ConfigurationAnnotationParser: [Object],
        ContextAnnotationParser: [Object],
        ControllerAnnotationParser: [Object],
        InheritsAnnotationParser: [Object],
        InitAnnotationParser: [Object],
        NamespaceAnnotationParser: [Object],
        ParamAnnotationParser: [Object],
        PointCuteAnnotationParser: [Object],
        PropertiesAnnotationParser: [Object],
        PrototypeAnnotationParser: [Object],
        QualifierAnnotationParser: [Object],
        ResourceAnnotationParser: [Object],
        ResourceParser: [Object],
        RunAnnotationParser: [Object],
        ServiceAnnotationParser: [Object],
        StoreAnnotationParser: [Object],
        TypeAnnotationParser: [Object] ],
     stages: 
      [ _AOP_INITIALIZE: 'aop_initialize',
        _AOP_WIRE: 'aop_wire',
        _FINISH_SETUP_: 'finishing bean setup',
        _INHERIT_: 'inherit',
        _INITIALIZE_: 'initialize',
        _INJECT_: 'inject',
        _INSTANTIATE_: 'instantiate',
        _RUN_: 'run',
        _STASHING_: 'stashing' ],
     promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.3',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        noConflict: [Function: noConflict] } },
  Factory: 
   Factory {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     modulePath: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/factory',
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'default', context: {} },
     stacks: [],
     dependencyBuilder: 
      DependencyBuilder {
        logManager: [Object],
        logger: [Object],
        glob: [Object],
        _: [Object],
        toposort: [Function: Toposort],
        util: [Object],
        path: [Object] },
     esprima: 
      { parse: [Function: parse],
        tokenize: [Function: tokenize],
        Syntax: [Object],
        version: '3.1.3' },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: [Object],
        posix: [Circular] },
     estraverse: 
      { version: '4.2.0',
        Syntax: [Object],
        traverse: [Function: traverse],
        replace: [Function: replace],
        attachComments: [Function: attachComments],
        VisitorKeys: [Object],
        VisitorOption: [Object],
        Controller: [Function: Controller],
        cloneEnvironment: [Function] },
     stages: 
      [ _AOP_INITIALIZE: 'aop_initialize',
        _AOP_WIRE: 'aop_wire',
        _FINISH_SETUP_: 'finishing bean setup',
        _INHERIT_: 'inherit',
        _INITIALIZE_: 'initialize',
        _INJECT_: 'inject',
        _INSTANTIATE_: 'instantiate',
        _RUN_: 'run',
        _STASHING_: 'stashing' ] },
  BaseAnnotationParser: [Function: BaseAnnotationParser],
  BeanAnnotationParserPrototype: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] },
  Esprima: 
   { parse: [Function: parse],
     tokenize: [Function: tokenize],
     Syntax: 
      { AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression' },
     version: '3.1.3' },
  Util: 
   { _errnoException: [Function: _errnoException],
     _exceptionWithHostPort: [Function: _exceptionWithHostPort],
     _extend: [Function: _extend],
     callbackify: [Function: callbackify],
     debuglog: [Function: debuglog],
     deprecate: [Function: deprecate],
     format: [Function: format],
     inherits: [Function: inherits],
     inspect: 
      { [Function: inspect]
        custom: Symbol(util.inspect.custom),
        colors: [Object],
        styles: [Object] },
     isArray: [Function: isArray],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isNull: [Function: isNull],
     isNullOrUndefined: [Function: isNullOrUndefined],
     isNumber: [Function: isNumber],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isUndefined: [Function: isUndefined],
     isRegExp: [Function: isRegExp],
     isObject: [Function: isObject],
     isDate: [Function: isDate],
     isError: [Function: isError],
     isFunction: [Function: isFunction],
     isPrimitive: [Function: isPrimitive],
     log: [Function: log],
     promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
     TextDecoder: [Function: TextDecoder],
     TextEncoder: [Function: TextEncoder],
     debug: [Function: deprecated],
     error: [Function: deprecated],
     print: [Function: deprecated],
     puts: [Function: deprecated] },
  Path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '\\',
        delimiter: ';',
        win32: [Circular],
        posix: [Circular] },
     posix: [Circular] },
  Lodash: 
   { [Function: lodash]
     templateSettings: 
      { escape: /<%-([\s\S]+?)%>/g,
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        variable: '',
        imports: [Object] },
     after: [Function: after],
     ary: [Function: ary],
     assign: [Function],
     assignIn: [Function],
     assignInWith: [Function],
     assignWith: [Function],
     at: [Function],
     before: [Function: before],
     bind: { [Function] placeholder: [Circular] },
     bindAll: [Function],
     bindKey: { [Function] placeholder: [Circular] },
     castArray: [Function: castArray],
     chain: [Function: chain],
     chunk: [Function: chunk],
     compact: [Function: compact],
     concat: [Function: concat],
     cond: [Function: cond],
     conforms: [Function: conforms],
     constant: [Function: constant],
     countBy: [Function],
     create: [Function: create],
     curry: { [Function: curry] placeholder: [Circular] },
     curryRight: { [Function: curryRight] placeholder: [Circular] },
     debounce: [Function: debounce],
     defaults: [Function],
     defaultsDeep: [Function],
     defer: [Function],
     delay: [Function],
     difference: [Function],
     differenceBy: [Function],
     differenceWith: [Function],
     drop: [Function: drop],
     dropRight: [Function: dropRight],
     dropRightWhile: [Function: dropRightWhile],
     dropWhile: [Function: dropWhile],
     fill: [Function: fill],
     filter: [Function: filter],
     flatMap: [Function: flatMap],
     flatMapDeep: [Function: flatMapDeep],
     flatMapDepth: [Function: flatMapDepth],
     flatten: [Function: flatten],
     flattenDeep: [Function: flattenDeep],
     flattenDepth: [Function: flattenDepth],
     flip: [Function: flip],
     flow: [Function],
     flowRight: [Function],
     fromPairs: [Function: fromPairs],
     functions: [Function: functions],
     functionsIn: [Function: functionsIn],
     groupBy: [Function],
     initial: [Function: initial],
     intersection: [Function],
     intersectionBy: [Function],
     intersectionWith: [Function],
     invert: [Function],
     invertBy: [Function],
     invokeMap: [Function],
     iteratee: [Function: iteratee],
     keyBy: [Function],
     keys: [Function: keys],
     keysIn: [Function: keysIn],
     map: [Function: map],
     mapKeys: [Function: mapKeys],
     mapValues: [Function: mapValues],
     matches: [Function: matches],
     matchesProperty: [Function: matchesProperty],
     memoize: { [Function: memoize] Cache: [Function: MapCache] },
     merge: [Function],
     mergeWith: [Function],
     method: [Function],
     methodOf: [Function],
     mixin: [Function: mixin],
     negate: [Function: negate],
     nthArg: [Function: nthArg],
     omit: [Function],
     omitBy: [Function: omitBy],
     once: [Function: once],
     orderBy: [Function: orderBy],
     over: [Function],
     overArgs: [Function],
     overEvery: [Function],
     overSome: [Function],
     partial: { [Function] placeholder: [Circular] },
     partialRight: { [Function] placeholder: [Circular] },
     partition: [Function],
     pick: [Function],
     pickBy: [Function: pickBy],
     property: [Function: property],
     propertyOf: [Function: propertyOf],
     pull: [Function],
     pullAll: [Function: pullAll],
     pullAllBy: [Function: pullAllBy],
     pullAllWith: [Function: pullAllWith],
     pullAt: [Function],
     range: [Function],
     rangeRight: [Function],
     rearg: [Function],
     reject: [Function: reject],
     remove: [Function: remove],
     rest: [Function: rest],
     reverse: [Function: reverse],
     sampleSize: [Function: sampleSize],
     set: [Function: set],
     setWith: [Function: setWith],
     shuffle: [Function: shuffle],
     slice: [Function: slice],
     sortBy: [Function],
     sortedUniq: [Function: sortedUniq],
     sortedUniqBy: [Function: sortedUniqBy],
     split: [Function: split],
     spread: [Function: spread],
     tail: [Function: tail],
     take: [Function: take],
     takeRight: [Function: takeRight],
     takeRightWhile: [Function: takeRightWhile],
     takeWhile: [Function: takeWhile],
     tap: [Function: tap],
     throttle: [Function: throttle],
     thru: [Function: thru],
     toArray: [Function: toArray],
     toPairs: [Function],
     toPairsIn: [Function],
     toPath: [Function: toPath],
     toPlainObject: [Function: toPlainObject],
     transform: [Function: transform],
     unary: [Function: unary],
     union: [Function],
     unionBy: [Function],
     unionWith: [Function],
     uniq: [Function: uniq],
     uniqBy: [Function: uniqBy],
     uniqWith: [Function: uniqWith],
     unset: [Function: unset],
     unzip: [Function: unzip],
     unzipWith: [Function: unzipWith],
     update: [Function: update],
     updateWith: [Function: updateWith],
     values: [Function: values],
     valuesIn: [Function: valuesIn],
     without: [Function],
     words: [Function: words],
     wrap: [Function: wrap],
     xor: [Function],
     xorBy: [Function],
     xorWith: [Function],
     zip: [Function],
     zipObject: [Function: zipObject],
     zipObjectDeep: [Function: zipObjectDeep],
     zipWith: [Function],
     entries: [Function],
     entriesIn: [Function],
     extend: [Function],
     extendWith: [Function],
     add: [Function],
     attempt: [Function],
     camelCase: [Function],
     capitalize: [Function: capitalize],
     ceil: [Function],
     clamp: [Function: clamp],
     clone: [Function: clone],
     cloneDeep: [Function: cloneDeep],
     cloneDeepWith: [Function: cloneDeepWith],
     cloneWith: [Function: cloneWith],
     conformsTo: [Function: conformsTo],
     deburr: [Function: deburr],
     defaultTo: [Function: defaultTo],
     divide: [Function],
     endsWith: [Function: endsWith],
     eq: [Function: eq],
     escape: [Function: escape],
     escapeRegExp: [Function: escapeRegExp],
     every: [Function: every],
     find: [Function],
     findIndex: [Function: findIndex],
     findKey: [Function: findKey],
     findLast: [Function],
     findLastIndex: [Function: findLastIndex],
     findLastKey: [Function: findLastKey],
     floor: [Function],
     forEach: [Function: forEach],
     forEachRight: [Function: forEachRight],
     forIn: [Function: forIn],
     forInRight: [Function: forInRight],
     forOwn: [Function: forOwn],
     forOwnRight: [Function: forOwnRight],
     get: [Function: get],
     gt: [Function],
     gte: [Function],
     has: [Function: has],
     hasIn: [Function: hasIn],
     head: [Function: head],
     identity: [Function: identity],
     includes: [Function: includes],
     indexOf: [Function: indexOf],
     inRange: [Function: inRange],
     invoke: [Function],
     isArguments: [Function: baseIsArguments],
     isArray: [Function: isArray],
     isArrayBuffer: [Function],
     isArrayLike: [Function: isArrayLike],
     isArrayLikeObject: [Function: isArrayLikeObject],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isDate: [Function],
     isElement: [Function: isElement],
     isEmpty: [Function: isEmpty],
     isEqual: [Function: isEqual],
     isEqualWith: [Function: isEqualWith],
     isError: [Function: isError],
     isFinite: [Function: isFinite],
     isFunction: [Function: isFunction],
     isInteger: [Function: isInteger],
     isLength: [Function: isLength],
     isMap: [Function],
     isMatch: [Function: isMatch],
     isMatchWith: [Function: isMatchWith],
     isNaN: [Function: isNaN],
     isNative: [Function: isNative],
     isNil: [Function: isNil],
     isNull: [Function: isNull],
     isNumber: [Function: isNumber],
     isObject: [Function: isObject],
     isObjectLike: [Function: isObjectLike],
     isPlainObject: [Function: isPlainObject],
     isRegExp: [Function],
     isSafeInteger: [Function: isSafeInteger],
     isSet: [Function],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isTypedArray: [Function],
     isUndefined: [Function: isUndefined],
     isWeakMap: [Function: isWeakMap],
     isWeakSet: [Function: isWeakSet],
     join: [Function: join],
     kebabCase: [Function],
     last: [Function: last],
     lastIndexOf: [Function: lastIndexOf],
     lowerCase: [Function],
     lowerFirst: [Function],
     lt: [Function],
     lte: [Function],
     max: [Function: max],
     maxBy: [Function: maxBy],
     mean: [Function: mean],
     meanBy: [Function: meanBy],
     min: [Function: min],
     minBy: [Function: minBy],
     stubArray: [Function: stubArray],
     stubFalse: [Function: stubFalse],
     stubObject: [Function: stubObject],
     stubString: [Function: stubString],
     stubTrue: [Function: stubTrue],
     multiply: [Function],
     nth: [Function: nth],
     noConflict: [Function: noConflict],
     noop: [Function: noop],
     now: [Function],
     pad: [Function: pad],
     padEnd: [Function: padEnd],
     padStart: [Function: padStart],
     parseInt: [Function: parseInt],
     random: [Function: random],
     reduce: [Function: reduce],
     reduceRight: [Function: reduceRight],
     repeat: [Function: repeat],
     replace: [Function: replace],
     result: [Function: result],
     round: [Function],
     runInContext: [Function: runInContext],
     sample: [Function: sample],
     size: [Function: size],
     snakeCase: [Function],
     some: [Function: some],
     sortedIndex: [Function: sortedIndex],
     sortedIndexBy: [Function: sortedIndexBy],
     sortedIndexOf: [Function: sortedIndexOf],
     sortedLastIndex: [Function: sortedLastIndex],
     sortedLastIndexBy: [Function: sortedLastIndexBy],
     sortedLastIndexOf: [Function: sortedLastIndexOf],
     startCase: [Function],
     startsWith: [Function: startsWith],
     subtract: [Function],
     sum: [Function: sum],
     sumBy: [Function: sumBy],
     template: [Function: template],
     times: [Function: times],
     toFinite: [Function: toFinite],
     toInteger: [Function: toInteger],
     toLength: [Function: toLength],
     toLower: [Function: toLower],
     toNumber: [Function: toNumber],
     toSafeInteger: [Function: toSafeInteger],
     toString: [Function: toString],
     toUpper: [Function: toUpper],
     trim: [Function: trim],
     trimEnd: [Function: trimEnd],
     trimStart: [Function: trimStart],
     truncate: [Function: truncate],
     unescape: [Function: unescape],
     uniqueId: [Function: uniqueId],
     upperCase: [Function],
     upperFirst: [Function],
     each: [Function: forEach],
     eachRight: [Function: forEachRight],
     first: [Function: head],
     VERSION: '4.17.11',
     _: [Circular] },
  Estraverse: 
   { version: '4.2.0',
     Syntax: 
      { AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',
        ComprehensionExpression: 'ComprehensionExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression' },
     traverse: [Function: traverse],
     replace: [Function: replace],
     attachComments: [Function: attachComments],
     VisitorKeys: 
      { AssignmentExpression: [Array],
        AssignmentPattern: [Array],
        ArrayExpression: [Array],
        ArrayPattern: [Array],
        ArrowFunctionExpression: [Array],
        AwaitExpression: [Array],
        BlockStatement: [Array],
        BinaryExpression: [Array],
        BreakStatement: [Array],
        CallExpression: [Array],
        CatchClause: [Array],
        ClassBody: [Array],
        ClassDeclaration: [Array],
        ClassExpression: [Array],
        ComprehensionBlock: [Array],
        ComprehensionExpression: [Array],
        ConditionalExpression: [Array],
        ContinueStatement: [Array],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: [Array],
        EmptyStatement: [],
        ExportAllDeclaration: [Array],
        ExportDefaultDeclaration: [Array],
        ExportNamedDeclaration: [Array],
        ExportSpecifier: [Array],
        ExpressionStatement: [Array],
        ForStatement: [Array],
        ForInStatement: [Array],
        ForOfStatement: [Array],
        FunctionDeclaration: [Array],
        FunctionExpression: [Array],
        GeneratorExpression: [Array],
        Identifier: [],
        IfStatement: [Array],
        ImportDeclaration: [Array],
        ImportDefaultSpecifier: [Array],
        ImportNamespaceSpecifier: [Array],
        ImportSpecifier: [Array],
        Literal: [],
        LabeledStatement: [Array],
        LogicalExpression: [Array],
        MemberExpression: [Array],
        MetaProperty: [Array],
        MethodDefinition: [Array],
        ModuleSpecifier: [],
        NewExpression: [Array],
        ObjectExpression: [Array],
        ObjectPattern: [Array],
        Program: [Array],
        Property: [Array],
        RestElement: [Array],
        ReturnStatement: [Array],
        SequenceExpression: [Array],
        SpreadElement: [Array],
        Super: [],
        SwitchStatement: [Array],
        SwitchCase: [Array],
        TaggedTemplateExpression: [Array],
        TemplateElement: [],
        TemplateLiteral: [Array],
        ThisExpression: [],
        ThrowStatement: [Array],
        TryStatement: [Array],
        UnaryExpression: [Array],
        UpdateExpression: [Array],
        VariableDeclaration: [Array],
        VariableDeclarator: [Array],
        WhileStatement: [Array],
        WithStatement: [Array],
        YieldExpression: [Array] },
     VisitorOption: { Break: {}, Skip: {}, Remove: {} },
     Controller: [Function: Controller],
     cloneEnvironment: [Function] },
  Bluebird: 
   { [Function: Promise]
     TypeError: [Function: TypeError],
     RangeError: [Function: RangeError],
     CancellationError: [Function: SubError],
     TimeoutError: [Function: SubError],
     OperationalError: [Function: OperationalError],
     RejectionError: [Function: OperationalError],
     AggregateError: [Function: SubError],
     _peekContext: [Function],
     onPossiblyUnhandledRejection: [Function],
     onUnhandledRejectionHandled: [Function],
     longStackTraces: [Function],
     hasLongStackTraces: [Function],
     config: [Function],
     getNewLibraryCopy: [Function],
     is: [Function],
     fromCallback: [Function],
     fromNode: [Function],
     all: [Function],
     cast: [Function],
     fulfilled: [Function],
     resolve: [Function],
     rejected: [Function],
     reject: [Function],
     setScheduler: [Function],
     pending: [Function],
     defer: [Function],
     method: [Function],
     try: [Function],
     attempt: [Function],
     bind: [Function],
     PromiseInspection: [Function: PromiseInspection],
     join: [Function],
     Promise: [Circular],
     version: '3.5.3',
     map: [Function],
     using: [Function],
     delay: [Function],
     coroutine: { [Function] addYieldHandler: [Function] },
     spawn: [Function],
     promisify: [Function],
     promisifyAll: [Function],
     props: [Function],
     race: [Function],
     reduce: [Function],
     settle: [Function],
     some: [Function],
     _SomePromiseArray: [Function: SomePromiseArray],
     filter: [Function],
     each: [Function],
     mapSeries: [Function: PromiseMapSeries],
     any: [Function],
     noConflict: [Function: noConflict] },
  FS: 
   { constants: 
      { O_RDONLY: 0,
        O_WRONLY: 1,
        O_RDWR: 2,
        S_IFMT: 61440,
        S_IFREG: 32768,
        S_IFDIR: 16384,
        S_IFCHR: 8192,
        S_IFBLK: 24576,
        S_IFIFO: 4096,
        S_IFLNK: 40960,
        S_IFSOCK: 49152,
        O_CREAT: 512,
        O_EXCL: 2048,
        O_NOCTTY: 131072,
        O_TRUNC: 1024,
        O_APPEND: 8,
        O_DIRECTORY: 1048576,
        O_NOFOLLOW: 256,
        O_SYNC: 128,
        O_DSYNC: 4194304,
        O_SYMLINK: 2097152,
        O_NONBLOCK: 4,
        S_IRWXU: 448,
        S_IRUSR: 256,
        S_IWUSR: 128,
        S_IXUSR: 64,
        S_IRWXG: 56,
        S_IRGRP: 32,
        S_IWGRP: 16,
        S_IXGRP: 8,
        S_IRWXO: 7,
        S_IROTH: 4,
        S_IWOTH: 2,
        S_IXOTH: 1,
        F_OK: 0,
        R_OK: 4,
        W_OK: 2,
        X_OK: 1,
        UV_FS_COPYFILE_EXCL: 1,
        COPYFILE_EXCL: 1 },
     Stats: [Function: Stats],
     F_OK: 0,
     R_OK: 4,
     W_OK: 2,
     X_OK: 1,
     access: [Function],
     accessSync: [Function],
     exists: [Function],
     existsSync: [Function],
     readFile: [Function],
     readFileSync: [Function],
     close: [Function],
     closeSync: [Function],
     open: [Function],
     openSync: [Function],
     read: [Function],
     readSync: [Function],
     write: [Function],
     writeSync: [Function],
     rename: [Function],
     renameSync: [Function],
     truncate: [Function],
     truncateSync: [Function],
     ftruncate: [Function],
     ftruncateSync: [Function],
     rmdir: [Function],
     rmdirSync: [Function],
     fdatasync: [Function],
     fdatasyncSync: [Function],
     fsync: [Function],
     fsyncSync: [Function],
     mkdir: [Function],
     mkdirSync: [Function],
     readdir: [Function],
     readdirSync: [Function],
     fstat: [Function],
     lstat: [Function],
     stat: [Function],
     fstatSync: [Function],
     lstatSync: [Function],
     statSync: [Function],
     readlink: [Function],
     readlinkSync: [Function],
     symlink: [Function],
     symlinkSync: [Function],
     link: [Function],
     linkSync: [Function],
     unlink: [Function],
     unlinkSync: [Function],
     fchmod: [Function],
     fchmodSync: [Function],
     lchmod: [Function],
     lchmodSync: [Function],
     chmod: [Function],
     chmodSync: [Function],
     lchown: [Function],
     lchownSync: [Function],
     fchown: [Function],
     fchownSync: [Function],
     chown: [Function],
     chownSync: [Function],
     _toUnixTimestamp: [Function: toUnixTimestamp],
     utimes: [Function],
     utimesSync: [Function],
     futimes: [Function],
     futimesSync: [Function],
     writeFile: [Function],
     writeFileSync: [Function],
     appendFile: [Function],
     appendFileSync: [Function],
     watch: [Function],
     watchFile: [Function],
     unwatchFile: [Function],
     realpathSync: [Function: realpathSync],
     realpath: [Function: realpath],
     mkdtemp: [Function],
     mkdtempSync: [Function],
     copyFile: [Function],
     copyFileSync: [Function],
     createReadStream: [Function],
     ReadStream: { [Function: ReadStream] super_: [Object] },
     FileReadStream: { [Function: ReadStream] super_: [Object] },
     createWriteStream: [Function],
     WriteStream: { [Function: WriteStream] super_: [Object] },
     FileWriteStream: { [Function: WriteStream] super_: [Object] } },
  Glob: 
   { [Function: glob]
     sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
     GlobSync: [Function: GlobSync],
     glob: [Circular],
     hasMagic: [Function],
     Glob: { [Function: Glob] super_: [Object] } },
  Toposort: [Function: Toposort],
  Beautify: 
   { [Function: beautify]
     js: { [Function: js_beautify] defaultOptions: [Function] },
     css: { [Function: css_beautify] defaultOptions: [Function] },
     html: { [Function: style_html] defaultOptions: [Function] },
     js_beautify: { [Function: js_beautify] defaultOptions: [Function] },
     css_beautify: { [Function: css_beautify] defaultOptions: [Function] },
     html_beautify: { [Function: style_html] defaultOptions: [Function] } },
  Wildcard: [Function],
  Md5: [Function],
  CamelCase: [Function],
  Doctrine: 
   { version: '3.0.0',
     parse: [Function: parse],
     parseType: [Function: parseType],
     parseParamType: [Function: parseParamType],
     unwrapComment: [Function: unwrapComment],
     Syntax: 
      { NullableLiteral: 'NullableLiteral',
        AllLiteral: 'AllLiteral',
        NullLiteral: 'NullLiteral',
        UndefinedLiteral: 'UndefinedLiteral',
        VoidLiteral: 'VoidLiteral',
        UnionType: 'UnionType',
        ArrayType: 'ArrayType',
        RecordType: 'RecordType',
        FieldType: 'FieldType',
        FunctionType: 'FunctionType',
        ParameterType: 'ParameterType',
        RestType: 'RestType',
        NonNullableType: 'NonNullableType',
        OptionalType: 'OptionalType',
        NullableType: 'NullableType',
        NameExpression: 'NameExpression',
        TypeApplication: 'TypeApplication',
        StringLiteralType: 'StringLiteralType',
        NumericLiteralType: 'NumericLiteralType',
        BooleanLiteralType: 'BooleanLiteralType' },
     Error: [Function: DoctrineError],
     type: 
      { Syntax: [Object],
        parseType: [Function: parseType],
        parseParamType: [Function: parseParamType],
        stringify: [Function: stringify] } },
  PropertiesReader: 
   { parse: [Function],
     stringify: [Function],
     createStringifier: [Function: createStringifier] },
  XML2js: 
   { defaults: { '0.1': [Object], '0.2': [Object] },
     processors: 
      { normalize: [Function],
        firstCharLowerCase: [Function],
        stripPrefix: [Function],
        parseNumbers: [Function],
        parseBooleans: [Function] },
     ValidationError: { [Function: ValidationError] stackTraceLimit: Infinity, __super__: Error {} },
     Builder: [Function: Builder],
     Parser: 
      { [Function: Parser]
        EventEmitter: [Object],
        usingDomains: false,
        defaultMaxListeners: 10,
        init: [Function],
        listenerCount: [Function],
        __super__: [Object] },
     parseString: [Function] },
  Init: [Function: Init],
  Qualifier: [Function: Qualifier],
  Bean: [Function: Bean],
  Resource: [Function: Resource],
  After: [Function: After],
  Aspect: [Function: Aspect],
  Before: [Function: Before],
  PointCut: [Function: PointCut],
  Inherits: [Function: Inherits],
  Autowire: [Function: Autowire],
  Inject: [Function: Inject],
  Store: [Function: Store],
  Component: [Function: Component],
  Configuration: [Function: Configuration],
  Context: [Function: Context],
  Controller: [Function: Controller],
  Prototype: [Function: Prototype],
  Service: [Function: Service],
  Param: [Function: param],
  Type: 
   { [Function: type]
     super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
  Namespace: [Function: Namespace],
  Properties: [Function: Properties],
  Run: [Function: Run] }
[2019-01-01T19:38:53.233] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:38:53.233] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:38:53.233] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:53.233] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:38:53.233] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:53.234] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:38:53.234] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:53.234] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:38:53.324] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:38:53.324] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:38:53.324] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:38:53.345] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:38:53.362] [TRACE] Foundation -     Received context: { phase: 
   [ _BUILD_CONTEXT_: '0x2',
     _BUILD_FINISHED_: '0x4',
     _BUILD_PLUGIN_FINISHED_: '0x8',
     _BUILD_STRUCTURE_: '0x1',
     _FINAL_APPLICATION_CONTEXT_: '0xFF',
     _FINAL_PLUGIN_CONTEXT_: '0xFE' ],
  stages: 
   [ _AOP_INITIALIZE: 'aop_initialize',
     _AOP_WIRE: 'aop_wire',
     _FINISH_SETUP_: 'finishing bean setup',
     _INHERIT_: 'inherit',
     _INITIALIZE_: 'initialize',
     _INJECT_: 'inject',
     _INSTANTIATE_: 'instantiate',
     _RUN_: 'run',
     _STASHING_: 'stashing' ],
  LogManager: 
   LogManager {
     configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
     categories: 
      { default: [Object],
        ContextBuilder: [Object],
        StructureParser: [Object],
        DependencyBuilder: [Object],
        PropertiesParser: [Object],
        Foundation: [Object] },
     logger: Logger { category: 'default', context: {} } },
  StaticMemberExpressionIdentifierMatch: [Function: StaticMemberExpressionIdentifierMatch],
  VariableDecorationStaticMemberExpressionIdentifierMatch: [Function: VariableDecorationStaticMemberExpressionIdentifierMatch],
  Diagram: [AsyncFunction: draw],
  TokenParser: 
   [ Block: [Function: Block],
     CallExpression: [Function: CallExpression],
     ClassDeclaration: [Function: ClassDeclaration],
     ExpressionStatement: [Function: ExpressionStatement],
     FunctionDeclaration: [Function: FunctionDeclaration],
     Line: [Function: Line],
     MemberExpression: [Function: MemberExpression],
     MethodDefinition: [Function: MethodDefinition],
     Property: [Function: Property],
     VariableDeclaration: [Function: VariableDeclaration] ],
  PropertiesProcessors: 
   [ { [Function: XMLPropertiesProcessor] Promise: [Object], propertiesReader: [Object] },
     { [Function: JsonPropertiesProcessor] Promise: [Object] },
     { [Function: XMLPropertiesProcessor] Promise: [Object] } ],
  PropertiesAnnotationParserInstance: 
   PropertiesParser {
     processors: { '.properties': [Object], '.json': [Object], '.xml': [Object] },
     glob: 
      { [Function: glob]
        sync: [Object],
        GlobSync: [Function: GlobSync],
        glob: [Circular],
        hasMagic: [Function],
        Glob: [Object] },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: [Object],
        posix: [Circular] },
     fs: 
      { constants: [Object],
        Stats: [Function: Stats],
        F_OK: 0,
        R_OK: 4,
        W_OK: 2,
        X_OK: 1,
        access: [Function],
        accessSync: [Function],
        exists: [Function],
        existsSync: [Function],
        readFile: [Function],
        readFileSync: [Function],
        close: [Function],
        closeSync: [Function],
        open: [Function],
        openSync: [Function],
        read: [Function],
        readSync: [Function],
        write: [Function],
        writeSync: [Function],
        rename: [Function],
        renameSync: [Function],
        truncate: [Function],
        truncateSync: [Function],
        ftruncate: [Function],
        ftruncateSync: [Function],
        rmdir: [Function],
        rmdirSync: [Function],
        fdatasync: [Function],
        fdatasyncSync: [Function],
        fsync: [Function],
        fsyncSync: [Function],
        mkdir: [Function],
        mkdirSync: [Function],
        readdir: [Function],
        readdirSync: [Function],
        fstat: [Function],
        lstat: [Function],
        stat: [Function],
        fstatSync: [Function],
        lstatSync: [Function],
        statSync: [Function],
        readlink: [Function],
        readlinkSync: [Function],
        symlink: [Function],
        symlinkSync: [Function],
        link: [Function],
        linkSync: [Function],
        unlink: [Function],
        unlinkSync: [Function],
        fchmod: [Function],
        fchmodSync: [Function],
        lchmod: [Function],
        lchmodSync: [Function],
        chmod: [Function],
        chmodSync: [Function],
        lchown: [Function],
        lchownSync: [Function],
        fchown: [Function],
        fchownSync: [Function],
        chown: [Function],
        chownSync: [Function],
        _toUnixTimestamp: [Function: toUnixTimestamp],
        utimes: [Function],
        utimesSync: [Function],
        futimes: [Function],
        futimesSync: [Function],
        writeFile: [Function],
        writeFileSync: [Function],
        appendFile: [Function],
        appendFileSync: [Function],
        watch: [Function],
        watchFile: [Function],
        unwatchFile: [Function],
        realpathSync: [Function: realpathSync],
        realpath: [Function: realpath],
        mkdtemp: [Function],
        mkdtempSync: [Function],
        copyFile: [Function],
        copyFileSync: [Function],
        createReadStream: [Function],
        ReadStream: [Object],
        FileReadStream: [Object],
        createWriteStream: [Function],
        WriteStream: [Object],
        FileWriteStream: [Object] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.3',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        noConflict: [Function: noConflict] },
     camelcase: [Function],
     annotation: undefined,
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'PropertiesParser', context: {} } },
  AnnotationParser: 
   [ AfterAnnotationParser: AfterAnnotationParser { annotation: [Function: After], logManager: [Object] },
     AspectAnnotationParser: AspectParser { annotation: [Function: Aspect], logManager: [Object] },
     AutowireAnnotationParser: { [Function: AutowrieAnnotationParser]
       QualifierAnnotation: [Function: Qualifier],
       annotation: [Function: Autowire],
       camelcase: [Function],
       logManager: [Object] },
     BeanAnnotationParser: BeanParser { annotation: [Function: Bean], logManager: [Object] },
     BeforeAnnotationParser: BeforeAnnotationParser { annotation: [Function: Before], logManager: [Object] },
     ComponentAnnotationParser: ComponentParser { annotation: [Function: Component], logManager: [Object] },
     ConfigurationAnnotationParser: ConfigurationParser { annotation: [Function: Configuration], logManager: [Object] },
     ContextAnnotationParser: ContextParser { annotation: [Function: Context], logManager: [Object] },
     ControllerAnnotationParser: ControllerParser { annotation: [Function: Controller], logManager: [Object] },
     InheritsAnnotationParser: InheritsAnnotationParser {
       globals: [],
       annotation: [Function: Inherits],
       logManager: [Object],
       util: [Object] },
     InitAnnotationParser: InitParser {
       annotation: [Function: Init],
       logManager: [Object],
       util: [Object] },
     NamespaceAnnotationParser: NamespaceParser { annotation: [Function: Namespace], logManager: [Object] },
     ParamAnnotationParser: { [Function: paramParser]
       annotation: [Function: param],
       doctrine: [Object],
       expressionParser: undefined,
       logManager: [Object] },
     PointCuteAnnotationParser: PointCutParser {
       wildcard: [Function],
       md5: [Function],
       annotation: [Function: PointCut],
       logManager: [Object] },
     PropertiesAnnotationParser: PropertiesParser {
       processors: [Object],
       glob: [Object],
       path: [Object],
       fs: [Object],
       Promise: [Object],
       camelcase: [Function],
       annotation: undefined,
       logManager: [Object],
       logger: [Object] },
     PrototypeAnnotationParser: Prototype { annotation: [Function: Prototype], logManager: [Object] },
     QualifierAnnotationParser: QualifierParser {
       annotation: [Function: Qualifier],
       logManager: [Object],
       util: [Object] },
     ResourceAnnotationParser: ResourceParser {
       annotation: [Function: Resource],
       logManager: [Object],
       util: [Object] },
     ResourceParser: ResourceParser {
       annotation: [Function: Resource],
       logManager: [Object],
       util: [Object] },
     RunAnnotationParser: RunParser { annotation: [Function: Run], logManager: [Object] },
     ServiceAnnotationParser: ServiceParser { annotation: [Function: Service], logManager: [Object] },
     StoreAnnotationParser: { [Function: StoreParser]
       annotation: [Function: Store],
       logManager: [Object],
       util: [Object] },
     TypeAnnotationParser: type {
       annotation: [Object],
       doctrine: [Object],
       expressionParser: undefined,
       logManager: [Object] } ],
  DependencyBuilder: 
   DependencyBuilder {
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'DependencyBuilder', context: {} },
     glob: 
      { [Function: glob]
        sync: [Object],
        GlobSync: [Function: GlobSync],
        glob: [Circular],
        hasMagic: [Function],
        Glob: [Object] },
     _: 
      { [Function: lodash]
        templateSettings: [Object],
        after: [Function: after],
        ary: [Function: ary],
        assign: [Function],
        assignIn: [Function],
        assignInWith: [Function],
        assignWith: [Function],
        at: [Function],
        before: [Function: before],
        bind: [Object],
        bindAll: [Function],
        bindKey: [Object],
        castArray: [Function: castArray],
        chain: [Function: chain],
        chunk: [Function: chunk],
        compact: [Function: compact],
        concat: [Function: concat],
        cond: [Function: cond],
        conforms: [Function: conforms],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        curry: [Object],
        curryRight: [Object],
        debounce: [Function: debounce],
        defaults: [Function],
        defaultsDeep: [Function],
        defer: [Function],
        delay: [Function],
        difference: [Function],
        differenceBy: [Function],
        differenceWith: [Function],
        drop: [Function: drop],
        dropRight: [Function: dropRight],
        dropRightWhile: [Function: dropRightWhile],
        dropWhile: [Function: dropWhile],
        fill: [Function: fill],
        filter: [Function: filter],
        flatMap: [Function: flatMap],
        flatMapDeep: [Function: flatMapDeep],
        flatMapDepth: [Function: flatMapDepth],
        flatten: [Function: flatten],
        flattenDeep: [Function: flattenDeep],
        flattenDepth: [Function: flattenDepth],
        flip: [Function: flip],
        flow: [Function],
        flowRight: [Function],
        fromPairs: [Function: fromPairs],
        functions: [Function: functions],
        functionsIn: [Function: functionsIn],
        groupBy: [Function],
        initial: [Function: initial],
        intersection: [Function],
        intersectionBy: [Function],
        intersectionWith: [Function],
        invert: [Function],
        invertBy: [Function],
        invokeMap: [Function],
        iteratee: [Function: iteratee],
        keyBy: [Function],
        keys: [Function: keys],
        keysIn: [Function: keysIn],
        map: [Function: map],
        mapKeys: [Function: mapKeys],
        mapValues: [Function: mapValues],
        matches: [Function: matches],
        matchesProperty: [Function: matchesProperty],
        memoize: [Object],
        merge: [Function],
        mergeWith: [Function],
        method: [Function],
        methodOf: [Function],
        mixin: [Function: mixin],
        negate: [Function: negate],
        nthArg: [Function: nthArg],
        omit: [Function],
        omitBy: [Function: omitBy],
        once: [Function: once],
        orderBy: [Function: orderBy],
        over: [Function],
        overArgs: [Function],
        overEvery: [Function],
        overSome: [Function],
        partial: [Object],
        partialRight: [Object],
        partition: [Function],
        pick: [Function],
        pickBy: [Function: pickBy],
        property: [Function: property],
        propertyOf: [Function: propertyOf],
        pull: [Function],
        pullAll: [Function: pullAll],
        pullAllBy: [Function: pullAllBy],
        pullAllWith: [Function: pullAllWith],
        pullAt: [Function],
        range: [Function],
        rangeRight: [Function],
        rearg: [Function],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        reverse: [Function: reverse],
        sampleSize: [Function: sampleSize],
        set: [Function: set],
        setWith: [Function: setWith],
        shuffle: [Function: shuffle],
        slice: [Function: slice],
        sortBy: [Function],
        sortedUniq: [Function: sortedUniq],
        sortedUniqBy: [Function: sortedUniqBy],
        split: [Function: split],
        spread: [Function: spread],
        tail: [Function: tail],
        take: [Function: take],
        takeRight: [Function: takeRight],
        takeRightWhile: [Function: takeRightWhile],
        takeWhile: [Function: takeWhile],
        tap: [Function: tap],
        throttle: [Function: throttle],
        thru: [Function: thru],
        toArray: [Function: toArray],
        toPairs: [Function],
        toPairsIn: [Function],
        toPath: [Function: toPath],
        toPlainObject: [Function: toPlainObject],
        transform: [Function: transform],
        unary: [Function: unary],
        union: [Function],
        unionBy: [Function],
        unionWith: [Function],
        uniq: [Function: uniq],
        uniqBy: [Function: uniqBy],
        uniqWith: [Function: uniqWith],
        unset: [Function: unset],
        unzip: [Function: unzip],
        unzipWith: [Function: unzipWith],
        update: [Function: update],
        updateWith: [Function: updateWith],
        values: [Function: values],
        valuesIn: [Function: valuesIn],
        without: [Function],
        words: [Function: words],
        wrap: [Function: wrap],
        xor: [Function],
        xorBy: [Function],
        xorWith: [Function],
        zip: [Function],
        zipObject: [Function: zipObject],
        zipObjectDeep: [Function: zipObjectDeep],
        zipWith: [Function],
        entries: [Function],
        entriesIn: [Function],
        extend: [Function],
        extendWith: [Function],
        add: [Function],
        attempt: [Function],
        camelCase: [Function],
        capitalize: [Function: capitalize],
        ceil: [Function],
        clamp: [Function: clamp],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        cloneDeepWith: [Function: cloneDeepWith],
        cloneWith: [Function: cloneWith],
        conformsTo: [Function: conformsTo],
        deburr: [Function: deburr],
        defaultTo: [Function: defaultTo],
        divide: [Function],
        endsWith: [Function: endsWith],
        eq: [Function: eq],
        escape: [Function: escape],
        escapeRegExp: [Function: escapeRegExp],
        every: [Function: every],
        find: [Function],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        floor: [Function],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function: forIn],
        forInRight: [Function: forInRight],
        forOwn: [Function: forOwn],
        forOwnRight: [Function: forOwnRight],
        get: [Function: get],
        gt: [Function],
        gte: [Function],
        has: [Function: has],
        hasIn: [Function: hasIn],
        head: [Function: head],
        identity: [Function: identity],
        includes: [Function: includes],
        indexOf: [Function: indexOf],
        inRange: [Function: inRange],
        invoke: [Function],
        isArguments: [Function: baseIsArguments],
        isArray: [Function: isArray],
        isArrayBuffer: [Function],
        isArrayLike: [Function: isArrayLike],
        isArrayLikeObject: [Function: isArrayLikeObject],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isDate: [Function],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isEqualWith: [Function: isEqualWith],
        isError: [Function: isError],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isInteger: [Function: isInteger],
        isLength: [Function: isLength],
        isMap: [Function],
        isMatch: [Function: isMatch],
        isMatchWith: [Function: isMatchWith],
        isNaN: [Function: isNaN],
        isNative: [Function: isNative],
        isNil: [Function: isNil],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isObjectLike: [Function: isObjectLike],
        isPlainObject: [Function: isPlainObject],
        isRegExp: [Function],
        isSafeInteger: [Function: isSafeInteger],
        isSet: [Function],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isTypedArray: [Function],
        isUndefined: [Function: isUndefined],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        join: [Function: join],
        kebabCase: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lowerCase: [Function],
        lowerFirst: [Function],
        lt: [Function],
        lte: [Function],
        max: [Function: max],
        maxBy: [Function: maxBy],
        mean: [Function: mean],
        meanBy: [Function: meanBy],
        min: [Function: min],
        minBy: [Function: minBy],
        stubArray: [Function: stubArray],
        stubFalse: [Function: stubFalse],
        stubObject: [Function: stubObject],
        stubString: [Function: stubString],
        stubTrue: [Function: stubTrue],
        multiply: [Function],
        nth: [Function: nth],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function],
        pad: [Function: pad],
        padEnd: [Function: padEnd],
        padStart: [Function: padStart],
        parseInt: [Function: parseInt],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        repeat: [Function: repeat],
        replace: [Function: replace],
        result: [Function: result],
        round: [Function],
        runInContext: [Function: runInContext],
        sample: [Function: sample],
        size: [Function: size],
        snakeCase: [Function],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        sortedIndexBy: [Function: sortedIndexBy],
        sortedIndexOf: [Function: sortedIndexOf],
        sortedLastIndex: [Function: sortedLastIndex],
        sortedLastIndexBy: [Function: sortedLastIndexBy],
        sortedLastIndexOf: [Function: sortedLastIndexOf],
        startCase: [Function],
        startsWith: [Function: startsWith],
        subtract: [Function],
        sum: [Function: sum],
        sumBy: [Function: sumBy],
        template: [Function: template],
        times: [Function: times],
        toFinite: [Function: toFinite],
        toInteger: [Function: toInteger],
        toLength: [Function: toLength],
        toLower: [Function: toLower],
        toNumber: [Function: toNumber],
        toSafeInteger: [Function: toSafeInteger],
        toString: [Function: toString],
        toUpper: [Function: toUpper],
        trim: [Function: trim],
        trimEnd: [Function: trimEnd],
        trimStart: [Function: trimStart],
        truncate: [Function: truncate],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        upperCase: [Function],
        upperFirst: [Function],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        first: [Function: head],
        VERSION: '4.17.11',
        _: [Circular] },
     toposort: [Function: Toposort],
     util: 
      { _errnoException: [Function: _errnoException],
        _exceptionWithHostPort: [Function: _exceptionWithHostPort],
        _extend: [Function: _extend],
        callbackify: [Function: callbackify],
        debuglog: [Function: debuglog],
        deprecate: [Function: deprecate],
        format: [Function: format],
        inherits: [Function: inherits],
        inspect: [Object],
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isNull: [Function: isNull],
        isNullOrUndefined: [Function: isNullOrUndefined],
        isNumber: [Function: isNumber],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isUndefined: [Function: isUndefined],
        isRegExp: [Function: isRegExp],
        isObject: [Function: isObject],
        isDate: [Function: isDate],
        isError: [Function: isError],
        isFunction: [Function: isFunction],
        isPrimitive: [Function: isPrimitive],
        log: [Function: log],
        promisify: [Object],
        TextDecoder: [Function: TextDecoder],
        TextEncoder: [Function: TextEncoder],
        debug: [Function: deprecated],
        error: [Function: deprecated],
        print: [Function: deprecated],
        puts: [Function: deprecated] },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: [Object],
        posix: [Circular] } },
  StructureParser: 
   StructureParser {
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'StructureParser', context: {} },
     annotationParser: 
      [ AfterAnnotationParser: [Object],
        AspectAnnotationParser: [Object],
        AutowireAnnotationParser: [Object],
        BeanAnnotationParser: [Object],
        BeforeAnnotationParser: [Object],
        ComponentAnnotationParser: [Object],
        ConfigurationAnnotationParser: [Object],
        ContextAnnotationParser: [Object],
        ControllerAnnotationParser: [Object],
        InheritsAnnotationParser: [Object],
        InitAnnotationParser: [Object],
        NamespaceAnnotationParser: [Object],
        ParamAnnotationParser: [Object],
        PointCuteAnnotationParser: [Object],
        PropertiesAnnotationParser: [Object],
        PrototypeAnnotationParser: [Object],
        QualifierAnnotationParser: [Object],
        ResourceAnnotationParser: [Object],
        ResourceParser: [Object],
        RunAnnotationParser: [Object],
        ServiceAnnotationParser: [Object],
        StoreAnnotationParser: [Object],
        TypeAnnotationParser: [Object] ],
     expressionParser: 
      [ Block: [Function: Block],
        CallExpression: [Function: CallExpression],
        ClassDeclaration: [Function: ClassDeclaration],
        ExpressionStatement: [Function: ExpressionStatement],
        FunctionDeclaration: [Function: FunctionDeclaration],
        Line: [Function: Line],
        MemberExpression: [Function: MemberExpression],
        MethodDefinition: [Function: MethodDefinition],
        Property: [Function: Property],
        VariableDeclaration: [Function: VariableDeclaration] ],
     removeTokens: 
      [ 'BlockStatement>',
        'AssignmentExpression',
        'Identifier',
        'Literal',
        'ClassBody',
        'ClassExpression' ],
     lightTokenInformation: 'true',
     removeLocationInformation: 'true',
     beautify: { [Function: js_beautify] defaultOptions: [Function] },
     _: 
      { [Function: lodash]
        templateSettings: [Object],
        after: [Function: after],
        ary: [Function: ary],
        assign: [Function],
        assignIn: [Function],
        assignInWith: [Function],
        assignWith: [Function],
        at: [Function],
        before: [Function: before],
        bind: [Object],
        bindAll: [Function],
        bindKey: [Object],
        castArray: [Function: castArray],
        chain: [Function: chain],
        chunk: [Function: chunk],
        compact: [Function: compact],
        concat: [Function: concat],
        cond: [Function: cond],
        conforms: [Function: conforms],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        curry: [Object],
        curryRight: [Object],
        debounce: [Function: debounce],
        defaults: [Function],
        defaultsDeep: [Function],
        defer: [Function],
        delay: [Function],
        difference: [Function],
        differenceBy: [Function],
        differenceWith: [Function],
        drop: [Function: drop],
        dropRight: [Function: dropRight],
        dropRightWhile: [Function: dropRightWhile],
        dropWhile: [Function: dropWhile],
        fill: [Function: fill],
        filter: [Function: filter],
        flatMap: [Function: flatMap],
        flatMapDeep: [Function: flatMapDeep],
        flatMapDepth: [Function: flatMapDepth],
        flatten: [Function: flatten],
        flattenDeep: [Function: flattenDeep],
        flattenDepth: [Function: flattenDepth],
        flip: [Function: flip],
        flow: [Function],
        flowRight: [Function],
        fromPairs: [Function: fromPairs],
        functions: [Function: functions],
        functionsIn: [Function: functionsIn],
        groupBy: [Function],
        initial: [Function: initial],
        intersection: [Function],
        intersectionBy: [Function],
        intersectionWith: [Function],
        invert: [Function],
        invertBy: [Function],
        invokeMap: [Function],
        iteratee: [Function: iteratee],
        keyBy: [Function],
        keys: [Function: keys],
        keysIn: [Function: keysIn],
        map: [Function: map],
        mapKeys: [Function: mapKeys],
        mapValues: [Function: mapValues],
        matches: [Function: matches],
        matchesProperty: [Function: matchesProperty],
        memoize: [Object],
        merge: [Function],
        mergeWith: [Function],
        method: [Function],
        methodOf: [Function],
        mixin: [Function: mixin],
        negate: [Function: negate],
        nthArg: [Function: nthArg],
        omit: [Function],
        omitBy: [Function: omitBy],
        once: [Function: once],
        orderBy: [Function: orderBy],
        over: [Function],
        overArgs: [Function],
        overEvery: [Function],
        overSome: [Function],
        partial: [Object],
        partialRight: [Object],
        partition: [Function],
        pick: [Function],
        pickBy: [Function: pickBy],
        property: [Function: property],
        propertyOf: [Function: propertyOf],
        pull: [Function],
        pullAll: [Function: pullAll],
        pullAllBy: [Function: pullAllBy],
        pullAllWith: [Function: pullAllWith],
        pullAt: [Function],
        range: [Function],
        rangeRight: [Function],
        rearg: [Function],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        reverse: [Function: reverse],
        sampleSize: [Function: sampleSize],
        set: [Function: set],
        setWith: [Function: setWith],
        shuffle: [Function: shuffle],
        slice: [Function: slice],
        sortBy: [Function],
        sortedUniq: [Function: sortedUniq],
        sortedUniqBy: [Function: sortedUniqBy],
        split: [Function: split],
        spread: [Function: spread],
        tail: [Function: tail],
        take: [Function: take],
        takeRight: [Function: takeRight],
        takeRightWhile: [Function: takeRightWhile],
        takeWhile: [Function: takeWhile],
        tap: [Function: tap],
        throttle: [Function: throttle],
        thru: [Function: thru],
        toArray: [Function: toArray],
        toPairs: [Function],
        toPairsIn: [Function],
        toPath: [Function: toPath],
        toPlainObject: [Function: toPlainObject],
        transform: [Function: transform],
        unary: [Function: unary],
        union: [Function],
        unionBy: [Function],
        unionWith: [Function],
        uniq: [Function: uniq],
        uniqBy: [Function: uniqBy],
        uniqWith: [Function: uniqWith],
        unset: [Function: unset],
        unzip: [Function: unzip],
        unzipWith: [Function: unzipWith],
        update: [Function: update],
        updateWith: [Function: updateWith],
        values: [Function: values],
        valuesIn: [Function: valuesIn],
        without: [Function],
        words: [Function: words],
        wrap: [Function: wrap],
        xor: [Function],
        xorBy: [Function],
        xorWith: [Function],
        zip: [Function],
        zipObject: [Function: zipObject],
        zipObjectDeep: [Function: zipObjectDeep],
        zipWith: [Function],
        entries: [Function],
        entriesIn: [Function],
        extend: [Function],
        extendWith: [Function],
        add: [Function],
        attempt: [Function],
        camelCase: [Function],
        capitalize: [Function: capitalize],
        ceil: [Function],
        clamp: [Function: clamp],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        cloneDeepWith: [Function: cloneDeepWith],
        cloneWith: [Function: cloneWith],
        conformsTo: [Function: conformsTo],
        deburr: [Function: deburr],
        defaultTo: [Function: defaultTo],
        divide: [Function],
        endsWith: [Function: endsWith],
        eq: [Function: eq],
        escape: [Function: escape],
        escapeRegExp: [Function: escapeRegExp],
        every: [Function: every],
        find: [Function],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function],
        findLastIndex: [Function: findLastIndex],
        findLastKey: [Function: findLastKey],
        floor: [Function],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function: forIn],
        forInRight: [Function: forInRight],
        forOwn: [Function: forOwn],
        forOwnRight: [Function: forOwnRight],
        get: [Function: get],
        gt: [Function],
        gte: [Function],
        has: [Function: has],
        hasIn: [Function: hasIn],
        head: [Function: head],
        identity: [Function: identity],
        includes: [Function: includes],
        indexOf: [Function: indexOf],
        inRange: [Function: inRange],
        invoke: [Function],
        isArguments: [Function: baseIsArguments],
        isArray: [Function: isArray],
        isArrayBuffer: [Function],
        isArrayLike: [Function: isArrayLike],
        isArrayLikeObject: [Function: isArrayLikeObject],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isDate: [Function],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isEqualWith: [Function: isEqualWith],
        isError: [Function: isError],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isInteger: [Function: isInteger],
        isLength: [Function: isLength],
        isMap: [Function],
        isMatch: [Function: isMatch],
        isMatchWith: [Function: isMatchWith],
        isNaN: [Function: isNaN],
        isNative: [Function: isNative],
        isNil: [Function: isNil],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isObjectLike: [Function: isObjectLike],
        isPlainObject: [Function: isPlainObject],
        isRegExp: [Function],
        isSafeInteger: [Function: isSafeInteger],
        isSet: [Function],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isTypedArray: [Function],
        isUndefined: [Function: isUndefined],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        join: [Function: join],
        kebabCase: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lowerCase: [Function],
        lowerFirst: [Function],
        lt: [Function],
        lte: [Function],
        max: [Function: max],
        maxBy: [Function: maxBy],
        mean: [Function: mean],
        meanBy: [Function: meanBy],
        min: [Function: min],
        minBy: [Function: minBy],
        stubArray: [Function: stubArray],
        stubFalse: [Function: stubFalse],
        stubObject: [Function: stubObject],
        stubString: [Function: stubString],
        stubTrue: [Function: stubTrue],
        multiply: [Function],
        nth: [Function: nth],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function],
        pad: [Function: pad],
        padEnd: [Function: padEnd],
        padStart: [Function: padStart],
        parseInt: [Function: parseInt],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        repeat: [Function: repeat],
        replace: [Function: replace],
        result: [Function: result],
        round: [Function],
        runInContext: [Function: runInContext],
        sample: [Function: sample],
        size: [Function: size],
        snakeCase: [Function],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        sortedIndexBy: [Function: sortedIndexBy],
        sortedIndexOf: [Function: sortedIndexOf],
        sortedLastIndex: [Function: sortedLastIndex],
        sortedLastIndexBy: [Function: sortedLastIndexBy],
        sortedLastIndexOf: [Function: sortedLastIndexOf],
        startCase: [Function],
        startsWith: [Function: startsWith],
        subtract: [Function],
        sum: [Function: sum],
        sumBy: [Function: sumBy],
        template: [Function: template],
        times: [Function: times],
        toFinite: [Function: toFinite],
        toInteger: [Function: toInteger],
        toLength: [Function: toLength],
        toLower: [Function: toLower],
        toNumber: [Function: toNumber],
        toSafeInteger: [Function: toSafeInteger],
        toString: [Function: toString],
        toUpper: [Function: toUpper],
        trim: [Function: trim],
        trimEnd: [Function: trimEnd],
        trimStart: [Function: trimStart],
        truncate: [Function: truncate],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        upperCase: [Function],
        upperFirst: [Function],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        first: [Function: head],
        VERSION: '4.17.11',
        _: [Circular] },
     util: 
      { _errnoException: [Function: _errnoException],
        _exceptionWithHostPort: [Function: _exceptionWithHostPort],
        _extend: [Function: _extend],
        callbackify: [Function: callbackify],
        debuglog: [Function: debuglog],
        deprecate: [Function: deprecate],
        format: [Function: format],
        inherits: [Function: inherits],
        inspect: [Object],
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isNull: [Function: isNull],
        isNullOrUndefined: [Function: isNullOrUndefined],
        isNumber: [Function: isNumber],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isUndefined: [Function: isUndefined],
        isRegExp: [Function: isRegExp],
        isObject: [Function: isObject],
        isDate: [Function: isDate],
        isError: [Function: isError],
        isFunction: [Function: isFunction],
        isPrimitive: [Function: isPrimitive],
        log: [Function: log],
        promisify: [Object],
        TextDecoder: [Function: TextDecoder],
        TextEncoder: [Function: TextEncoder],
        debug: [Function: deprecated],
        error: [Function: deprecated],
        print: [Function: deprecated],
        puts: [Function: deprecated] },
     esprima: 
      { parse: [Function: parse],
        tokenize: [Function: tokenize],
        Syntax: [Object],
        version: '3.1.3' },
     estraverse: 
      { version: '4.2.0',
        Syntax: [Object],
        traverse: [Function: traverse],
        replace: [Function: replace],
        attachComments: [Function: attachComments],
        VisitorKeys: [Object],
        VisitorOption: [Object],
        Controller: [Function: Controller],
        cloneEnvironment: [Function] } },
  ContextBuilder: 
   ContextBuilder {
     domain: null,
     _events: 
      { aop_initialize: [Array],
        aop_wire: [Array],
        'finishing bean setup': [Array],
        inherit: [Array],
        initialize: [Array],
        inject: [Array],
        instantiate: [Array],
        run: [Array],
        stashing: [Array],
        '0x2': [Array] },
     _eventsCount: 10,
     _maxListeners: undefined,
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'ContextBuilder', context: {} },
     annotationParser: 
      [ AfterAnnotationParser: [Object],
        AspectAnnotationParser: [Object],
        AutowireAnnotationParser: [Object],
        BeanAnnotationParser: [Object],
        BeforeAnnotationParser: [Object],
        ComponentAnnotationParser: [Object],
        ConfigurationAnnotationParser: [Object],
        ContextAnnotationParser: [Object],
        ControllerAnnotationParser: [Object],
        InheritsAnnotationParser: [Object],
        InitAnnotationParser: [Object],
        NamespaceAnnotationParser: [Object],
        ParamAnnotationParser: [Object],
        PointCuteAnnotationParser: [Object],
        PropertiesAnnotationParser: [Object],
        PrototypeAnnotationParser: [Object],
        QualifierAnnotationParser: [Object],
        ResourceAnnotationParser: [Object],
        ResourceParser: [Object],
        RunAnnotationParser: [Object],
        ServiceAnnotationParser: [Object],
        StoreAnnotationParser: [Object],
        TypeAnnotationParser: [Object] ],
     stages: 
      [ _AOP_INITIALIZE: 'aop_initialize',
        _AOP_WIRE: 'aop_wire',
        _FINISH_SETUP_: 'finishing bean setup',
        _INHERIT_: 'inherit',
        _INITIALIZE_: 'initialize',
        _INJECT_: 'inject',
        _INSTANTIATE_: 'instantiate',
        _RUN_: 'run',
        _STASHING_: 'stashing' ],
     promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.3',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        noConflict: [Function: noConflict] } },
  Factory: 
   Factory {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     modulePath: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/factory',
     logManager: 
      LogManager {
        configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
        categories: [Object],
        logger: [Object] },
     logger: Logger { category: 'default', context: {} },
     stacks: [],
     dependencyBuilder: 
      DependencyBuilder {
        logManager: [Object],
        logger: [Object],
        glob: [Object],
        _: [Object],
        toposort: [Function: Toposort],
        util: [Object],
        path: [Object] },
     esprima: 
      { parse: [Function: parse],
        tokenize: [Function: tokenize],
        Syntax: [Object],
        version: '3.1.3' },
     path: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '/',
        delimiter: ':',
        win32: [Object],
        posix: [Circular] },
     estraverse: 
      { version: '4.2.0',
        Syntax: [Object],
        traverse: [Function: traverse],
        replace: [Function: replace],
        attachComments: [Function: attachComments],
        VisitorKeys: [Object],
        VisitorOption: [Object],
        Controller: [Function: Controller],
        cloneEnvironment: [Function] },
     stages: 
      [ _AOP_INITIALIZE: 'aop_initialize',
        _AOP_WIRE: 'aop_wire',
        _FINISH_SETUP_: 'finishing bean setup',
        _INHERIT_: 'inherit',
        _INITIALIZE_: 'initialize',
        _INJECT_: 'inject',
        _INSTANTIATE_: 'instantiate',
        _RUN_: 'run',
        _STASHING_: 'stashing' ] },
  BaseAnnotationParser: [Function: BaseAnnotationParser],
  BeanAnnotationParserPrototype: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] },
  Esprima: 
   { parse: [Function: parse],
     tokenize: [Function: tokenize],
     Syntax: 
      { AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression' },
     version: '3.1.3' },
  Util: 
   { _errnoException: [Function: _errnoException],
     _exceptionWithHostPort: [Function: _exceptionWithHostPort],
     _extend: [Function: _extend],
     callbackify: [Function: callbackify],
     debuglog: [Function: debuglog],
     deprecate: [Function: deprecate],
     format: [Function: format],
     inherits: [Function: inherits],
     inspect: 
      { [Function: inspect]
        custom: Symbol(util.inspect.custom),
        colors: [Object],
        styles: [Object] },
     isArray: [Function: isArray],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isNull: [Function: isNull],
     isNullOrUndefined: [Function: isNullOrUndefined],
     isNumber: [Function: isNumber],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isUndefined: [Function: isUndefined],
     isRegExp: [Function: isRegExp],
     isObject: [Function: isObject],
     isDate: [Function: isDate],
     isError: [Function: isError],
     isFunction: [Function: isFunction],
     isPrimitive: [Function: isPrimitive],
     log: [Function: log],
     promisify: { [Function: promisify] custom: Symbol(util.promisify.custom) },
     TextDecoder: [Function: TextDecoder],
     TextEncoder: [Function: TextEncoder],
     debug: [Function: deprecated],
     error: [Function: deprecated],
     print: [Function: deprecated],
     puts: [Function: deprecated] },
  Path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: 
      { resolve: [Function: resolve],
        normalize: [Function: normalize],
        isAbsolute: [Function: isAbsolute],
        join: [Function: join],
        relative: [Function: relative],
        _makeLong: [Function: _makeLong],
        dirname: [Function: dirname],
        basename: [Function: basename],
        extname: [Function: extname],
        format: [Function: format],
        parse: [Function: parse],
        sep: '\\',
        delimiter: ';',
        win32: [Circular],
        posix: [Circular] },
     posix: [Circular] },
  Lodash: 
   { [Function: lodash]
     templateSettings: 
      { escape: /<%-([\s\S]+?)%>/g,
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        variable: '',
        imports: [Object] },
     after: [Function: after],
     ary: [Function: ary],
     assign: [Function],
     assignIn: [Function],
     assignInWith: [Function],
     assignWith: [Function],
     at: [Function],
     before: [Function: before],
     bind: { [Function] placeholder: [Circular] },
     bindAll: [Function],
     bindKey: { [Function] placeholder: [Circular] },
     castArray: [Function: castArray],
     chain: [Function: chain],
     chunk: [Function: chunk],
     compact: [Function: compact],
     concat: [Function: concat],
     cond: [Function: cond],
     conforms: [Function: conforms],
     constant: [Function: constant],
     countBy: [Function],
     create: [Function: create],
     curry: { [Function: curry] placeholder: [Circular] },
     curryRight: { [Function: curryRight] placeholder: [Circular] },
     debounce: [Function: debounce],
     defaults: [Function],
     defaultsDeep: [Function],
     defer: [Function],
     delay: [Function],
     difference: [Function],
     differenceBy: [Function],
     differenceWith: [Function],
     drop: [Function: drop],
     dropRight: [Function: dropRight],
     dropRightWhile: [Function: dropRightWhile],
     dropWhile: [Function: dropWhile],
     fill: [Function: fill],
     filter: [Function: filter],
     flatMap: [Function: flatMap],
     flatMapDeep: [Function: flatMapDeep],
     flatMapDepth: [Function: flatMapDepth],
     flatten: [Function: flatten],
     flattenDeep: [Function: flattenDeep],
     flattenDepth: [Function: flattenDepth],
     flip: [Function: flip],
     flow: [Function],
     flowRight: [Function],
     fromPairs: [Function: fromPairs],
     functions: [Function: functions],
     functionsIn: [Function: functionsIn],
     groupBy: [Function],
     initial: [Function: initial],
     intersection: [Function],
     intersectionBy: [Function],
     intersectionWith: [Function],
     invert: [Function],
     invertBy: [Function],
     invokeMap: [Function],
     iteratee: [Function: iteratee],
     keyBy: [Function],
     keys: [Function: keys],
     keysIn: [Function: keysIn],
     map: [Function: map],
     mapKeys: [Function: mapKeys],
     mapValues: [Function: mapValues],
     matches: [Function: matches],
     matchesProperty: [Function: matchesProperty],
     memoize: { [Function: memoize] Cache: [Function: MapCache] },
     merge: [Function],
     mergeWith: [Function],
     method: [Function],
     methodOf: [Function],
     mixin: [Function: mixin],
     negate: [Function: negate],
     nthArg: [Function: nthArg],
     omit: [Function],
     omitBy: [Function: omitBy],
     once: [Function: once],
     orderBy: [Function: orderBy],
     over: [Function],
     overArgs: [Function],
     overEvery: [Function],
     overSome: [Function],
     partial: { [Function] placeholder: [Circular] },
     partialRight: { [Function] placeholder: [Circular] },
     partition: [Function],
     pick: [Function],
     pickBy: [Function: pickBy],
     property: [Function: property],
     propertyOf: [Function: propertyOf],
     pull: [Function],
     pullAll: [Function: pullAll],
     pullAllBy: [Function: pullAllBy],
     pullAllWith: [Function: pullAllWith],
     pullAt: [Function],
     range: [Function],
     rangeRight: [Function],
     rearg: [Function],
     reject: [Function: reject],
     remove: [Function: remove],
     rest: [Function: rest],
     reverse: [Function: reverse],
     sampleSize: [Function: sampleSize],
     set: [Function: set],
     setWith: [Function: setWith],
     shuffle: [Function: shuffle],
     slice: [Function: slice],
     sortBy: [Function],
     sortedUniq: [Function: sortedUniq],
     sortedUniqBy: [Function: sortedUniqBy],
     split: [Function: split],
     spread: [Function: spread],
     tail: [Function: tail],
     take: [Function: take],
     takeRight: [Function: takeRight],
     takeRightWhile: [Function: takeRightWhile],
     takeWhile: [Function: takeWhile],
     tap: [Function: tap],
     throttle: [Function: throttle],
     thru: [Function: thru],
     toArray: [Function: toArray],
     toPairs: [Function],
     toPairsIn: [Function],
     toPath: [Function: toPath],
     toPlainObject: [Function: toPlainObject],
     transform: [Function: transform],
     unary: [Function: unary],
     union: [Function],
     unionBy: [Function],
     unionWith: [Function],
     uniq: [Function: uniq],
     uniqBy: [Function: uniqBy],
     uniqWith: [Function: uniqWith],
     unset: [Function: unset],
     unzip: [Function: unzip],
     unzipWith: [Function: unzipWith],
     update: [Function: update],
     updateWith: [Function: updateWith],
     values: [Function: values],
     valuesIn: [Function: valuesIn],
     without: [Function],
     words: [Function: words],
     wrap: [Function: wrap],
     xor: [Function],
     xorBy: [Function],
     xorWith: [Function],
     zip: [Function],
     zipObject: [Function: zipObject],
     zipObjectDeep: [Function: zipObjectDeep],
     zipWith: [Function],
     entries: [Function],
     entriesIn: [Function],
     extend: [Function],
     extendWith: [Function],
     add: [Function],
     attempt: [Function],
     camelCase: [Function],
     capitalize: [Function: capitalize],
     ceil: [Function],
     clamp: [Function: clamp],
     clone: [Function: clone],
     cloneDeep: [Function: cloneDeep],
     cloneDeepWith: [Function: cloneDeepWith],
     cloneWith: [Function: cloneWith],
     conformsTo: [Function: conformsTo],
     deburr: [Function: deburr],
     defaultTo: [Function: defaultTo],
     divide: [Function],
     endsWith: [Function: endsWith],
     eq: [Function: eq],
     escape: [Function: escape],
     escapeRegExp: [Function: escapeRegExp],
     every: [Function: every],
     find: [Function],
     findIndex: [Function: findIndex],
     findKey: [Function: findKey],
     findLast: [Function],
     findLastIndex: [Function: findLastIndex],
     findLastKey: [Function: findLastKey],
     floor: [Function],
     forEach: [Function: forEach],
     forEachRight: [Function: forEachRight],
     forIn: [Function: forIn],
     forInRight: [Function: forInRight],
     forOwn: [Function: forOwn],
     forOwnRight: [Function: forOwnRight],
     get: [Function: get],
     gt: [Function],
     gte: [Function],
     has: [Function: has],
     hasIn: [Function: hasIn],
     head: [Function: head],
     identity: [Function: identity],
     includes: [Function: includes],
     indexOf: [Function: indexOf],
     inRange: [Function: inRange],
     invoke: [Function],
     isArguments: [Function: baseIsArguments],
     isArray: [Function: isArray],
     isArrayBuffer: [Function],
     isArrayLike: [Function: isArrayLike],
     isArrayLikeObject: [Function: isArrayLikeObject],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isDate: [Function],
     isElement: [Function: isElement],
     isEmpty: [Function: isEmpty],
     isEqual: [Function: isEqual],
     isEqualWith: [Function: isEqualWith],
     isError: [Function: isError],
     isFinite: [Function: isFinite],
     isFunction: [Function: isFunction],
     isInteger: [Function: isInteger],
     isLength: [Function: isLength],
     isMap: [Function],
     isMatch: [Function: isMatch],
     isMatchWith: [Function: isMatchWith],
     isNaN: [Function: isNaN],
     isNative: [Function: isNative],
     isNil: [Function: isNil],
     isNull: [Function: isNull],
     isNumber: [Function: isNumber],
     isObject: [Function: isObject],
     isObjectLike: [Function: isObjectLike],
     isPlainObject: [Function: isPlainObject],
     isRegExp: [Function],
     isSafeInteger: [Function: isSafeInteger],
     isSet: [Function],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isTypedArray: [Function],
     isUndefined: [Function: isUndefined],
     isWeakMap: [Function: isWeakMap],
     isWeakSet: [Function: isWeakSet],
     join: [Function: join],
     kebabCase: [Function],
     last: [Function: last],
     lastIndexOf: [Function: lastIndexOf],
     lowerCase: [Function],
     lowerFirst: [Function],
     lt: [Function],
     lte: [Function],
     max: [Function: max],
     maxBy: [Function: maxBy],
     mean: [Function: mean],
     meanBy: [Function: meanBy],
     min: [Function: min],
     minBy: [Function: minBy],
     stubArray: [Function: stubArray],
     stubFalse: [Function: stubFalse],
     stubObject: [Function: stubObject],
     stubString: [Function: stubString],
     stubTrue: [Function: stubTrue],
     multiply: [Function],
     nth: [Function: nth],
     noConflict: [Function: noConflict],
     noop: [Function: noop],
     now: [Function],
     pad: [Function: pad],
     padEnd: [Function: padEnd],
     padStart: [Function: padStart],
     parseInt: [Function: parseInt],
     random: [Function: random],
     reduce: [Function: reduce],
     reduceRight: [Function: reduceRight],
     repeat: [Function: repeat],
     replace: [Function: replace],
     result: [Function: result],
     round: [Function],
     runInContext: [Function: runInContext],
     sample: [Function: sample],
     size: [Function: size],
     snakeCase: [Function],
     some: [Function: some],
     sortedIndex: [Function: sortedIndex],
     sortedIndexBy: [Function: sortedIndexBy],
     sortedIndexOf: [Function: sortedIndexOf],
     sortedLastIndex: [Function: sortedLastIndex],
     sortedLastIndexBy: [Function: sortedLastIndexBy],
     sortedLastIndexOf: [Function: sortedLastIndexOf],
     startCase: [Function],
     startsWith: [Function: startsWith],
     subtract: [Function],
     sum: [Function: sum],
     sumBy: [Function: sumBy],
     template: [Function: template],
     times: [Function: times],
     toFinite: [Function: toFinite],
     toInteger: [Function: toInteger],
     toLength: [Function: toLength],
     toLower: [Function: toLower],
     toNumber: [Function: toNumber],
     toSafeInteger: [Function: toSafeInteger],
     toString: [Function: toString],
     toUpper: [Function: toUpper],
     trim: [Function: trim],
     trimEnd: [Function: trimEnd],
     trimStart: [Function: trimStart],
     truncate: [Function: truncate],
     unescape: [Function: unescape],
     uniqueId: [Function: uniqueId],
     upperCase: [Function],
     upperFirst: [Function],
     each: [Function: forEach],
     eachRight: [Function: forEachRight],
     first: [Function: head],
     VERSION: '4.17.11',
     _: [Circular] },
  Estraverse: 
   { version: '4.2.0',
     Syntax: 
      { AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',
        ComprehensionExpression: 'ComprehensionExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression' },
     traverse: [Function: traverse],
     replace: [Function: replace],
     attachComments: [Function: attachComments],
     VisitorKeys: 
      { AssignmentExpression: [Array],
        AssignmentPattern: [Array],
        ArrayExpression: [Array],
        ArrayPattern: [Array],
        ArrowFunctionExpression: [Array],
        AwaitExpression: [Array],
        BlockStatement: [Array],
        BinaryExpression: [Array],
        BreakStatement: [Array],
        CallExpression: [Array],
        CatchClause: [Array],
        ClassBody: [Array],
        ClassDeclaration: [Array],
        ClassExpression: [Array],
        ComprehensionBlock: [Array],
        ComprehensionExpression: [Array],
        ConditionalExpression: [Array],
        ContinueStatement: [Array],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: [Array],
        EmptyStatement: [],
        ExportAllDeclaration: [Array],
        ExportDefaultDeclaration: [Array],
        ExportNamedDeclaration: [Array],
        ExportSpecifier: [Array],
        ExpressionStatement: [Array],
        ForStatement: [Array],
        ForInStatement: [Array],
        ForOfStatement: [Array],
        FunctionDeclaration: [Array],
        FunctionExpression: [Array],
        GeneratorExpression: [Array],
        Identifier: [],
        IfStatement: [Array],
        ImportDeclaration: [Array],
        ImportDefaultSpecifier: [Array],
        ImportNamespaceSpecifier: [Array],
        ImportSpecifier: [Array],
        Literal: [],
        LabeledStatement: [Array],
        LogicalExpression: [Array],
        MemberExpression: [Array],
        MetaProperty: [Array],
        MethodDefinition: [Array],
        ModuleSpecifier: [],
        NewExpression: [Array],
        ObjectExpression: [Array],
        ObjectPattern: [Array],
        Program: [Array],
        Property: [Array],
        RestElement: [Array],
        ReturnStatement: [Array],
        SequenceExpression: [Array],
        SpreadElement: [Array],
        Super: [],
        SwitchStatement: [Array],
        SwitchCase: [Array],
        TaggedTemplateExpression: [Array],
        TemplateElement: [],
        TemplateLiteral: [Array],
        ThisExpression: [],
        ThrowStatement: [Array],
        TryStatement: [Array],
        UnaryExpression: [Array],
        UpdateExpression: [Array],
        VariableDeclaration: [Array],
        VariableDeclarator: [Array],
        WhileStatement: [Array],
        WithStatement: [Array],
        YieldExpression: [Array] },
     VisitorOption: { Break: {}, Skip: {}, Remove: {} },
     Controller: [Function: Controller],
     cloneEnvironment: [Function] },
  Bluebird: 
   { [Function: Promise]
     TypeError: [Function: TypeError],
     RangeError: [Function: RangeError],
     CancellationError: [Function: SubError],
     TimeoutError: [Function: SubError],
     OperationalError: [Function: OperationalError],
     RejectionError: [Function: OperationalError],
     AggregateError: [Function: SubError],
     _peekContext: [Function],
     onPossiblyUnhandledRejection: [Function],
     onUnhandledRejectionHandled: [Function],
     longStackTraces: [Function],
     hasLongStackTraces: [Function],
     config: [Function],
     getNewLibraryCopy: [Function],
     is: [Function],
     fromCallback: [Function],
     fromNode: [Function],
     all: [Function],
     cast: [Function],
     fulfilled: [Function],
     resolve: [Function],
     rejected: [Function],
     reject: [Function],
     setScheduler: [Function],
     pending: [Function],
     defer: [Function],
     method: [Function],
     try: [Function],
     attempt: [Function],
     bind: [Function],
     PromiseInspection: [Function: PromiseInspection],
     join: [Function],
     Promise: [Circular],
     version: '3.5.3',
     map: [Function],
     using: [Function],
     delay: [Function],
     coroutine: { [Function] addYieldHandler: [Function] },
     spawn: [Function],
     promisify: [Function],
     promisifyAll: [Function],
     props: [Function],
     race: [Function],
     reduce: [Function],
     settle: [Function],
     some: [Function],
     _SomePromiseArray: [Function: SomePromiseArray],
     filter: [Function],
     each: [Function],
     mapSeries: [Function: PromiseMapSeries],
     any: [Function],
     noConflict: [Function: noConflict] },
  FS: 
   { constants: 
      { O_RDONLY: 0,
        O_WRONLY: 1,
        O_RDWR: 2,
        S_IFMT: 61440,
        S_IFREG: 32768,
        S_IFDIR: 16384,
        S_IFCHR: 8192,
        S_IFBLK: 24576,
        S_IFIFO: 4096,
        S_IFLNK: 40960,
        S_IFSOCK: 49152,
        O_CREAT: 512,
        O_EXCL: 2048,
        O_NOCTTY: 131072,
        O_TRUNC: 1024,
        O_APPEND: 8,
        O_DIRECTORY: 1048576,
        O_NOFOLLOW: 256,
        O_SYNC: 128,
        O_DSYNC: 4194304,
        O_SYMLINK: 2097152,
        O_NONBLOCK: 4,
        S_IRWXU: 448,
        S_IRUSR: 256,
        S_IWUSR: 128,
        S_IXUSR: 64,
        S_IRWXG: 56,
        S_IRGRP: 32,
        S_IWGRP: 16,
        S_IXGRP: 8,
        S_IRWXO: 7,
        S_IROTH: 4,
        S_IWOTH: 2,
        S_IXOTH: 1,
        F_OK: 0,
        R_OK: 4,
        W_OK: 2,
        X_OK: 1,
        UV_FS_COPYFILE_EXCL: 1,
        COPYFILE_EXCL: 1 },
     Stats: [Function: Stats],
     F_OK: 0,
     R_OK: 4,
     W_OK: 2,
     X_OK: 1,
     access: [Function],
     accessSync: [Function],
     exists: [Function],
     existsSync: [Function],
     readFile: [Function],
     readFileSync: [Function],
     close: [Function],
     closeSync: [Function],
     open: [Function],
     openSync: [Function],
     read: [Function],
     readSync: [Function],
     write: [Function],
     writeSync: [Function],
     rename: [Function],
     renameSync: [Function],
     truncate: [Function],
     truncateSync: [Function],
     ftruncate: [Function],
     ftruncateSync: [Function],
     rmdir: [Function],
     rmdirSync: [Function],
     fdatasync: [Function],
     fdatasyncSync: [Function],
     fsync: [Function],
     fsyncSync: [Function],
     mkdir: [Function],
     mkdirSync: [Function],
     readdir: [Function],
     readdirSync: [Function],
     fstat: [Function],
     lstat: [Function],
     stat: [Function],
     fstatSync: [Function],
     lstatSync: [Function],
     statSync: [Function],
     readlink: [Function],
     readlinkSync: [Function],
     symlink: [Function],
     symlinkSync: [Function],
     link: [Function],
     linkSync: [Function],
     unlink: [Function],
     unlinkSync: [Function],
     fchmod: [Function],
     fchmodSync: [Function],
     lchmod: [Function],
     lchmodSync: [Function],
     chmod: [Function],
     chmodSync: [Function],
     lchown: [Function],
     lchownSync: [Function],
     fchown: [Function],
     fchownSync: [Function],
     chown: [Function],
     chownSync: [Function],
     _toUnixTimestamp: [Function: toUnixTimestamp],
     utimes: [Function],
     utimesSync: [Function],
     futimes: [Function],
     futimesSync: [Function],
     writeFile: [Function],
     writeFileSync: [Function],
     appendFile: [Function],
     appendFileSync: [Function],
     watch: [Function],
     watchFile: [Function],
     unwatchFile: [Function],
     realpathSync: [Function: realpathSync],
     realpath: [Function: realpath],
     mkdtemp: [Function],
     mkdtempSync: [Function],
     copyFile: [Function],
     copyFileSync: [Function],
     createReadStream: [Function],
     ReadStream: { [Function: ReadStream] super_: [Object] },
     FileReadStream: { [Function: ReadStream] super_: [Object] },
     createWriteStream: [Function],
     WriteStream: { [Function: WriteStream] super_: [Object] },
     FileWriteStream: { [Function: WriteStream] super_: [Object] } },
  Glob: 
   { [Function: glob]
     sync: { [Function: globSync] GlobSync: [Function: GlobSync] },
     GlobSync: [Function: GlobSync],
     glob: [Circular],
     hasMagic: [Function],
     Glob: { [Function: Glob] super_: [Object] } },
  Toposort: [Function: Toposort],
  Beautify: 
   { [Function: beautify]
     js: { [Function: js_beautify] defaultOptions: [Function] },
     css: { [Function: css_beautify] defaultOptions: [Function] },
     html: { [Function: style_html] defaultOptions: [Function] },
     js_beautify: { [Function: js_beautify] defaultOptions: [Function] },
     css_beautify: { [Function: css_beautify] defaultOptions: [Function] },
     html_beautify: { [Function: style_html] defaultOptions: [Function] } },
  Wildcard: [Function],
  Md5: [Function],
  CamelCase: [Function],
  Doctrine: 
   { version: '3.0.0',
     parse: [Function: parse],
     parseType: [Function: parseType],
     parseParamType: [Function: parseParamType],
     unwrapComment: [Function: unwrapComment],
     Syntax: 
      { NullableLiteral: 'NullableLiteral',
        AllLiteral: 'AllLiteral',
        NullLiteral: 'NullLiteral',
        UndefinedLiteral: 'UndefinedLiteral',
        VoidLiteral: 'VoidLiteral',
        UnionType: 'UnionType',
        ArrayType: 'ArrayType',
        RecordType: 'RecordType',
        FieldType: 'FieldType',
        FunctionType: 'FunctionType',
        ParameterType: 'ParameterType',
        RestType: 'RestType',
        NonNullableType: 'NonNullableType',
        OptionalType: 'OptionalType',
        NullableType: 'NullableType',
        NameExpression: 'NameExpression',
        TypeApplication: 'TypeApplication',
        StringLiteralType: 'StringLiteralType',
        NumericLiteralType: 'NumericLiteralType',
        BooleanLiteralType: 'BooleanLiteralType' },
     Error: [Function: DoctrineError],
     type: 
      { Syntax: [Object],
        parseType: [Function: parseType],
        parseParamType: [Function: parseParamType],
        stringify: [Function: stringify] } },
  PropertiesReader: 
   { parse: [Function],
     stringify: [Function],
     createStringifier: [Function: createStringifier] },
  XML2js: 
   { defaults: { '0.1': [Object], '0.2': [Object] },
     processors: 
      { normalize: [Function],
        firstCharLowerCase: [Function],
        stripPrefix: [Function],
        parseNumbers: [Function],
        parseBooleans: [Function] },
     ValidationError: { [Function: ValidationError] stackTraceLimit: Infinity, __super__: Error {} },
     Builder: [Function: Builder],
     Parser: 
      { [Function: Parser]
        EventEmitter: [Object],
        usingDomains: false,
        defaultMaxListeners: 10,
        init: [Function],
        listenerCount: [Function],
        __super__: [Object] },
     parseString: [Function] },
  Init: [Function: Init],
  Qualifier: [Function: Qualifier],
  Bean: [Function: Bean],
  Resource: [Function: Resource],
  After: [Function: After],
  Aspect: [Function: Aspect],
  Before: [Function: Before],
  PointCut: [Function: PointCut],
  Inherits: [Function: Inherits],
  Autowire: [Function: Autowire],
  Inject: [Function: Inject],
  Store: [Function: Store],
  Component: [Function: Component],
  Configuration: [Function: Configuration],
  Context: [Function: Context],
  Controller: [Function: Controller],
  Prototype: [Function: Prototype],
  Service: [Function: Service],
  Param: [Function: param],
  Type: 
   { [Function: type]
     super_: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] } },
  Namespace: [Function: Namespace],
  Properties: [Function: Properties],
  Run: [Function: Run] }
[2019-01-01T19:38:53.346] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:38:53.346] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:38:53.346] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:53.346] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:38:53.346] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:53.346] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:38:53.346] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:38:53.346] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:39:08.932] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:39:08.959] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:52:16)
[2019-01-01T19:39:08.932] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:39:08.932] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:39:08.933] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:39:08.933] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:39:08.933] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:39:08.933] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:39:08.933] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:39:08.933] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:39:08.960] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:39:08.960] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:99:16)
[2019-01-01T19:39:08.989] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:39:08.996] [TRACE] Foundation -     Received context: { phase: 
   [ _BUILD_CONTEXT_: '0x2',
     _BUILD_FINISHED_: '0x4',
     _BUILD_PLUGIN_FINISHED_: '0x8',
     _BUILD_STRUCTURE_: '0x1',
     _FINAL_APPLICATION_CONTEXT_: '0xFF',
     _FINAL_PLUGIN_CONTEXT_: '0xFE' ],
  stages: 
   [ _AOP_INITIALIZE: 'aop_initialize',
     _AOP_WIRE: 'aop_wire',
     _FINISH_SETUP_: 'finishing bean setup',
     _INHERIT_: 'inherit',
     _INITIALIZE_: 'initialize',
     _INJECT_: 'inject',
     _INSTANTIATE_: 'instantiate',
     _RUN_: 'run',
     _STASHING_: 'stashing' ],
  LogManager: 
   LogManager {
     configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
     categories: [Object],
     logger: [Object] },
  StaticMemberExpressionIdentifierMatch: [Function: StaticMemberExpressionIdentifierMatch],
  VariableDecorationStaticMemberExpressionIdentifierMatch: [Function: VariableDecorationStaticMemberExpressionIdentifierMatch],
  Diagram: [AsyncFunction: draw],
  TokenParser: 
   [ Block: [Function: Block],
     CallExpression: [Function: CallExpression],
     ClassDeclaration: [Function: ClassDeclaration],
     ExpressionStatement: [Function: ExpressionStatement],
     FunctionDeclaration: [Function: FunctionDeclaration],
     Line: [Function: Line],
     MemberExpression: [Function: MemberExpression],
     MethodDefinition: [Function: MethodDefinition],
     Property: [Function: Property],
     VariableDeclaration: [Function: VariableDeclaration] ],
  PropertiesProcessors: [ [Object], [Object], [Object] ],
  PropertiesAnnotationParserInstance: 
   PropertiesParser {
     processors: [Object],
     glob: [Object],
     path: [Object],
     fs: [Object],
     Promise: [Object],
     camelcase: [Function],
     annotation: undefined,
     logManager: [Object],
     logger: [Object] },
  AnnotationParser: 
   [ AfterAnnotationParser: [Object],
     AspectAnnotationParser: [Object],
     AutowireAnnotationParser: [Object],
     BeanAnnotationParser: [Object],
     BeforeAnnotationParser: [Object],
     ComponentAnnotationParser: [Object],
     ConfigurationAnnotationParser: [Object],
     ContextAnnotationParser: [Object],
     ControllerAnnotationParser: [Object],
     InheritsAnnotationParser: [Object],
     InitAnnotationParser: [Object],
     NamespaceAnnotationParser: [Object],
     ParamAnnotationParser: [Object],
     PointCuteAnnotationParser: [Object],
     PropertiesAnnotationParser: [Object],
     PrototypeAnnotationParser: [Object],
     QualifierAnnotationParser: [Object],
     ResourceAnnotationParser: [Object],
     ResourceParser: [Object],
     RunAnnotationParser: [Object],
     ServiceAnnotationParser: [Object],
     StoreAnnotationParser: [Object],
     TypeAnnotationParser: [Object] ],
  DependencyBuilder: 
   DependencyBuilder {
     logManager: [Object],
     logger: [Object],
     glob: [Object],
     _: [Object],
     toposort: [Function: Toposort],
     util: [Object],
     path: [Object] },
  StructureParser: 
   StructureParser {
     logManager: [Object],
     logger: [Object],
     annotationParser: [Array],
     expressionParser: [Array],
     removeTokens: [Array],
     lightTokenInformation: 'true',
     removeLocationInformation: 'true',
     beautify: [Object],
     _: [Object],
     util: [Object],
     esprima: [Object],
     estraverse: [Object] },
  ContextBuilder: 
   ContextBuilder {
     domain: null,
     _events: [Object],
     _eventsCount: 10,
     _maxListeners: undefined,
     logManager: [Object],
     logger: [Object],
     annotationParser: [Array],
     stages: [Array],
     promise: [Object] },
  Factory: 
   Factory {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     modulePath: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/factory',
     logManager: [Object],
     logger: [Object],
     stacks: [],
     dependencyBuilder: [Object],
     esprima: [Object],
     path: [Object],
     estraverse: [Object],
     stages: [Array] },
  BaseAnnotationParser: [Function: BaseAnnotationParser],
  BeanAnnotationParserPrototype: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] },
  Esprima: 
   { parse: [Function: parse],
     tokenize: [Function: tokenize],
     Syntax: [Object],
     version: '3.1.3' },
  Util: 
   { _errnoException: [Function: _errnoException],
     _exceptionWithHostPort: [Function: _exceptionWithHostPort],
     _extend: [Function: _extend],
     callbackify: [Function: callbackify],
     debuglog: [Function: debuglog],
     deprecate: [Function: deprecate],
     format: [Function: format],
     inherits: [Function: inherits],
     inspect: [Object],
     isArray: [Function: isArray],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isNull: [Function: isNull],
     isNullOrUndefined: [Function: isNullOrUndefined],
     isNumber: [Function: isNumber],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isUndefined: [Function: isUndefined],
     isRegExp: [Function: isRegExp],
     isObject: [Function: isObject],
     isDate: [Function: isDate],
     isError: [Function: isError],
     isFunction: [Function: isFunction],
     isPrimitive: [Function: isPrimitive],
     log: [Function: log],
     promisify: [Object],
     TextDecoder: [Function: TextDecoder],
     TextEncoder: [Function: TextEncoder],
     debug: [Function: deprecated],
     error: [Function: deprecated],
     print: [Function: deprecated],
     puts: [Function: deprecated] },
  Path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: [Object],
     posix: [Circular] },
  Lodash: 
   { [Function: lodash]
     templateSettings: [Object],
     after: [Function: after],
     ary: [Function: ary],
     assign: [Function],
     assignIn: [Function],
     assignInWith: [Function],
     assignWith: [Function],
     at: [Function],
     before: [Function: before],
     bind: [Object],
     bindAll: [Function],
     bindKey: [Object],
     castArray: [Function: castArray],
     chain: [Function: chain],
     chunk: [Function: chunk],
     compact: [Function: compact],
     concat: [Function: concat],
     cond: [Function: cond],
     conforms: [Function: conforms],
     constant: [Function: constant],
     countBy: [Function],
     create: [Function: create],
     curry: [Object],
     curryRight: [Object],
     debounce: [Function: debounce],
     defaults: [Function],
     defaultsDeep: [Function],
     defer: [Function],
     delay: [Function],
     difference: [Function],
     differenceBy: [Function],
     differenceWith: [Function],
     drop: [Function: drop],
     dropRight: [Function: dropRight],
     dropRightWhile: [Function: dropRightWhile],
     dropWhile: [Function: dropWhile],
     fill: [Function: fill],
     filter: [Function: filter],
     flatMap: [Function: flatMap],
     flatMapDeep: [Function: flatMapDeep],
     flatMapDepth: [Function: flatMapDepth],
     flatten: [Function: flatten],
     flattenDeep: [Function: flattenDeep],
     flattenDepth: [Function: flattenDepth],
     flip: [Function: flip],
     flow: [Function],
     flowRight: [Function],
     fromPairs: [Function: fromPairs],
     functions: [Function: functions],
     functionsIn: [Function: functionsIn],
     groupBy: [Function],
     initial: [Function: initial],
     intersection: [Function],
     intersectionBy: [Function],
     intersectionWith: [Function],
     invert: [Function],
     invertBy: [Function],
     invokeMap: [Function],
     iteratee: [Function: iteratee],
     keyBy: [Function],
     keys: [Function: keys],
     keysIn: [Function: keysIn],
     map: [Function: map],
     mapKeys: [Function: mapKeys],
     mapValues: [Function: mapValues],
     matches: [Function: matches],
     matchesProperty: [Function: matchesProperty],
     memoize: [Object],
     merge: [Function],
     mergeWith: [Function],
     method: [Function],
     methodOf: [Function],
     mixin: [Function: mixin],
     negate: [Function: negate],
     nthArg: [Function: nthArg],
     omit: [Function],
     omitBy: [Function: omitBy],
     once: [Function: once],
     orderBy: [Function: orderBy],
     over: [Function],
     overArgs: [Function],
     overEvery: [Function],
     overSome: [Function],
     partial: [Object],
     partialRight: [Object],
     partition: [Function],
     pick: [Function],
     pickBy: [Function: pickBy],
     property: [Function: property],
     propertyOf: [Function: propertyOf],
     pull: [Function],
     pullAll: [Function: pullAll],
     pullAllBy: [Function: pullAllBy],
     pullAllWith: [Function: pullAllWith],
     pullAt: [Function],
     range: [Function],
     rangeRight: [Function],
     rearg: [Function],
     reject: [Function: reject],
     remove: [Function: remove],
     rest: [Function: rest],
     reverse: [Function: reverse],
     sampleSize: [Function: sampleSize],
     set: [Function: set],
     setWith: [Function: setWith],
     shuffle: [Function: shuffle],
     slice: [Function: slice],
     sortBy: [Function],
     sortedUniq: [Function: sortedUniq],
     sortedUniqBy: [Function: sortedUniqBy],
     split: [Function: split],
     spread: [Function: spread],
     tail: [Function: tail],
     take: [Function: take],
     takeRight: [Function: takeRight],
     takeRightWhile: [Function: takeRightWhile],
     takeWhile: [Function: takeWhile],
     tap: [Function: tap],
     throttle: [Function: throttle],
     thru: [Function: thru],
     toArray: [Function: toArray],
     toPairs: [Function],
     toPairsIn: [Function],
     toPath: [Function: toPath],
     toPlainObject: [Function: toPlainObject],
     transform: [Function: transform],
     unary: [Function: unary],
     union: [Function],
     unionBy: [Function],
     unionWith: [Function],
     uniq: [Function: uniq],
     uniqBy: [Function: uniqBy],
     uniqWith: [Function: uniqWith],
     unset: [Function: unset],
     unzip: [Function: unzip],
     unzipWith: [Function: unzipWith],
     update: [Function: update],
     updateWith: [Function: updateWith],
     values: [Function: values],
     valuesIn: [Function: valuesIn],
     without: [Function],
     words: [Function: words],
     wrap: [Function: wrap],
     xor: [Function],
     xorBy: [Function],
     xorWith: [Function],
     zip: [Function],
     zipObject: [Function: zipObject],
     zipObjectDeep: [Function: zipObjectDeep],
     zipWith: [Function],
     entries: [Function],
     entriesIn: [Function],
     extend: [Function],
     extendWith: [Function],
     add: [Function],
     attempt: [Function],
     camelCase: [Function],
     capitalize: [Function: capitalize],
     ceil: [Function],
     clamp: [Function: clamp],
     clone: [Function: clone],
     cloneDeep: [Function: cloneDeep],
     cloneDeepWith: [Function: cloneDeepWith],
     cloneWith: [Function: cloneWith],
     conformsTo: [Function: conformsTo],
     deburr: [Function: deburr],
     defaultTo: [Function: defaultTo],
     divide: [Function],
     endsWith: [Function: endsWith],
     eq: [Function: eq],
     escape: [Function: escape],
     escapeRegExp: [Function: escapeRegExp],
     every: [Function: every],
     find: [Function],
     findIndex: [Function: findIndex],
     findKey: [Function: findKey],
     findLast: [Function],
     findLastIndex: [Function: findLastIndex],
     findLastKey: [Function: findLastKey],
     floor: [Function],
     forEach: [Function: forEach],
     forEachRight: [Function: forEachRight],
     forIn: [Function: forIn],
     forInRight: [Function: forInRight],
     forOwn: [Function: forOwn],
     forOwnRight: [Function: forOwnRight],
     get: [Function: get],
     gt: [Function],
     gte: [Function],
     has: [Function: has],
     hasIn: [Function: hasIn],
     head: [Function: head],
     identity: [Function: identity],
     includes: [Function: includes],
     indexOf: [Function: indexOf],
     inRange: [Function: inRange],
     invoke: [Function],
     isArguments: [Function: baseIsArguments],
     isArray: [Function: isArray],
     isArrayBuffer: [Function],
     isArrayLike: [Function: isArrayLike],
     isArrayLikeObject: [Function: isArrayLikeObject],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isDate: [Function],
     isElement: [Function: isElement],
     isEmpty: [Function: isEmpty],
     isEqual: [Function: isEqual],
     isEqualWith: [Function: isEqualWith],
     isError: [Function: isError],
     isFinite: [Function: isFinite],
     isFunction: [Function: isFunction],
     isInteger: [Function: isInteger],
     isLength: [Function: isLength],
     isMap: [Function],
     isMatch: [Function: isMatch],
     isMatchWith: [Function: isMatchWith],
     isNaN: [Function: isNaN],
     isNative: [Function: isNative],
     isNil: [Function: isNil],
     isNull: [Function: isNull],
     isNumber: [Function: isNumber],
     isObject: [Function: isObject],
     isObjectLike: [Function: isObjectLike],
     isPlainObject: [Function: isPlainObject],
     isRegExp: [Function],
     isSafeInteger: [Function: isSafeInteger],
     isSet: [Function],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isTypedArray: [Function],
     isUndefined: [Function: isUndefined],
     isWeakMap: [Function: isWeakMap],
     isWeakSet: [Function: isWeakSet],
     join: [Function: join],
     kebabCase: [Function],
     last: [Function: last],
     lastIndexOf: [Function: lastIndexOf],
     lowerCase: [Function],
     lowerFirst: [Function],
     lt: [Function],
     lte: [Function],
     max: [Function: max],
     maxBy: [Function: maxBy],
     mean: [Function: mean],
     meanBy: [Function: meanBy],
     min: [Function: min],
     minBy: [Function: minBy],
     stubArray: [Function: stubArray],
     stubFalse: [Function: stubFalse],
     stubObject: [Function: stubObject],
     stubString: [Function: stubString],
     stubTrue: [Function: stubTrue],
     multiply: [Function],
     nth: [Function: nth],
     noConflict: [Function: noConflict],
     noop: [Function: noop],
     now: [Function],
     pad: [Function: pad],
     padEnd: [Function: padEnd],
     padStart: [Function: padStart],
     parseInt: [Function: parseInt],
     random: [Function: random],
     reduce: [Function: reduce],
     reduceRight: [Function: reduceRight],
     repeat: [Function: repeat],
     replace: [Function: replace],
     result: [Function: result],
     round: [Function],
     runInContext: [Function: runInContext],
     sample: [Function: sample],
     size: [Function: size],
     snakeCase: [Function],
     some: [Function: some],
     sortedIndex: [Function: sortedIndex],
     sortedIndexBy: [Function: sortedIndexBy],
     sortedIndexOf: [Function: sortedIndexOf],
     sortedLastIndex: [Function: sortedLastIndex],
     sortedLastIndexBy: [Function: sortedLastIndexBy],
     sortedLastIndexOf: [Function: sortedLastIndexOf],
     startCase: [Function],
     startsWith: [Function: startsWith],
     subtract: [Function],
     sum: [Function: sum],
     sumBy: [Function: sumBy],
     template: [Function: template],
     times: [Function: times],
     toFinite: [Function: toFinite],
     toInteger: [Function: toInteger],
     toLength: [Function: toLength],
     toLower: [Function: toLower],
     toNumber: [Function: toNumber],
     toSafeInteger: [Function: toSafeInteger],
     toString: [Function: toString],
     toUpper: [Function: toUpper],
     trim: [Function: trim],
     trimEnd: [Function: trimEnd],
     trimStart: [Function: trimStart],
     truncate: [Function: truncate],
     unescape: [Function: unescape],
     uniqueId: [Function: uniqueId],
     upperCase: [Function],
     upperFirst: [Function],
     each: [Function: forEach],
     eachRight: [Function: forEachRight],
     first: [Function: head],
     VERSION: '4.17.11',
     _: [Circular] },
  Estraverse: 
   { version: '4.2.0',
     Syntax: [Object],
     traverse: [Function: traverse],
     replace: [Function: replace],
     attachComments: [Function: attachComments],
     VisitorKeys: [Object],
     VisitorOption: [Object],
     Controller: [Function: Controller],
     cloneEnvironment: [Function] },
  Bluebird: 
   { [Function: Promise]
     TypeError: [Function: TypeError],
     RangeError: [Function: RangeError],
     CancellationError: [Function: SubError],
     TimeoutError: [Function: SubError],
     OperationalError: [Function: OperationalError],
     RejectionError: [Function: OperationalError],
     AggregateError: [Function: SubError],
     _peekContext: [Function],
     onPossiblyUnhandledRejection: [Function],
     onUnhandledRejectionHandled: [Function],
     longStackTraces: [Function],
     hasLongStackTraces: [Function],
     config: [Function],
     getNewLibraryCopy: [Function],
     is: [Function],
     fromCallback: [Function],
     fromNode: [Function],
     all: [Function],
     cast: [Function],
     fulfilled: [Function],
     resolve: [Function],
     rejected: [Function],
     reject: [Function],
     setScheduler: [Function],
     pending: [Function],
     defer: [Function],
     method: [Function],
     try: [Function],
     attempt: [Function],
     bind: [Function],
     PromiseInspection: [Function: PromiseInspection],
     join: [Function],
     Promise: [Circular],
     version: '3.5.3',
     map: [Function],
     using: [Function],
     delay: [Function],
     coroutine: [Object],
     spawn: [Function],
     promisify: [Function],
     promisifyAll: [Function],
     props: [Function],
     race: [Function],
     reduce: [Function],
     settle: [Function],
     some: [Function],
     _SomePromiseArray: [Function: SomePromiseArray],
     filter: [Function],
     each: [Function],
     mapSeries: [Function: PromiseMapSeries],
     any: [Function],
     noConflict: [Function: noConflict] },
  FS: 
   { constants: [Object],
     Stats: [Function: Stats],
     F_OK: 0,
     R_OK: 4,
     W_OK: 2,
     X_OK: 1,
     access: [Function],
     accessSync: [Function],
     exists: [Function],
     existsSync: [Function],
     readFile: [Function],
     readFileSync: [Function],
     close: [Function],
     closeSync: [Function],
     open: [Function],
     openSync: [Function],
     read: [Function],
     readSync: [Function],
     write: [Function],
     writeSync: [Function],
     rename: [Function],
     renameSync: [Function],
     truncate: [Function],
     truncateSync: [Function],
     ftruncate: [Function],
     ftruncateSync: [Function],
     rmdir: [Function],
     rmdirSync: [Function],
     fdatasync: [Function],
     fdatasyncSync: [Function],
     fsync: [Function],
     fsyncSync: [Function],
     mkdir: [Function],
     mkdirSync: [Function],
     readdir: [Function],
     readdirSync: [Function],
     fstat: [Function],
     lstat: [Function],
     stat: [Function],
     fstatSync: [Function],
     lstatSync: [Function],
     statSync: [Function],
     readlink: [Function],
     readlinkSync: [Function],
     symlink: [Function],
     symlinkSync: [Function],
     link: [Function],
     linkSync: [Function],
     unlink: [Function],
     unlinkSync: [Function],
     fchmod: [Function],
     fchmodSync: [Function],
     lchmod: [Function],
     lchmodSync: [Function],
     chmod: [Function],
     chmodSync: [Function],
     lchown: [Function],
     lchownSync: [Function],
     fchown: [Function],
     fchownSync: [Function],
     chown: [Function],
     chownSync: [Function],
     _toUnixTimestamp: [Function: toUnixTimestamp],
     utimes: [Function],
     utimesSync: [Function],
     futimes: [Function],
     futimesSync: [Function],
     writeFile: [Function],
     writeFileSync: [Function],
     appendFile: [Function],
     appendFileSync: [Function],
     watch: [Function],
     watchFile: [Function],
     unwatchFile: [Function],
     realpathSync: [Function: realpathSync],
     realpath: [Function: realpath],
     mkdtemp: [Function],
     mkdtempSync: [Function],
     copyFile: [Function],
     copyFileSync: [Function],
     createReadStream: [Function],
     ReadStream: [Object],
     FileReadStream: [Object],
     createWriteStream: [Function],
     WriteStream: [Object],
     FileWriteStream: [Object] },
  Glob: 
   { [Function: glob]
     sync: [Object],
     GlobSync: [Function: GlobSync],
     glob: [Circular],
     hasMagic: [Function],
     Glob: [Object] },
  Toposort: [Function: Toposort],
  Beautify: 
   { [Function: beautify]
     js: [Object],
     css: [Object],
     html: [Object],
     js_beautify: [Object],
     css_beautify: [Object],
     html_beautify: [Object] },
  Wildcard: [Function],
  Md5: [Function],
  CamelCase: [Function],
  Doctrine: 
   { version: '3.0.0',
     parse: [Function: parse],
     parseType: [Function: parseType],
     parseParamType: [Function: parseParamType],
     unwrapComment: [Function: unwrapComment],
     Syntax: [Object],
     Error: [Function: DoctrineError],
     type: [Object] },
  PropertiesReader: 
   { parse: [Function],
     stringify: [Function],
     createStringifier: [Function: createStringifier] },
  XML2js: 
   { defaults: [Object],
     processors: [Object],
     ValidationError: [Object],
     Builder: [Function: Builder],
     Parser: [Object],
     parseString: [Function] },
  Init: [Function: Init],
  Qualifier: [Function: Qualifier],
  Bean: [Function: Bean],
  Resource: [Function: Resource],
  After: [Function: After],
  Aspect: [Function: Aspect],
  Before: [Function: Before],
  PointCut: [Function: PointCut],
  Inherits: [Function: Inherits],
  Autowire: [Function: Autowire],
  Inject: [Function: Inject],
  Store: [Function: Store],
  Component: [Function: Component],
  Configuration: [Function: Configuration],
  Context: [Function: Context],
  Controller: [Function: Controller],
  Prototype: [Function: Prototype],
  Service: [Function: Service],
  Param: [Function: param],
  Type: { [Function: type] super_: [Object] },
  Namespace: [Function: Namespace],
  Properties: [Function: Properties],
  Run: [Function: Run] }
[2019-01-01T19:39:08.989] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:39:08.990] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:39:08.990] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:08.990] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:39:08.990] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:08.990] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:39:08.990] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:08.990] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:39:09.016] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:39:09.016] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:39:09.016] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:39:09.032] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:39:09.039] [TRACE] Foundation -     Received context: { phase: 
   [ _BUILD_CONTEXT_: '0x2',
     _BUILD_FINISHED_: '0x4',
     _BUILD_PLUGIN_FINISHED_: '0x8',
     _BUILD_STRUCTURE_: '0x1',
     _FINAL_APPLICATION_CONTEXT_: '0xFF',
     _FINAL_PLUGIN_CONTEXT_: '0xFE' ],
  stages: 
   [ _AOP_INITIALIZE: 'aop_initialize',
     _AOP_WIRE: 'aop_wire',
     _FINISH_SETUP_: 'finishing bean setup',
     _INHERIT_: 'inherit',
     _INITIALIZE_: 'initialize',
     _INJECT_: 'inject',
     _INSTANTIATE_: 'instantiate',
     _RUN_: 'run',
     _STASHING_: 'stashing' ],
  LogManager: 
   LogManager {
     configFile: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/log4js.json',
     categories: [Object],
     logger: [Object] },
  StaticMemberExpressionIdentifierMatch: [Function: StaticMemberExpressionIdentifierMatch],
  VariableDecorationStaticMemberExpressionIdentifierMatch: [Function: VariableDecorationStaticMemberExpressionIdentifierMatch],
  Diagram: [AsyncFunction: draw],
  TokenParser: 
   [ Block: [Function: Block],
     CallExpression: [Function: CallExpression],
     ClassDeclaration: [Function: ClassDeclaration],
     ExpressionStatement: [Function: ExpressionStatement],
     FunctionDeclaration: [Function: FunctionDeclaration],
     Line: [Function: Line],
     MemberExpression: [Function: MemberExpression],
     MethodDefinition: [Function: MethodDefinition],
     Property: [Function: Property],
     VariableDeclaration: [Function: VariableDeclaration] ],
  PropertiesProcessors: [ [Object], [Object], [Object] ],
  PropertiesAnnotationParserInstance: 
   PropertiesParser {
     processors: [Object],
     glob: [Object],
     path: [Object],
     fs: [Object],
     Promise: [Object],
     camelcase: [Function],
     annotation: undefined,
     logManager: [Object],
     logger: [Object] },
  AnnotationParser: 
   [ AfterAnnotationParser: [Object],
     AspectAnnotationParser: [Object],
     AutowireAnnotationParser: [Object],
     BeanAnnotationParser: [Object],
     BeforeAnnotationParser: [Object],
     ComponentAnnotationParser: [Object],
     ConfigurationAnnotationParser: [Object],
     ContextAnnotationParser: [Object],
     ControllerAnnotationParser: [Object],
     InheritsAnnotationParser: [Object],
     InitAnnotationParser: [Object],
     NamespaceAnnotationParser: [Object],
     ParamAnnotationParser: [Object],
     PointCuteAnnotationParser: [Object],
     PropertiesAnnotationParser: [Object],
     PrototypeAnnotationParser: [Object],
     QualifierAnnotationParser: [Object],
     ResourceAnnotationParser: [Object],
     ResourceParser: [Object],
     RunAnnotationParser: [Object],
     ServiceAnnotationParser: [Object],
     StoreAnnotationParser: [Object],
     TypeAnnotationParser: [Object] ],
  DependencyBuilder: 
   DependencyBuilder {
     logManager: [Object],
     logger: [Object],
     glob: [Object],
     _: [Object],
     toposort: [Function: Toposort],
     util: [Object],
     path: [Object] },
  StructureParser: 
   StructureParser {
     logManager: [Object],
     logger: [Object],
     annotationParser: [Array],
     expressionParser: [Array],
     removeTokens: [Array],
     lightTokenInformation: 'true',
     removeLocationInformation: 'true',
     beautify: [Object],
     _: [Object],
     util: [Object],
     esprima: [Object],
     estraverse: [Object] },
  ContextBuilder: 
   ContextBuilder {
     domain: null,
     _events: [Object],
     _eventsCount: 10,
     _maxListeners: undefined,
     logManager: [Object],
     logger: [Object],
     annotationParser: [Array],
     stages: [Array],
     promise: [Object] },
  Factory: 
   Factory {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     modulePath: '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/factory',
     logManager: [Object],
     logger: [Object],
     stacks: [],
     dependencyBuilder: [Object],
     esprima: [Object],
     path: [Object],
     estraverse: [Object],
     stages: [Array] },
  BaseAnnotationParser: [Function: BaseAnnotationParser],
  BeanAnnotationParserPrototype: { [Function: BeanParser] super_: [Function: BaseAnnotationParser] },
  Esprima: 
   { parse: [Function: parse],
     tokenize: [Function: tokenize],
     Syntax: [Object],
     version: '3.1.3' },
  Util: 
   { _errnoException: [Function: _errnoException],
     _exceptionWithHostPort: [Function: _exceptionWithHostPort],
     _extend: [Function: _extend],
     callbackify: [Function: callbackify],
     debuglog: [Function: debuglog],
     deprecate: [Function: deprecate],
     format: [Function: format],
     inherits: [Function: inherits],
     inspect: [Object],
     isArray: [Function: isArray],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isNull: [Function: isNull],
     isNullOrUndefined: [Function: isNullOrUndefined],
     isNumber: [Function: isNumber],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isUndefined: [Function: isUndefined],
     isRegExp: [Function: isRegExp],
     isObject: [Function: isObject],
     isDate: [Function: isDate],
     isError: [Function: isError],
     isFunction: [Function: isFunction],
     isPrimitive: [Function: isPrimitive],
     log: [Function: log],
     promisify: [Object],
     TextDecoder: [Function: TextDecoder],
     TextEncoder: [Function: TextEncoder],
     debug: [Function: deprecated],
     error: [Function: deprecated],
     print: [Function: deprecated],
     puts: [Function: deprecated] },
  Path: 
   { resolve: [Function: resolve],
     normalize: [Function: normalize],
     isAbsolute: [Function: isAbsolute],
     join: [Function: join],
     relative: [Function: relative],
     _makeLong: [Function: _makeLong],
     dirname: [Function: dirname],
     basename: [Function: basename],
     extname: [Function: extname],
     format: [Function: format],
     parse: [Function: parse],
     sep: '/',
     delimiter: ':',
     win32: [Object],
     posix: [Circular] },
  Lodash: 
   { [Function: lodash]
     templateSettings: [Object],
     after: [Function: after],
     ary: [Function: ary],
     assign: [Function],
     assignIn: [Function],
     assignInWith: [Function],
     assignWith: [Function],
     at: [Function],
     before: [Function: before],
     bind: [Object],
     bindAll: [Function],
     bindKey: [Object],
     castArray: [Function: castArray],
     chain: [Function: chain],
     chunk: [Function: chunk],
     compact: [Function: compact],
     concat: [Function: concat],
     cond: [Function: cond],
     conforms: [Function: conforms],
     constant: [Function: constant],
     countBy: [Function],
     create: [Function: create],
     curry: [Object],
     curryRight: [Object],
     debounce: [Function: debounce],
     defaults: [Function],
     defaultsDeep: [Function],
     defer: [Function],
     delay: [Function],
     difference: [Function],
     differenceBy: [Function],
     differenceWith: [Function],
     drop: [Function: drop],
     dropRight: [Function: dropRight],
     dropRightWhile: [Function: dropRightWhile],
     dropWhile: [Function: dropWhile],
     fill: [Function: fill],
     filter: [Function: filter],
     flatMap: [Function: flatMap],
     flatMapDeep: [Function: flatMapDeep],
     flatMapDepth: [Function: flatMapDepth],
     flatten: [Function: flatten],
     flattenDeep: [Function: flattenDeep],
     flattenDepth: [Function: flattenDepth],
     flip: [Function: flip],
     flow: [Function],
     flowRight: [Function],
     fromPairs: [Function: fromPairs],
     functions: [Function: functions],
     functionsIn: [Function: functionsIn],
     groupBy: [Function],
     initial: [Function: initial],
     intersection: [Function],
     intersectionBy: [Function],
     intersectionWith: [Function],
     invert: [Function],
     invertBy: [Function],
     invokeMap: [Function],
     iteratee: [Function: iteratee],
     keyBy: [Function],
     keys: [Function: keys],
     keysIn: [Function: keysIn],
     map: [Function: map],
     mapKeys: [Function: mapKeys],
     mapValues: [Function: mapValues],
     matches: [Function: matches],
     matchesProperty: [Function: matchesProperty],
     memoize: [Object],
     merge: [Function],
     mergeWith: [Function],
     method: [Function],
     methodOf: [Function],
     mixin: [Function: mixin],
     negate: [Function: negate],
     nthArg: [Function: nthArg],
     omit: [Function],
     omitBy: [Function: omitBy],
     once: [Function: once],
     orderBy: [Function: orderBy],
     over: [Function],
     overArgs: [Function],
     overEvery: [Function],
     overSome: [Function],
     partial: [Object],
     partialRight: [Object],
     partition: [Function],
     pick: [Function],
     pickBy: [Function: pickBy],
     property: [Function: property],
     propertyOf: [Function: propertyOf],
     pull: [Function],
     pullAll: [Function: pullAll],
     pullAllBy: [Function: pullAllBy],
     pullAllWith: [Function: pullAllWith],
     pullAt: [Function],
     range: [Function],
     rangeRight: [Function],
     rearg: [Function],
     reject: [Function: reject],
     remove: [Function: remove],
     rest: [Function: rest],
     reverse: [Function: reverse],
     sampleSize: [Function: sampleSize],
     set: [Function: set],
     setWith: [Function: setWith],
     shuffle: [Function: shuffle],
     slice: [Function: slice],
     sortBy: [Function],
     sortedUniq: [Function: sortedUniq],
     sortedUniqBy: [Function: sortedUniqBy],
     split: [Function: split],
     spread: [Function: spread],
     tail: [Function: tail],
     take: [Function: take],
     takeRight: [Function: takeRight],
     takeRightWhile: [Function: takeRightWhile],
     takeWhile: [Function: takeWhile],
     tap: [Function: tap],
     throttle: [Function: throttle],
     thru: [Function: thru],
     toArray: [Function: toArray],
     toPairs: [Function],
     toPairsIn: [Function],
     toPath: [Function: toPath],
     toPlainObject: [Function: toPlainObject],
     transform: [Function: transform],
     unary: [Function: unary],
     union: [Function],
     unionBy: [Function],
     unionWith: [Function],
     uniq: [Function: uniq],
     uniqBy: [Function: uniqBy],
     uniqWith: [Function: uniqWith],
     unset: [Function: unset],
     unzip: [Function: unzip],
     unzipWith: [Function: unzipWith],
     update: [Function: update],
     updateWith: [Function: updateWith],
     values: [Function: values],
     valuesIn: [Function: valuesIn],
     without: [Function],
     words: [Function: words],
     wrap: [Function: wrap],
     xor: [Function],
     xorBy: [Function],
     xorWith: [Function],
     zip: [Function],
     zipObject: [Function: zipObject],
     zipObjectDeep: [Function: zipObjectDeep],
     zipWith: [Function],
     entries: [Function],
     entriesIn: [Function],
     extend: [Function],
     extendWith: [Function],
     add: [Function],
     attempt: [Function],
     camelCase: [Function],
     capitalize: [Function: capitalize],
     ceil: [Function],
     clamp: [Function: clamp],
     clone: [Function: clone],
     cloneDeep: [Function: cloneDeep],
     cloneDeepWith: [Function: cloneDeepWith],
     cloneWith: [Function: cloneWith],
     conformsTo: [Function: conformsTo],
     deburr: [Function: deburr],
     defaultTo: [Function: defaultTo],
     divide: [Function],
     endsWith: [Function: endsWith],
     eq: [Function: eq],
     escape: [Function: escape],
     escapeRegExp: [Function: escapeRegExp],
     every: [Function: every],
     find: [Function],
     findIndex: [Function: findIndex],
     findKey: [Function: findKey],
     findLast: [Function],
     findLastIndex: [Function: findLastIndex],
     findLastKey: [Function: findLastKey],
     floor: [Function],
     forEach: [Function: forEach],
     forEachRight: [Function: forEachRight],
     forIn: [Function: forIn],
     forInRight: [Function: forInRight],
     forOwn: [Function: forOwn],
     forOwnRight: [Function: forOwnRight],
     get: [Function: get],
     gt: [Function],
     gte: [Function],
     has: [Function: has],
     hasIn: [Function: hasIn],
     head: [Function: head],
     identity: [Function: identity],
     includes: [Function: includes],
     indexOf: [Function: indexOf],
     inRange: [Function: inRange],
     invoke: [Function],
     isArguments: [Function: baseIsArguments],
     isArray: [Function: isArray],
     isArrayBuffer: [Function],
     isArrayLike: [Function: isArrayLike],
     isArrayLikeObject: [Function: isArrayLikeObject],
     isBoolean: [Function: isBoolean],
     isBuffer: [Function: isBuffer],
     isDate: [Function],
     isElement: [Function: isElement],
     isEmpty: [Function: isEmpty],
     isEqual: [Function: isEqual],
     isEqualWith: [Function: isEqualWith],
     isError: [Function: isError],
     isFinite: [Function: isFinite],
     isFunction: [Function: isFunction],
     isInteger: [Function: isInteger],
     isLength: [Function: isLength],
     isMap: [Function],
     isMatch: [Function: isMatch],
     isMatchWith: [Function: isMatchWith],
     isNaN: [Function: isNaN],
     isNative: [Function: isNative],
     isNil: [Function: isNil],
     isNull: [Function: isNull],
     isNumber: [Function: isNumber],
     isObject: [Function: isObject],
     isObjectLike: [Function: isObjectLike],
     isPlainObject: [Function: isPlainObject],
     isRegExp: [Function],
     isSafeInteger: [Function: isSafeInteger],
     isSet: [Function],
     isString: [Function: isString],
     isSymbol: [Function: isSymbol],
     isTypedArray: [Function],
     isUndefined: [Function: isUndefined],
     isWeakMap: [Function: isWeakMap],
     isWeakSet: [Function: isWeakSet],
     join: [Function: join],
     kebabCase: [Function],
     last: [Function: last],
     lastIndexOf: [Function: lastIndexOf],
     lowerCase: [Function],
     lowerFirst: [Function],
     lt: [Function],
     lte: [Function],
     max: [Function: max],
     maxBy: [Function: maxBy],
     mean: [Function: mean],
     meanBy: [Function: meanBy],
     min: [Function: min],
     minBy: [Function: minBy],
     stubArray: [Function: stubArray],
     stubFalse: [Function: stubFalse],
     stubObject: [Function: stubObject],
     stubString: [Function: stubString],
     stubTrue: [Function: stubTrue],
     multiply: [Function],
     nth: [Function: nth],
     noConflict: [Function: noConflict],
     noop: [Function: noop],
     now: [Function],
     pad: [Function: pad],
     padEnd: [Function: padEnd],
     padStart: [Function: padStart],
     parseInt: [Function: parseInt],
     random: [Function: random],
     reduce: [Function: reduce],
     reduceRight: [Function: reduceRight],
     repeat: [Function: repeat],
     replace: [Function: replace],
     result: [Function: result],
     round: [Function],
     runInContext: [Function: runInContext],
     sample: [Function: sample],
     size: [Function: size],
     snakeCase: [Function],
     some: [Function: some],
     sortedIndex: [Function: sortedIndex],
     sortedIndexBy: [Function: sortedIndexBy],
     sortedIndexOf: [Function: sortedIndexOf],
     sortedLastIndex: [Function: sortedLastIndex],
     sortedLastIndexBy: [Function: sortedLastIndexBy],
     sortedLastIndexOf: [Function: sortedLastIndexOf],
     startCase: [Function],
     startsWith: [Function: startsWith],
     subtract: [Function],
     sum: [Function: sum],
     sumBy: [Function: sumBy],
     template: [Function: template],
     times: [Function: times],
     toFinite: [Function: toFinite],
     toInteger: [Function: toInteger],
     toLength: [Function: toLength],
     toLower: [Function: toLower],
     toNumber: [Function: toNumber],
     toSafeInteger: [Function: toSafeInteger],
     toString: [Function: toString],
     toUpper: [Function: toUpper],
     trim: [Function: trim],
     trimEnd: [Function: trimEnd],
     trimStart: [Function: trimStart],
     truncate: [Function: truncate],
     unescape: [Function: unescape],
     uniqueId: [Function: uniqueId],
     upperCase: [Function],
     upperFirst: [Function],
     each: [Function: forEach],
     eachRight: [Function: forEachRight],
     first: [Function: head],
     VERSION: '4.17.11',
     _: [Circular] },
  Estraverse: 
   { version: '4.2.0',
     Syntax: [Object],
     traverse: [Function: traverse],
     replace: [Function: replace],
     attachComments: [Function: attachComments],
     VisitorKeys: [Object],
     VisitorOption: [Object],
     Controller: [Function: Controller],
     cloneEnvironment: [Function] },
  Bluebird: 
   { [Function: Promise]
     TypeError: [Function: TypeError],
     RangeError: [Function: RangeError],
     CancellationError: [Function: SubError],
     TimeoutError: [Function: SubError],
     OperationalError: [Function: OperationalError],
     RejectionError: [Function: OperationalError],
     AggregateError: [Function: SubError],
     _peekContext: [Function],
     onPossiblyUnhandledRejection: [Function],
     onUnhandledRejectionHandled: [Function],
     longStackTraces: [Function],
     hasLongStackTraces: [Function],
     config: [Function],
     getNewLibraryCopy: [Function],
     is: [Function],
     fromCallback: [Function],
     fromNode: [Function],
     all: [Function],
     cast: [Function],
     fulfilled: [Function],
     resolve: [Function],
     rejected: [Function],
     reject: [Function],
     setScheduler: [Function],
     pending: [Function],
     defer: [Function],
     method: [Function],
     try: [Function],
     attempt: [Function],
     bind: [Function],
     PromiseInspection: [Function: PromiseInspection],
     join: [Function],
     Promise: [Circular],
     version: '3.5.3',
     map: [Function],
     using: [Function],
     delay: [Function],
     coroutine: [Object],
     spawn: [Function],
     promisify: [Function],
     promisifyAll: [Function],
     props: [Function],
     race: [Function],
     reduce: [Function],
     settle: [Function],
     some: [Function],
     _SomePromiseArray: [Function: SomePromiseArray],
     filter: [Function],
     each: [Function],
     mapSeries: [Function: PromiseMapSeries],
     any: [Function],
     noConflict: [Function: noConflict] },
  FS: 
   { constants: [Object],
     Stats: [Function: Stats],
     F_OK: 0,
     R_OK: 4,
     W_OK: 2,
     X_OK: 1,
     access: [Function],
     accessSync: [Function],
     exists: [Function],
     existsSync: [Function],
     readFile: [Function],
     readFileSync: [Function],
     close: [Function],
     closeSync: [Function],
     open: [Function],
     openSync: [Function],
     read: [Function],
     readSync: [Function],
     write: [Function],
     writeSync: [Function],
     rename: [Function],
     renameSync: [Function],
     truncate: [Function],
     truncateSync: [Function],
     ftruncate: [Function],
     ftruncateSync: [Function],
     rmdir: [Function],
     rmdirSync: [Function],
     fdatasync: [Function],
     fdatasyncSync: [Function],
     fsync: [Function],
     fsyncSync: [Function],
     mkdir: [Function],
     mkdirSync: [Function],
     readdir: [Function],
     readdirSync: [Function],
     fstat: [Function],
     lstat: [Function],
     stat: [Function],
     fstatSync: [Function],
     lstatSync: [Function],
     statSync: [Function],
     readlink: [Function],
     readlinkSync: [Function],
     symlink: [Function],
     symlinkSync: [Function],
     link: [Function],
     linkSync: [Function],
     unlink: [Function],
     unlinkSync: [Function],
     fchmod: [Function],
     fchmodSync: [Function],
     lchmod: [Function],
     lchmodSync: [Function],
     chmod: [Function],
     chmodSync: [Function],
     lchown: [Function],
     lchownSync: [Function],
     fchown: [Function],
     fchownSync: [Function],
     chown: [Function],
     chownSync: [Function],
     _toUnixTimestamp: [Function: toUnixTimestamp],
     utimes: [Function],
     utimesSync: [Function],
     futimes: [Function],
     futimesSync: [Function],
     writeFile: [Function],
     writeFileSync: [Function],
     appendFile: [Function],
     appendFileSync: [Function],
     watch: [Function],
     watchFile: [Function],
     unwatchFile: [Function],
     realpathSync: [Function: realpathSync],
     realpath: [Function: realpath],
     mkdtemp: [Function],
     mkdtempSync: [Function],
     copyFile: [Function],
     copyFileSync: [Function],
     createReadStream: [Function],
     ReadStream: [Object],
     FileReadStream: [Object],
     createWriteStream: [Function],
     WriteStream: [Object],
     FileWriteStream: [Object] },
  Glob: 
   { [Function: glob]
     sync: [Object],
     GlobSync: [Function: GlobSync],
     glob: [Circular],
     hasMagic: [Function],
     Glob: [Object] },
  Toposort: [Function: Toposort],
  Beautify: 
   { [Function: beautify]
     js: [Object],
     css: [Object],
     html: [Object],
     js_beautify: [Object],
     css_beautify: [Object],
     html_beautify: [Object] },
  Wildcard: [Function],
  Md5: [Function],
  CamelCase: [Function],
  Doctrine: 
   { version: '3.0.0',
     parse: [Function: parse],
     parseType: [Function: parseType],
     parseParamType: [Function: parseParamType],
     unwrapComment: [Function: unwrapComment],
     Syntax: [Object],
     Error: [Function: DoctrineError],
     type: [Object] },
  PropertiesReader: 
   { parse: [Function],
     stringify: [Function],
     createStringifier: [Function: createStringifier] },
  XML2js: 
   { defaults: [Object],
     processors: [Object],
     ValidationError: [Object],
     Builder: [Function: Builder],
     Parser: [Object],
     parseString: [Function] },
  Init: [Function: Init],
  Qualifier: [Function: Qualifier],
  Bean: [Function: Bean],
  Resource: [Function: Resource],
  After: [Function: After],
  Aspect: [Function: Aspect],
  Before: [Function: Before],
  PointCut: [Function: PointCut],
  Inherits: [Function: Inherits],
  Autowire: [Function: Autowire],
  Inject: [Function: Inject],
  Store: [Function: Store],
  Component: [Function: Component],
  Configuration: [Function: Configuration],
  Context: [Function: Context],
  Controller: [Function: Controller],
  Prototype: [Function: Prototype],
  Service: [Function: Service],
  Param: [Function: param],
  Type: { [Function: type] super_: [Object] },
  Namespace: [Function: Namespace],
  Properties: [Function: Properties],
  Run: [Function: Run] }
[2019-01-01T19:39:09.032] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:39:09.033] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:39:09.033] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:09.033] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:39:09.033] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:09.033] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:39:09.034] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:09.034] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:39:23.311] [INFO] PropertiesParser - PropertiesParser initialized ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/parser/annotation/Base/BaseAnnotationParser.js:24:16)
[2019-01-01T19:39:23.340] [INFO] Foundation - Initializing Foundation ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:52:16)
[2019-01-01T19:39:23.311] [INFO] PropertiesParser - Intializing PropertiesParser ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:26:16)
[2019-01-01T19:39:23.311] [TRACE] PropertiesParser -     Setting up property file processors ...  init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:30:17)
[2019-01-01T19:39:23.312] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:39:23.312] [TRACE] PropertiesParser -      => .properties init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:39:23.312] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:39:23.312] [TRACE] PropertiesParser -      => .json init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:39:23.312] [TRACE] PropertiesParser -      using Function ... init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:36:21)
[2019-01-01T19:39:23.312] [TRACE] PropertiesParser -      => .xml init(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/parser/annotation/meta/Properties/PropertiesParser.js:38:25)
[2019-01-01T19:39:23.340] [INFO] Foundation - Parsing base xml context ...  _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:98:16)
[2019-01-01T19:39:23.340] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ... _process(/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/Foundation.js:99:16)
[2019-01-01T19:39:23.367] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:39:23.370] [TRACE] Foundation -     Received context: { phase: [Array],
  stages: [Array],
  LogManager: [Object],
  StaticMemberExpressionIdentifierMatch: [Function: StaticMemberExpressionIdentifierMatch],
  VariableDecorationStaticMemberExpressionIdentifierMatch: [Function: VariableDecorationStaticMemberExpressionIdentifierMatch],
  Diagram: [AsyncFunction: draw],
  TokenParser: [Array],
  PropertiesProcessors: [Array],
  PropertiesAnnotationParserInstance: [Object],
  AnnotationParser: [Array],
  DependencyBuilder: [Object],
  StructureParser: [Object],
  ContextBuilder: [Object],
  Factory: [Object],
  BaseAnnotationParser: [Function: BaseAnnotationParser],
  BeanAnnotationParserPrototype: [Object],
  Esprima: [Object],
  Util: [Object],
  Path: [Object],
  Lodash: [Object],
  Estraverse: [Object],
  Bluebird: [Object],
  FS: [Object],
  Glob: [Object],
  Toposort: [Function: Toposort],
  Beautify: [Object],
  Wildcard: [Function],
  Md5: [Function],
  CamelCase: [Function],
  Doctrine: [Object],
  PropertiesReader: [Object],
  XML2js: [Object],
  Init: [Function: Init],
  Qualifier: [Function: Qualifier],
  Bean: [Function: Bean],
  Resource: [Function: Resource],
  After: [Function: After],
  Aspect: [Function: Aspect],
  Before: [Function: Before],
  PointCut: [Function: PointCut],
  Inherits: [Function: Inherits],
  Autowire: [Function: Autowire],
  Inject: [Function: Inject],
  Store: [Function: Store],
  Component: [Function: Component],
  Configuration: [Function: Configuration],
  Context: [Function: Context],
  Controller: [Function: Controller],
  Prototype: [Function: Prototype],
  Service: [Function: Service],
  Param: [Function: param],
  Type: [Object],
  Namespace: [Function: Namespace],
  Properties: [Function: Properties],
  Run: [Function: Run] }
[2019-01-01T19:39:23.367] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:39:23.367] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:39:23.367] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:23.367] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:39:23.367] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:23.368] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:39:23.368] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:23.368] [TRACE] PropertiesParser -      => .xml
[2019-01-01T19:39:23.378] [INFO] Foundation - Initializing Foundation ... 
[2019-01-01T19:39:23.378] [INFO] Foundation - Parsing base xml context ... 
[2019-01-01T19:39:23.378] [TRACE] Foundation -     Reading xml based context from '/Users/udogerhards/Documents/Bitbucket/nodejs-annotations/lib/foundation/configuration/xmlContext.xml' ...
[2019-01-01T19:39:23.391] [INFO] PropertiesParser - PropertiesParser initialized ...
[2019-01-01T19:39:23.393] [TRACE] Foundation -     Received context: { phase: [Array],
  stages: [Array],
  LogManager: [Object],
  StaticMemberExpressionIdentifierMatch: [Function: StaticMemberExpressionIdentifierMatch],
  VariableDecorationStaticMemberExpressionIdentifierMatch: [Function: VariableDecorationStaticMemberExpressionIdentifierMatch],
  Diagram: [AsyncFunction: draw],
  TokenParser: [Array],
  PropertiesProcessors: [Array],
  PropertiesAnnotationParserInstance: [Object],
  AnnotationParser: [Array],
  DependencyBuilder: [Object],
  StructureParser: [Object],
  ContextBuilder: [Object],
  Factory: [Object],
  BaseAnnotationParser: [Function: BaseAnnotationParser],
  BeanAnnotationParserPrototype: [Object],
  Esprima: [Object],
  Util: [Object],
  Path: [Object],
  Lodash: [Object],
  Estraverse: [Object],
  Bluebird: [Object],
  FS: [Object],
  Glob: [Object],
  Toposort: [Function: Toposort],
  Beautify: [Object],
  Wildcard: [Function],
  Md5: [Function],
  CamelCase: [Function],
  Doctrine: [Object],
  PropertiesReader: [Object],
  XML2js: [Object],
  Init: [Function: Init],
  Qualifier: [Function: Qualifier],
  Bean: [Function: Bean],
  Resource: [Function: Resource],
  After: [Function: After],
  Aspect: [Function: Aspect],
  Before: [Function: Before],
  PointCut: [Function: PointCut],
  Inherits: [Function: Inherits],
  Autowire: [Function: Autowire],
  Inject: [Function: Inject],
  Store: [Function: Store],
  Component: [Function: Component],
  Configuration: [Function: Configuration],
  Context: [Function: Context],
  Controller: [Function: Controller],
  Prototype: [Function: Prototype],
  Service: [Function: Service],
  Param: [Function: param],
  Type: [Object],
  Namespace: [Function: Namespace],
  Properties: [Function: Properties],
  Run: [Function: Run] }
[2019-01-01T19:39:23.392] [INFO] PropertiesParser - Intializing PropertiesParser ... 
[2019-01-01T19:39:23.392] [TRACE] PropertiesParser -     Setting up property file processors ... 
[2019-01-01T19:39:23.392] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:23.392] [TRACE] PropertiesParser -      => .properties
[2019-01-01T19:39:23.392] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:23.392] [TRACE] PropertiesParser -      => .json
[2019-01-01T19:39:23.392] [TRACE] PropertiesParser -      using Function ...
[2019-01-01T19:39:23.392] [TRACE] PropertiesParser -      => .xml
